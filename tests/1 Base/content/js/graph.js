/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 192.0, "minX": 0.0, "maxY": 21608.0, "series": [{"data": [[0.0, 192.0], [0.1, 192.0], [0.2, 192.0], [0.3, 192.0], [0.4, 192.0], [0.5, 193.0], [0.6, 193.0], [0.7, 193.0], [0.8, 193.0], [0.9, 193.0], [1.0, 194.0], [1.1, 194.0], [1.2, 194.0], [1.3, 194.0], [1.4, 195.0], [1.5, 195.0], [1.6, 195.0], [1.7, 195.0], [1.8, 195.0], [1.9, 196.0], [2.0, 196.0], [2.1, 196.0], [2.2, 196.0], [2.3, 196.0], [2.4, 199.0], [2.5, 199.0], [2.6, 199.0], [2.7, 199.0], [2.8, 201.0], [2.9, 201.0], [3.0, 201.0], [3.1, 201.0], [3.2, 201.0], [3.3, 203.0], [3.4, 203.0], [3.5, 203.0], [3.6, 203.0], [3.7, 203.0], [3.8, 203.0], [3.9, 203.0], [4.0, 203.0], [4.1, 203.0], [4.2, 204.0], [4.3, 204.0], [4.4, 204.0], [4.5, 204.0], [4.6, 204.0], [4.7, 208.0], [4.8, 208.0], [4.9, 208.0], [5.0, 208.0], [5.1, 208.0], [5.2, 208.0], [5.3, 208.0], [5.4, 208.0], [5.5, 208.0], [5.6, 209.0], [5.7, 209.0], [5.8, 209.0], [5.9, 209.0], [6.0, 209.0], [6.1, 215.0], [6.2, 215.0], [6.3, 215.0], [6.4, 215.0], [6.5, 215.0], [6.6, 217.0], [6.7, 217.0], [6.8, 217.0], [6.9, 217.0], [7.0, 220.0], [7.1, 220.0], [7.2, 220.0], [7.3, 220.0], [7.4, 220.0], [7.5, 220.0], [7.6, 220.0], [7.7, 220.0], [7.8, 220.0], [7.9, 220.0], [8.0, 223.0], [8.1, 223.0], [8.2, 223.0], [8.3, 223.0], [8.4, 226.0], [8.5, 226.0], [8.6, 226.0], [8.7, 226.0], [8.8, 226.0], [8.9, 226.0], [9.0, 226.0], [9.1, 226.0], [9.2, 226.0], [9.3, 226.0], [9.4, 230.0], [9.5, 230.0], [9.6, 230.0], [9.7, 230.0], [9.8, 233.0], [9.9, 233.0], [10.0, 233.0], [10.1, 233.0], [10.2, 233.0], [10.3, 240.0], [10.4, 240.0], [10.5, 240.0], [10.6, 240.0], [10.7, 256.0], [10.8, 256.0], [10.9, 256.0], [11.0, 256.0], [11.1, 256.0], [11.2, 258.0], [11.3, 258.0], [11.4, 258.0], [11.5, 258.0], [11.6, 258.0], [11.7, 259.0], [11.8, 259.0], [11.9, 259.0], [12.0, 259.0], [12.1, 267.0], [12.2, 267.0], [12.3, 267.0], [12.4, 267.0], [12.5, 267.0], [12.6, 279.0], [12.7, 279.0], [12.8, 279.0], [12.9, 279.0], [13.0, 279.0], [13.1, 280.0], [13.2, 280.0], [13.3, 280.0], [13.4, 280.0], [13.5, 284.0], [13.6, 284.0], [13.7, 284.0], [13.8, 284.0], [13.9, 284.0], [14.0, 284.0], [14.1, 284.0], [14.2, 284.0], [14.3, 284.0], [14.4, 284.0], [14.5, 291.0], [14.6, 291.0], [14.7, 291.0], [14.8, 291.0], [14.9, 291.0], [15.0, 291.0], [15.1, 291.0], [15.2, 291.0], [15.3, 291.0], [15.4, 293.0], [15.5, 293.0], [15.6, 293.0], [15.7, 293.0], [15.8, 293.0], [15.9, 294.0], [16.0, 294.0], [16.1, 294.0], [16.2, 294.0], [16.3, 296.0], [16.4, 296.0], [16.5, 296.0], [16.6, 296.0], [16.7, 296.0], [16.8, 302.0], [16.9, 302.0], [17.0, 302.0], [17.1, 302.0], [17.2, 302.0], [17.3, 302.0], [17.4, 302.0], [17.5, 302.0], [17.6, 302.0], [17.7, 308.0], [17.8, 308.0], [17.9, 308.0], [18.0, 308.0], [18.1, 308.0], [18.2, 316.0], [18.3, 316.0], [18.4, 316.0], [18.5, 316.0], [18.6, 316.0], [18.7, 319.0], [18.8, 319.0], [18.9, 319.0], [19.0, 319.0], [19.1, 324.0], [19.2, 324.0], [19.3, 324.0], [19.4, 324.0], [19.5, 324.0], [19.6, 325.0], [19.7, 325.0], [19.8, 325.0], [19.9, 325.0], [20.0, 325.0], [20.1, 330.0], [20.2, 330.0], [20.3, 330.0], [20.4, 330.0], [20.5, 335.0], [20.6, 335.0], [20.7, 335.0], [20.8, 335.0], [20.9, 335.0], [21.0, 339.0], [21.1, 339.0], [21.2, 339.0], [21.3, 339.0], [21.4, 342.0], [21.5, 342.0], [21.6, 342.0], [21.7, 342.0], [21.8, 342.0], [21.9, 344.0], [22.0, 344.0], [22.1, 344.0], [22.2, 344.0], [22.3, 344.0], [22.4, 349.0], [22.5, 349.0], [22.6, 349.0], [22.7, 349.0], [22.8, 349.0], [22.9, 349.0], [23.0, 349.0], [23.1, 349.0], [23.2, 349.0], [23.3, 356.0], [23.4, 356.0], [23.5, 356.0], [23.6, 356.0], [23.7, 356.0], [23.8, 372.0], [23.9, 372.0], [24.0, 372.0], [24.1, 372.0], [24.2, 378.0], [24.3, 378.0], [24.4, 378.0], [24.5, 378.0], [24.6, 378.0], [24.7, 382.0], [24.8, 382.0], [24.9, 382.0], [25.0, 382.0], [25.1, 382.0], [25.2, 384.0], [25.3, 384.0], [25.4, 384.0], [25.5, 384.0], [25.6, 387.0], [25.7, 387.0], [25.8, 387.0], [25.9, 387.0], [26.0, 387.0], [26.1, 389.0], [26.2, 389.0], [26.3, 389.0], [26.4, 389.0], [26.5, 389.0], [26.6, 391.0], [26.7, 391.0], [26.8, 391.0], [26.9, 391.0], [27.0, 393.0], [27.1, 393.0], [27.2, 393.0], [27.3, 393.0], [27.4, 393.0], [27.5, 394.0], [27.6, 394.0], [27.7, 394.0], [27.8, 394.0], [27.9, 394.0], [28.0, 398.0], [28.1, 398.0], [28.2, 398.0], [28.3, 398.0], [28.4, 400.0], [28.5, 400.0], [28.6, 400.0], [28.7, 400.0], [28.8, 400.0], [28.9, 429.0], [29.0, 429.0], [29.1, 429.0], [29.2, 429.0], [29.3, 429.0], [29.4, 432.0], [29.5, 432.0], [29.6, 432.0], [29.7, 432.0], [29.8, 443.0], [29.9, 443.0], [30.0, 443.0], [30.1, 443.0], [30.2, 443.0], [30.3, 444.0], [30.4, 444.0], [30.5, 444.0], [30.6, 444.0], [30.7, 445.0], [30.8, 445.0], [30.9, 445.0], [31.0, 445.0], [31.1, 445.0], [31.2, 446.0], [31.3, 446.0], [31.4, 446.0], [31.5, 446.0], [31.6, 446.0], [31.7, 447.0], [31.8, 447.0], [31.9, 447.0], [32.0, 447.0], [32.1, 451.0], [32.2, 451.0], [32.3, 451.0], [32.4, 451.0], [32.5, 451.0], [32.6, 454.0], [32.7, 454.0], [32.8, 454.0], [32.9, 454.0], [33.0, 454.0], [33.1, 458.0], [33.2, 458.0], [33.3, 458.0], [33.4, 458.0], [33.5, 464.0], [33.6, 464.0], [33.7, 464.0], [33.8, 464.0], [33.9, 464.0], [34.0, 468.0], [34.1, 468.0], [34.2, 468.0], [34.3, 468.0], [34.4, 468.0], [34.5, 468.0], [34.6, 468.0], [34.7, 468.0], [34.8, 468.0], [34.9, 471.0], [35.0, 471.0], [35.1, 471.0], [35.2, 471.0], [35.3, 471.0], [35.4, 472.0], [35.5, 472.0], [35.6, 472.0], [35.7, 472.0], [35.8, 472.0], [35.9, 472.0], [36.0, 472.0], [36.1, 472.0], [36.2, 472.0], [36.3, 474.0], [36.4, 474.0], [36.5, 474.0], [36.6, 474.0], [36.7, 474.0], [36.8, 475.0], [36.9, 475.0], [37.0, 475.0], [37.1, 475.0], [37.2, 475.0], [37.3, 475.0], [37.4, 475.0], [37.5, 475.0], [37.6, 475.0], [37.7, 477.0], [37.8, 477.0], [37.9, 477.0], [38.0, 477.0], [38.1, 477.0], [38.2, 480.0], [38.3, 480.0], [38.4, 480.0], [38.5, 480.0], [38.6, 480.0], [38.7, 480.0], [38.8, 480.0], [38.9, 480.0], [39.0, 480.0], [39.1, 488.0], [39.2, 488.0], [39.3, 488.0], [39.4, 488.0], [39.5, 488.0], [39.6, 500.0], [39.7, 500.0], [39.8, 500.0], [39.9, 500.0], [40.0, 500.0], [40.1, 519.0], [40.2, 519.0], [40.3, 519.0], [40.4, 519.0], [40.5, 523.0], [40.6, 523.0], [40.7, 523.0], [40.8, 523.0], [40.9, 523.0], [41.0, 526.0], [41.1, 526.0], [41.2, 526.0], [41.3, 526.0], [41.4, 534.0], [41.5, 534.0], [41.6, 534.0], [41.7, 534.0], [41.8, 534.0], [41.9, 537.0], [42.0, 537.0], [42.1, 537.0], [42.2, 537.0], [42.3, 537.0], [42.4, 542.0], [42.5, 542.0], [42.6, 542.0], [42.7, 542.0], [42.8, 561.0], [42.9, 561.0], [43.0, 561.0], [43.1, 561.0], [43.2, 561.0], [43.3, 570.0], [43.4, 570.0], [43.5, 570.0], [43.6, 570.0], [43.7, 570.0], [43.8, 572.0], [43.9, 572.0], [44.0, 572.0], [44.1, 572.0], [44.2, 584.0], [44.3, 584.0], [44.4, 584.0], [44.5, 584.0], [44.6, 584.0], [44.7, 588.0], [44.8, 588.0], [44.9, 588.0], [45.0, 588.0], [45.1, 588.0], [45.2, 590.0], [45.3, 590.0], [45.4, 590.0], [45.5, 590.0], [45.6, 601.0], [45.7, 601.0], [45.8, 601.0], [45.9, 601.0], [46.0, 601.0], [46.1, 603.0], [46.2, 603.0], [46.3, 603.0], [46.4, 603.0], [46.5, 603.0], [46.6, 607.0], [46.7, 607.0], [46.8, 607.0], [46.9, 607.0], [47.0, 629.0], [47.1, 629.0], [47.2, 629.0], [47.3, 629.0], [47.4, 629.0], [47.5, 646.0], [47.6, 646.0], [47.7, 646.0], [47.8, 646.0], [47.9, 646.0], [48.0, 655.0], [48.1, 655.0], [48.2, 655.0], [48.3, 655.0], [48.4, 661.0], [48.5, 661.0], [48.6, 661.0], [48.7, 661.0], [48.8, 661.0], [48.9, 680.0], [49.0, 680.0], [49.1, 680.0], [49.2, 680.0], [49.3, 680.0], [49.4, 685.0], [49.5, 685.0], [49.6, 685.0], [49.7, 685.0], [49.8, 695.0], [49.9, 695.0], [50.0, 695.0], [50.1, 695.0], [50.2, 695.0], [50.3, 700.0], [50.4, 700.0], [50.5, 700.0], [50.6, 700.0], [50.7, 707.0], [50.8, 707.0], [50.9, 707.0], [51.0, 707.0], [51.1, 707.0], [51.2, 720.0], [51.3, 720.0], [51.4, 720.0], [51.5, 720.0], [51.6, 720.0], [51.7, 778.0], [51.8, 778.0], [51.9, 778.0], [52.0, 778.0], [52.1, 778.0], [52.2, 778.0], [52.3, 778.0], [52.4, 778.0], [52.5, 778.0], [52.6, 781.0], [52.7, 781.0], [52.8, 781.0], [52.9, 781.0], [53.0, 781.0], [53.1, 781.0], [53.2, 781.0], [53.3, 781.0], [53.4, 781.0], [53.5, 788.0], [53.6, 788.0], [53.7, 788.0], [53.8, 788.0], [53.9, 788.0], [54.0, 788.0], [54.1, 788.0], [54.2, 788.0], [54.3, 788.0], [54.4, 788.0], [54.5, 791.0], [54.6, 791.0], [54.7, 791.0], [54.8, 791.0], [54.9, 804.0], [55.0, 804.0], [55.1, 804.0], [55.2, 804.0], [55.3, 804.0], [55.4, 805.0], [55.5, 805.0], [55.6, 805.0], [55.7, 805.0], [55.8, 805.0], [55.9, 806.0], [56.0, 806.0], [56.1, 806.0], [56.2, 806.0], [56.3, 811.0], [56.4, 811.0], [56.5, 811.0], [56.6, 811.0], [56.7, 811.0], [56.8, 821.0], [56.9, 821.0], [57.0, 821.0], [57.1, 821.0], [57.2, 821.0], [57.3, 834.0], [57.4, 834.0], [57.5, 834.0], [57.6, 834.0], [57.7, 840.0], [57.8, 840.0], [57.9, 840.0], [58.0, 840.0], [58.1, 840.0], [58.2, 843.0], [58.3, 843.0], [58.4, 843.0], [58.5, 843.0], [58.6, 843.0], [58.7, 846.0], [58.8, 846.0], [58.9, 846.0], [59.0, 846.0], [59.1, 850.0], [59.2, 850.0], [59.3, 850.0], [59.4, 850.0], [59.5, 850.0], [59.6, 858.0], [59.7, 858.0], [59.8, 858.0], [59.9, 858.0], [60.0, 858.0], [60.1, 875.0], [60.2, 875.0], [60.3, 875.0], [60.4, 875.0], [60.5, 886.0], [60.6, 886.0], [60.7, 886.0], [60.8, 886.0], [60.9, 886.0], [61.0, 904.0], [61.1, 904.0], [61.2, 904.0], [61.3, 904.0], [61.4, 910.0], [61.5, 910.0], [61.6, 910.0], [61.7, 910.0], [61.8, 910.0], [61.9, 924.0], [62.0, 924.0], [62.1, 924.0], [62.2, 924.0], [62.3, 924.0], [62.4, 925.0], [62.5, 925.0], [62.6, 925.0], [62.7, 925.0], [62.8, 930.0], [62.9, 930.0], [63.0, 930.0], [63.1, 930.0], [63.2, 930.0], [63.3, 942.0], [63.4, 942.0], [63.5, 942.0], [63.6, 942.0], [63.7, 942.0], [63.8, 951.0], [63.9, 951.0], [64.0, 951.0], [64.1, 951.0], [64.2, 961.0], [64.3, 961.0], [64.4, 961.0], [64.5, 961.0], [64.6, 961.0], [64.7, 995.0], [64.8, 995.0], [64.9, 995.0], [65.0, 995.0], [65.1, 995.0], [65.2, 1043.0], [65.3, 1043.0], [65.4, 1043.0], [65.5, 1043.0], [65.6, 1049.0], [65.7, 1049.0], [65.8, 1049.0], [65.9, 1049.0], [66.0, 1049.0], [66.1, 1099.0], [66.2, 1099.0], [66.3, 1099.0], [66.4, 1099.0], [66.5, 1099.0], [66.6, 1110.0], [66.7, 1110.0], [66.8, 1110.0], [66.9, 1110.0], [67.0, 1221.0], [67.1, 1221.0], [67.2, 1221.0], [67.3, 1221.0], [67.4, 1221.0], [67.5, 1278.0], [67.6, 1278.0], [67.7, 1278.0], [67.8, 1278.0], [67.9, 1278.0], [68.0, 1527.0], [68.1, 1527.0], [68.2, 1527.0], [68.3, 1527.0], [68.4, 1554.0], [68.5, 1554.0], [68.6, 1554.0], [68.7, 1554.0], [68.8, 1554.0], [68.9, 1744.0], [69.0, 1744.0], [69.1, 1744.0], [69.2, 1744.0], [69.3, 1744.0], [69.4, 1757.0], [69.5, 1757.0], [69.6, 1757.0], [69.7, 1757.0], [69.8, 1808.0], [69.9, 1808.0], [70.0, 1808.0], [70.1, 1808.0], [70.2, 1808.0], [70.3, 1814.0], [70.4, 1814.0], [70.5, 1814.0], [70.6, 1814.0], [70.7, 1891.0], [70.8, 1891.0], [70.9, 1891.0], [71.0, 1891.0], [71.1, 1891.0], [71.2, 1994.0], [71.3, 1994.0], [71.4, 1994.0], [71.5, 1994.0], [71.6, 1994.0], [71.7, 2003.0], [71.8, 2003.0], [71.9, 2003.0], [72.0, 2003.0], [72.1, 2008.0], [72.2, 2008.0], [72.3, 2008.0], [72.4, 2008.0], [72.5, 2008.0], [72.6, 2027.0], [72.7, 2027.0], [72.8, 2027.0], [72.9, 2027.0], [73.0, 2027.0], [73.1, 2101.0], [73.2, 2101.0], [73.3, 2101.0], [73.4, 2101.0], [73.5, 2154.0], [73.6, 2154.0], [73.7, 2154.0], [73.8, 2154.0], [73.9, 2154.0], [74.0, 2179.0], [74.1, 2179.0], [74.2, 2179.0], [74.3, 2179.0], [74.4, 2179.0], [74.5, 2254.0], [74.6, 2254.0], [74.7, 2254.0], [74.8, 2254.0], [74.9, 2268.0], [75.0, 2268.0], [75.1, 2268.0], [75.2, 2268.0], [75.3, 2268.0], [75.4, 2284.0], [75.5, 2284.0], [75.6, 2284.0], [75.7, 2284.0], [75.8, 2284.0], [75.9, 2348.0], [76.0, 2348.0], [76.1, 2348.0], [76.2, 2348.0], [76.3, 2459.0], [76.4, 2459.0], [76.5, 2459.0], [76.6, 2459.0], [76.7, 2459.0], [76.8, 2642.0], [76.9, 2642.0], [77.0, 2642.0], [77.1, 2642.0], [77.2, 2642.0], [77.3, 2755.0], [77.4, 2755.0], [77.5, 2755.0], [77.6, 2755.0], [77.7, 2947.0], [77.8, 2947.0], [77.9, 2947.0], [78.0, 2947.0], [78.1, 2947.0], [78.2, 3153.0], [78.3, 3153.0], [78.4, 3153.0], [78.5, 3153.0], [78.6, 3153.0], [78.7, 3355.0], [78.8, 3355.0], [78.9, 3355.0], [79.0, 3355.0], [79.1, 3384.0], [79.2, 3384.0], [79.3, 3384.0], [79.4, 3384.0], [79.5, 3384.0], [79.6, 3757.0], [79.7, 3757.0], [79.8, 3757.0], [79.9, 3757.0], [80.0, 4915.0], [80.1, 4915.0], [80.2, 4915.0], [80.3, 4915.0], [80.4, 4915.0], [80.5, 4975.0], [80.6, 4975.0], [80.7, 4975.0], [80.8, 4975.0], [80.9, 4975.0], [81.0, 4976.0], [81.1, 4976.0], [81.2, 4976.0], [81.3, 4976.0], [81.4, 5178.0], [81.5, 5178.0], [81.6, 5178.0], [81.7, 5178.0], [81.8, 5178.0], [81.9, 5230.0], [82.0, 5230.0], [82.1, 5230.0], [82.2, 5230.0], [82.3, 5230.0], [82.4, 5275.0], [82.5, 5275.0], [82.6, 5275.0], [82.7, 5275.0], [82.8, 5368.0], [82.9, 5368.0], [83.0, 5368.0], [83.1, 5368.0], [83.2, 5368.0], [83.3, 5599.0], [83.4, 5599.0], [83.5, 5599.0], [83.6, 5599.0], [83.7, 5599.0], [83.8, 5617.0], [83.9, 5617.0], [84.0, 5617.0], [84.1, 5617.0], [84.2, 5750.0], [84.3, 5750.0], [84.4, 5750.0], [84.5, 5750.0], [84.6, 5750.0], [84.7, 6075.0], [84.8, 6075.0], [84.9, 6075.0], [85.0, 6075.0], [85.1, 6075.0], [85.2, 6293.0], [85.3, 6293.0], [85.4, 6293.0], [85.5, 6293.0], [85.6, 6314.0], [85.7, 6314.0], [85.8, 6314.0], [85.9, 6314.0], [86.0, 6314.0], [86.1, 6424.0], [86.2, 6424.0], [86.3, 6424.0], [86.4, 6424.0], [86.5, 6424.0], [86.6, 7181.0], [86.7, 7181.0], [86.8, 7181.0], [86.9, 7181.0], [87.0, 7490.0], [87.1, 7490.0], [87.2, 7490.0], [87.3, 7490.0], [87.4, 7490.0], [87.5, 7930.0], [87.6, 7930.0], [87.7, 7930.0], [87.8, 7930.0], [87.9, 7930.0], [88.0, 8044.0], [88.1, 8044.0], [88.2, 8044.0], [88.3, 8044.0], [88.4, 8599.0], [88.5, 8599.0], [88.6, 8599.0], [88.7, 8599.0], [88.8, 8599.0], [88.9, 8799.0], [89.0, 8799.0], [89.1, 8799.0], [89.2, 8799.0], [89.3, 8799.0], [89.4, 9174.0], [89.5, 9174.0], [89.6, 9174.0], [89.7, 9174.0], [89.8, 9176.0], [89.9, 9176.0], [90.0, 9176.0], [90.1, 9176.0], [90.2, 9176.0], [90.3, 9366.0], [90.4, 9366.0], [90.5, 9366.0], [90.6, 9366.0], [90.7, 9368.0], [90.8, 9368.0], [90.9, 9368.0], [91.0, 9368.0], [91.1, 9368.0], [91.2, 9428.0], [91.3, 9428.0], [91.4, 9428.0], [91.5, 9428.0], [91.6, 9428.0], [91.7, 9492.0], [91.8, 9492.0], [91.9, 9492.0], [92.0, 9492.0], [92.1, 9595.0], [92.2, 9595.0], [92.3, 9595.0], [92.4, 9595.0], [92.5, 9595.0], [92.6, 10191.0], [92.7, 10191.0], [92.8, 10191.0], [92.9, 10191.0], [93.0, 10191.0], [93.1, 10258.0], [93.2, 10258.0], [93.3, 10258.0], [93.4, 10258.0], [93.5, 10292.0], [93.6, 10292.0], [93.7, 10292.0], [93.8, 10292.0], [93.9, 10292.0], [94.0, 10385.0], [94.1, 10385.0], [94.2, 10385.0], [94.3, 10385.0], [94.4, 10385.0], [94.5, 10807.0], [94.6, 10807.0], [94.7, 10807.0], [94.8, 10807.0], [94.9, 10838.0], [95.0, 10838.0], [95.1, 10838.0], [95.2, 10838.0], [95.3, 10838.0], [95.4, 10838.0], [95.5, 10838.0], [95.6, 10838.0], [95.7, 10838.0], [95.8, 10838.0], [95.9, 10857.0], [96.0, 10857.0], [96.1, 10857.0], [96.2, 10857.0], [96.3, 10862.0], [96.4, 10862.0], [96.5, 10862.0], [96.6, 10862.0], [96.7, 10862.0], [96.8, 10869.0], [96.9, 10869.0], [97.0, 10869.0], [97.1, 10869.0], [97.2, 10869.0], [97.3, 10883.0], [97.4, 10883.0], [97.5, 10883.0], [97.6, 10883.0], [97.7, 11058.0], [97.8, 11058.0], [97.9, 11058.0], [98.0, 11058.0], [98.1, 11058.0], [98.2, 11088.0], [98.3, 11088.0], [98.4, 11088.0], [98.5, 11088.0], [98.6, 11088.0], [98.7, 11096.0], [98.8, 11096.0], [98.9, 11096.0], [99.0, 11096.0], [99.1, 11156.0], [99.2, 11156.0], [99.3, 11156.0], [99.4, 11156.0], [99.5, 11156.0], [99.6, 11193.0], [99.7, 11193.0], [99.8, 11193.0], [99.9, 11193.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[0.0, 294.0], [0.1, 294.0], [0.2, 294.0], [0.3, 294.0], [0.4, 294.0], [0.5, 295.0], [0.6, 295.0], [0.7, 295.0], [0.8, 295.0], [0.9, 295.0], [1.0, 297.0], [1.1, 297.0], [1.2, 297.0], [1.3, 297.0], [1.4, 303.0], [1.5, 303.0], [1.6, 303.0], [1.7, 303.0], [1.8, 303.0], [1.9, 303.0], [2.0, 303.0], [2.1, 303.0], [2.2, 303.0], [2.3, 303.0], [2.4, 304.0], [2.5, 304.0], [2.6, 304.0], [2.7, 304.0], [2.8, 305.0], [2.9, 305.0], [3.0, 305.0], [3.1, 305.0], [3.2, 305.0], [3.3, 307.0], [3.4, 307.0], [3.5, 307.0], [3.6, 307.0], [3.7, 307.0], [3.8, 307.0], [3.9, 307.0], [4.0, 307.0], [4.1, 307.0], [4.2, 310.0], [4.3, 310.0], [4.4, 310.0], [4.5, 310.0], [4.6, 310.0], [4.7, 312.0], [4.8, 312.0], [4.9, 312.0], [5.0, 312.0], [5.1, 312.0], [5.2, 312.0], [5.3, 312.0], [5.4, 312.0], [5.5, 312.0], [5.6, 312.0], [5.7, 312.0], [5.8, 312.0], [5.9, 312.0], [6.0, 312.0], [6.1, 315.0], [6.2, 315.0], [6.3, 315.0], [6.4, 315.0], [6.5, 315.0], [6.6, 315.0], [6.7, 315.0], [6.8, 315.0], [6.9, 315.0], [7.0, 319.0], [7.1, 319.0], [7.2, 319.0], [7.3, 319.0], [7.4, 319.0], [7.5, 326.0], [7.6, 326.0], [7.7, 326.0], [7.8, 326.0], [7.9, 326.0], [8.0, 353.0], [8.1, 353.0], [8.2, 353.0], [8.3, 353.0], [8.4, 379.0], [8.5, 379.0], [8.6, 379.0], [8.7, 379.0], [8.8, 379.0], [8.9, 382.0], [9.0, 382.0], [9.1, 382.0], [9.2, 382.0], [9.3, 382.0], [9.4, 389.0], [9.5, 389.0], [9.6, 389.0], [9.7, 389.0], [9.8, 397.0], [9.9, 397.0], [10.0, 397.0], [10.1, 397.0], [10.2, 397.0], [10.3, 398.0], [10.4, 398.0], [10.5, 398.0], [10.6, 398.0], [10.7, 399.0], [10.8, 399.0], [10.9, 399.0], [11.0, 399.0], [11.1, 399.0], [11.2, 414.0], [11.3, 414.0], [11.4, 414.0], [11.5, 414.0], [11.6, 414.0], [11.7, 452.0], [11.8, 452.0], [11.9, 452.0], [12.0, 452.0], [12.1, 459.0], [12.2, 459.0], [12.3, 459.0], [12.4, 459.0], [12.5, 459.0], [12.6, 464.0], [12.7, 464.0], [12.8, 464.0], [12.9, 464.0], [13.0, 464.0], [13.1, 479.0], [13.2, 479.0], [13.3, 479.0], [13.4, 479.0], [13.5, 497.0], [13.6, 497.0], [13.7, 497.0], [13.8, 497.0], [13.9, 497.0], [14.0, 517.0], [14.1, 517.0], [14.2, 517.0], [14.3, 517.0], [14.4, 517.0], [14.5, 524.0], [14.6, 524.0], [14.7, 524.0], [14.8, 524.0], [14.9, 526.0], [15.0, 526.0], [15.1, 526.0], [15.2, 526.0], [15.3, 526.0], [15.4, 527.0], [15.5, 527.0], [15.6, 527.0], [15.7, 527.0], [15.8, 527.0], [15.9, 551.0], [16.0, 551.0], [16.1, 551.0], [16.2, 551.0], [16.3, 557.0], [16.4, 557.0], [16.5, 557.0], [16.6, 557.0], [16.7, 557.0], [16.8, 559.0], [16.9, 559.0], [17.0, 559.0], [17.1, 559.0], [17.2, 559.0], [17.3, 561.0], [17.4, 561.0], [17.5, 561.0], [17.6, 561.0], [17.7, 585.0], [17.8, 585.0], [17.9, 585.0], [18.0, 585.0], [18.1, 585.0], [18.2, 621.0], [18.3, 621.0], [18.4, 621.0], [18.5, 621.0], [18.6, 621.0], [18.7, 692.0], [18.8, 692.0], [18.9, 692.0], [19.0, 692.0], [19.1, 714.0], [19.2, 714.0], [19.3, 714.0], [19.4, 714.0], [19.5, 714.0], [19.6, 719.0], [19.7, 719.0], [19.8, 719.0], [19.9, 719.0], [20.0, 719.0], [20.1, 762.0], [20.2, 762.0], [20.3, 762.0], [20.4, 762.0], [20.5, 1021.0], [20.6, 1021.0], [20.7, 1021.0], [20.8, 1021.0], [20.9, 1021.0], [21.0, 1090.0], [21.1, 1090.0], [21.2, 1090.0], [21.3, 1090.0], [21.4, 1135.0], [21.5, 1135.0], [21.6, 1135.0], [21.7, 1135.0], [21.8, 1135.0], [21.9, 1155.0], [22.0, 1155.0], [22.1, 1155.0], [22.2, 1155.0], [22.3, 1155.0], [22.4, 1191.0], [22.5, 1191.0], [22.6, 1191.0], [22.7, 1191.0], [22.8, 1258.0], [22.9, 1258.0], [23.0, 1258.0], [23.1, 1258.0], [23.2, 1258.0], [23.3, 1326.0], [23.4, 1326.0], [23.5, 1326.0], [23.6, 1326.0], [23.7, 1326.0], [23.8, 1377.0], [23.9, 1377.0], [24.0, 1377.0], [24.1, 1377.0], [24.2, 1405.0], [24.3, 1405.0], [24.4, 1405.0], [24.5, 1405.0], [24.6, 1405.0], [24.7, 1552.0], [24.8, 1552.0], [24.9, 1552.0], [25.0, 1552.0], [25.1, 1552.0], [25.2, 2044.0], [25.3, 2044.0], [25.4, 2044.0], [25.5, 2044.0], [25.6, 2189.0], [25.7, 2189.0], [25.8, 2189.0], [25.9, 2189.0], [26.0, 2189.0], [26.1, 2267.0], [26.2, 2267.0], [26.3, 2267.0], [26.4, 2267.0], [26.5, 2267.0], [26.6, 2421.0], [26.7, 2421.0], [26.8, 2421.0], [26.9, 2421.0], [27.0, 2577.0], [27.1, 2577.0], [27.2, 2577.0], [27.3, 2577.0], [27.4, 2577.0], [27.5, 3030.0], [27.6, 3030.0], [27.7, 3030.0], [27.8, 3030.0], [27.9, 3030.0], [28.0, 3704.0], [28.1, 3704.0], [28.2, 3704.0], [28.3, 3704.0], [28.4, 3986.0], [28.5, 3986.0], [28.6, 3986.0], [28.7, 3986.0], [28.8, 3986.0], [28.9, 4280.0], [29.0, 4280.0], [29.1, 4280.0], [29.2, 4280.0], [29.3, 4280.0], [29.4, 4297.0], [29.5, 4297.0], [29.6, 4297.0], [29.7, 4297.0], [29.8, 4308.0], [29.9, 4308.0], [30.0, 4308.0], [30.1, 4308.0], [30.2, 4308.0], [30.3, 4366.0], [30.4, 4366.0], [30.5, 4366.0], [30.6, 4366.0], [30.7, 4458.0], [30.8, 4458.0], [30.9, 4458.0], [31.0, 4458.0], [31.1, 4458.0], [31.2, 4501.0], [31.3, 4501.0], [31.4, 4501.0], [31.5, 4501.0], [31.6, 4501.0], [31.7, 4634.0], [31.8, 4634.0], [31.9, 4634.0], [32.0, 4634.0], [32.1, 4793.0], [32.2, 4793.0], [32.3, 4793.0], [32.4, 4793.0], [32.5, 4793.0], [32.6, 4955.0], [32.7, 4955.0], [32.8, 4955.0], [32.9, 4955.0], [33.0, 4955.0], [33.1, 5549.0], [33.2, 5549.0], [33.3, 5549.0], [33.4, 5549.0], [33.5, 5733.0], [33.6, 5733.0], [33.7, 5733.0], [33.8, 5733.0], [33.9, 5733.0], [34.0, 5898.0], [34.1, 5898.0], [34.2, 5898.0], [34.3, 5898.0], [34.4, 5898.0], [34.5, 6253.0], [34.6, 6253.0], [34.7, 6253.0], [34.8, 6253.0], [34.9, 7050.0], [35.0, 7050.0], [35.1, 7050.0], [35.2, 7050.0], [35.3, 7050.0], [35.4, 7465.0], [35.5, 7465.0], [35.6, 7465.0], [35.7, 7465.0], [35.8, 7465.0], [35.9, 7749.0], [36.0, 7749.0], [36.1, 7749.0], [36.2, 7749.0], [36.3, 8598.0], [36.4, 8598.0], [36.5, 8598.0], [36.6, 8598.0], [36.7, 8598.0], [36.8, 9022.0], [36.9, 9022.0], [37.0, 9022.0], [37.1, 9022.0], [37.2, 9022.0], [37.3, 9204.0], [37.4, 9204.0], [37.5, 9204.0], [37.6, 9204.0], [37.7, 9437.0], [37.8, 9437.0], [37.9, 9437.0], [38.0, 9437.0], [38.1, 9437.0], [38.2, 10278.0], [38.3, 10278.0], [38.4, 10278.0], [38.5, 10278.0], [38.6, 10278.0], [38.7, 10407.0], [38.8, 10407.0], [38.9, 10407.0], [39.0, 10407.0], [39.1, 10734.0], [39.2, 10734.0], [39.3, 10734.0], [39.4, 10734.0], [39.5, 10734.0], [39.6, 10830.0], [39.7, 10830.0], [39.8, 10830.0], [39.9, 10830.0], [40.0, 10830.0], [40.1, 10910.0], [40.2, 10910.0], [40.3, 10910.0], [40.4, 10910.0], [40.5, 11222.0], [40.6, 11222.0], [40.7, 11222.0], [40.8, 11222.0], [40.9, 11222.0], [41.0, 11373.0], [41.1, 11373.0], [41.2, 11373.0], [41.3, 11373.0], [41.4, 12106.0], [41.5, 12106.0], [41.6, 12106.0], [41.7, 12106.0], [41.8, 12106.0], [41.9, 12183.0], [42.0, 12183.0], [42.1, 12183.0], [42.2, 12183.0], [42.3, 12183.0], [42.4, 12434.0], [42.5, 12434.0], [42.6, 12434.0], [42.7, 12434.0], [42.8, 12698.0], [42.9, 12698.0], [43.0, 12698.0], [43.1, 12698.0], [43.2, 12698.0], [43.3, 13325.0], [43.4, 13325.0], [43.5, 13325.0], [43.6, 13325.0], [43.7, 13325.0], [43.8, 13516.0], [43.9, 13516.0], [44.0, 13516.0], [44.1, 13516.0], [44.2, 13787.0], [44.3, 13787.0], [44.4, 13787.0], [44.5, 13787.0], [44.6, 13787.0], [44.7, 13863.0], [44.8, 13863.0], [44.9, 13863.0], [45.0, 13863.0], [45.1, 13863.0], [45.2, 14085.0], [45.3, 14085.0], [45.4, 14085.0], [45.5, 14085.0], [45.6, 14270.0], [45.7, 14270.0], [45.8, 14270.0], [45.9, 14270.0], [46.0, 14270.0], [46.1, 14512.0], [46.2, 14512.0], [46.3, 14512.0], [46.4, 14512.0], [46.5, 14512.0], [46.6, 14548.0], [46.7, 14548.0], [46.8, 14548.0], [46.9, 14548.0], [47.0, 15127.0], [47.1, 15127.0], [47.2, 15127.0], [47.3, 15127.0], [47.4, 15127.0], [47.5, 15616.0], [47.6, 15616.0], [47.7, 15616.0], [47.8, 15616.0], [47.9, 15616.0], [48.0, 15714.0], [48.1, 15714.0], [48.2, 15714.0], [48.3, 15714.0], [48.4, 15924.0], [48.5, 15924.0], [48.6, 15924.0], [48.7, 15924.0], [48.8, 15924.0], [48.9, 16184.0], [49.0, 16184.0], [49.1, 16184.0], [49.2, 16184.0], [49.3, 16184.0], [49.4, 16646.0], [49.5, 16646.0], [49.6, 16646.0], [49.7, 16646.0], [49.8, 17096.0], [49.9, 17096.0], [50.0, 17096.0], [50.1, 17096.0], [50.2, 17096.0], [50.3, 17113.0], [50.4, 17113.0], [50.5, 17113.0], [50.6, 17113.0], [50.7, 17338.0], [50.8, 17338.0], [50.9, 17338.0], [51.0, 17338.0], [51.1, 17338.0], [51.2, 17466.0], [51.3, 17466.0], [51.4, 17466.0], [51.5, 17466.0], [51.6, 17466.0], [51.7, 17580.0], [51.8, 17580.0], [51.9, 17580.0], [52.0, 17580.0], [52.1, 17590.0], [52.2, 17590.0], [52.3, 17590.0], [52.4, 17590.0], [52.5, 17590.0], [52.6, 17716.0], [52.7, 17716.0], [52.8, 17716.0], [52.9, 17716.0], [53.0, 17716.0], [53.1, 17811.0], [53.2, 17811.0], [53.3, 17811.0], [53.4, 17811.0], [53.5, 17836.0], [53.6, 17836.0], [53.7, 17836.0], [53.8, 17836.0], [53.9, 17836.0], [54.0, 17891.0], [54.1, 17891.0], [54.2, 17891.0], [54.3, 17891.0], [54.4, 17891.0], [54.5, 17911.0], [54.6, 17911.0], [54.7, 17911.0], [54.8, 17911.0], [54.9, 17934.0], [55.0, 17934.0], [55.1, 17934.0], [55.2, 17934.0], [55.3, 17934.0], [55.4, 17975.0], [55.5, 17975.0], [55.6, 17975.0], [55.7, 17975.0], [55.8, 17975.0], [55.9, 17978.0], [56.0, 17978.0], [56.1, 17978.0], [56.2, 17978.0], [56.3, 18023.0], [56.4, 18023.0], [56.5, 18023.0], [56.6, 18023.0], [56.7, 18023.0], [56.8, 18065.0], [56.9, 18065.0], [57.0, 18065.0], [57.1, 18065.0], [57.2, 18065.0], [57.3, 18098.0], [57.4, 18098.0], [57.5, 18098.0], [57.6, 18098.0], [57.7, 18110.0], [57.8, 18110.0], [57.9, 18110.0], [58.0, 18110.0], [58.1, 18110.0], [58.2, 18144.0], [58.3, 18144.0], [58.4, 18144.0], [58.5, 18144.0], [58.6, 18144.0], [58.7, 18169.0], [58.8, 18169.0], [58.9, 18169.0], [59.0, 18169.0], [59.1, 18205.0], [59.2, 18205.0], [59.3, 18205.0], [59.4, 18205.0], [59.5, 18205.0], [59.6, 18209.0], [59.7, 18209.0], [59.8, 18209.0], [59.9, 18209.0], [60.0, 18209.0], [60.1, 18295.0], [60.2, 18295.0], [60.3, 18295.0], [60.4, 18295.0], [60.5, 18301.0], [60.6, 18301.0], [60.7, 18301.0], [60.8, 18301.0], [60.9, 18301.0], [61.0, 18305.0], [61.1, 18305.0], [61.2, 18305.0], [61.3, 18305.0], [61.4, 18389.0], [61.5, 18389.0], [61.6, 18389.0], [61.7, 18389.0], [61.8, 18389.0], [61.9, 18470.0], [62.0, 18470.0], [62.1, 18470.0], [62.2, 18470.0], [62.3, 18470.0], [62.4, 18504.0], [62.5, 18504.0], [62.6, 18504.0], [62.7, 18504.0], [62.8, 18524.0], [62.9, 18524.0], [63.0, 18524.0], [63.1, 18524.0], [63.2, 18524.0], [63.3, 18580.0], [63.4, 18580.0], [63.5, 18580.0], [63.6, 18580.0], [63.7, 18580.0], [63.8, 18582.0], [63.9, 18582.0], [64.0, 18582.0], [64.1, 18582.0], [64.2, 18585.0], [64.3, 18585.0], [64.4, 18585.0], [64.5, 18585.0], [64.6, 18585.0], [64.7, 18605.0], [64.8, 18605.0], [64.9, 18605.0], [65.0, 18605.0], [65.1, 18605.0], [65.2, 18661.0], [65.3, 18661.0], [65.4, 18661.0], [65.5, 18661.0], [65.6, 18707.0], [65.7, 18707.0], [65.8, 18707.0], [65.9, 18707.0], [66.0, 18707.0], [66.1, 18711.0], [66.2, 18711.0], [66.3, 18711.0], [66.4, 18711.0], [66.5, 18711.0], [66.6, 18735.0], [66.7, 18735.0], [66.8, 18735.0], [66.9, 18735.0], [67.0, 18753.0], [67.1, 18753.0], [67.2, 18753.0], [67.3, 18753.0], [67.4, 18753.0], [67.5, 18769.0], [67.6, 18769.0], [67.7, 18769.0], [67.8, 18769.0], [67.9, 18769.0], [68.0, 18824.0], [68.1, 18824.0], [68.2, 18824.0], [68.3, 18824.0], [68.4, 18839.0], [68.5, 18839.0], [68.6, 18839.0], [68.7, 18839.0], [68.8, 18839.0], [68.9, 18845.0], [69.0, 18845.0], [69.1, 18845.0], [69.2, 18845.0], [69.3, 18845.0], [69.4, 18856.0], [69.5, 18856.0], [69.6, 18856.0], [69.7, 18856.0], [69.8, 18861.0], [69.9, 18861.0], [70.0, 18861.0], [70.1, 18861.0], [70.2, 18861.0], [70.3, 18928.0], [70.4, 18928.0], [70.5, 18928.0], [70.6, 18928.0], [70.7, 18944.0], [70.8, 18944.0], [70.9, 18944.0], [71.0, 18944.0], [71.1, 18944.0], [71.2, 18953.0], [71.3, 18953.0], [71.4, 18953.0], [71.5, 18953.0], [71.6, 18953.0], [71.7, 18971.0], [71.8, 18971.0], [71.9, 18971.0], [72.0, 18971.0], [72.1, 19003.0], [72.2, 19003.0], [72.3, 19003.0], [72.4, 19003.0], [72.5, 19003.0], [72.6, 19004.0], [72.7, 19004.0], [72.8, 19004.0], [72.9, 19004.0], [73.0, 19004.0], [73.1, 19044.0], [73.2, 19044.0], [73.3, 19044.0], [73.4, 19044.0], [73.5, 19073.0], [73.6, 19073.0], [73.7, 19073.0], [73.8, 19073.0], [73.9, 19073.0], [74.0, 19075.0], [74.1, 19075.0], [74.2, 19075.0], [74.3, 19075.0], [74.4, 19075.0], [74.5, 19118.0], [74.6, 19118.0], [74.7, 19118.0], [74.8, 19118.0], [74.9, 19205.0], [75.0, 19205.0], [75.1, 19205.0], [75.2, 19205.0], [75.3, 19205.0], [75.4, 19212.0], [75.5, 19212.0], [75.6, 19212.0], [75.7, 19212.0], [75.8, 19212.0], [75.9, 19311.0], [76.0, 19311.0], [76.1, 19311.0], [76.2, 19311.0], [76.3, 19311.0], [76.4, 19311.0], [76.5, 19311.0], [76.6, 19311.0], [76.7, 19311.0], [76.8, 19312.0], [76.9, 19312.0], [77.0, 19312.0], [77.1, 19312.0], [77.2, 19312.0], [77.3, 19336.0], [77.4, 19336.0], [77.5, 19336.0], [77.6, 19336.0], [77.7, 19359.0], [77.8, 19359.0], [77.9, 19359.0], [78.0, 19359.0], [78.1, 19359.0], [78.2, 19381.0], [78.3, 19381.0], [78.4, 19381.0], [78.5, 19381.0], [78.6, 19381.0], [78.7, 19382.0], [78.8, 19382.0], [78.9, 19382.0], [79.0, 19382.0], [79.1, 19432.0], [79.2, 19432.0], [79.3, 19432.0], [79.4, 19432.0], [79.5, 19432.0], [79.6, 19487.0], [79.7, 19487.0], [79.8, 19487.0], [79.9, 19487.0], [80.0, 19526.0], [80.1, 19526.0], [80.2, 19526.0], [80.3, 19526.0], [80.4, 19526.0], [80.5, 19561.0], [80.6, 19561.0], [80.7, 19561.0], [80.8, 19561.0], [80.9, 19561.0], [81.0, 19577.0], [81.1, 19577.0], [81.2, 19577.0], [81.3, 19577.0], [81.4, 19706.0], [81.5, 19706.0], [81.6, 19706.0], [81.7, 19706.0], [81.8, 19706.0], [81.9, 19710.0], [82.0, 19710.0], [82.1, 19710.0], [82.2, 19710.0], [82.3, 19710.0], [82.4, 19742.0], [82.5, 19742.0], [82.6, 19742.0], [82.7, 19742.0], [82.8, 19752.0], [82.9, 19752.0], [83.0, 19752.0], [83.1, 19752.0], [83.2, 19752.0], [83.3, 19756.0], [83.4, 19756.0], [83.5, 19756.0], [83.6, 19756.0], [83.7, 19756.0], [83.8, 19785.0], [83.9, 19785.0], [84.0, 19785.0], [84.1, 19785.0], [84.2, 19798.0], [84.3, 19798.0], [84.4, 19798.0], [84.5, 19798.0], [84.6, 19798.0], [84.7, 19813.0], [84.8, 19813.0], [84.9, 19813.0], [85.0, 19813.0], [85.1, 19813.0], [85.2, 19828.0], [85.3, 19828.0], [85.4, 19828.0], [85.5, 19828.0], [85.6, 19830.0], [85.7, 19830.0], [85.8, 19830.0], [85.9, 19830.0], [86.0, 19830.0], [86.1, 19848.0], [86.2, 19848.0], [86.3, 19848.0], [86.4, 19848.0], [86.5, 19848.0], [86.6, 19867.0], [86.7, 19867.0], [86.8, 19867.0], [86.9, 19867.0], [87.0, 19909.0], [87.1, 19909.0], [87.2, 19909.0], [87.3, 19909.0], [87.4, 19909.0], [87.5, 19929.0], [87.6, 19929.0], [87.7, 19929.0], [87.8, 19929.0], [87.9, 19929.0], [88.0, 19960.0], [88.1, 19960.0], [88.2, 19960.0], [88.3, 19960.0], [88.4, 19965.0], [88.5, 19965.0], [88.6, 19965.0], [88.7, 19965.0], [88.8, 19965.0], [88.9, 19977.0], [89.0, 19977.0], [89.1, 19977.0], [89.2, 19977.0], [89.3, 19977.0], [89.4, 19981.0], [89.5, 19981.0], [89.6, 19981.0], [89.7, 19981.0], [89.8, 20036.0], [89.9, 20036.0], [90.0, 20036.0], [90.1, 20036.0], [90.2, 20036.0], [90.3, 20045.0], [90.4, 20045.0], [90.5, 20045.0], [90.6, 20045.0], [90.7, 20067.0], [90.8, 20067.0], [90.9, 20067.0], [91.0, 20067.0], [91.1, 20067.0], [91.2, 20083.0], [91.3, 20083.0], [91.4, 20083.0], [91.5, 20083.0], [91.6, 20083.0], [91.7, 20099.0], [91.8, 20099.0], [91.9, 20099.0], [92.0, 20099.0], [92.1, 20116.0], [92.2, 20116.0], [92.3, 20116.0], [92.4, 20116.0], [92.5, 20116.0], [92.6, 20123.0], [92.7, 20123.0], [92.8, 20123.0], [92.9, 20123.0], [93.0, 20123.0], [93.1, 20215.0], [93.2, 20215.0], [93.3, 20215.0], [93.4, 20215.0], [93.5, 20313.0], [93.6, 20313.0], [93.7, 20313.0], [93.8, 20313.0], [93.9, 20313.0], [94.0, 20349.0], [94.1, 20349.0], [94.2, 20349.0], [94.3, 20349.0], [94.4, 20349.0], [94.5, 20358.0], [94.6, 20358.0], [94.7, 20358.0], [94.8, 20358.0], [94.9, 20376.0], [95.0, 20376.0], [95.1, 20376.0], [95.2, 20376.0], [95.3, 20376.0], [95.4, 20382.0], [95.5, 20382.0], [95.6, 20382.0], [95.7, 20382.0], [95.8, 20382.0], [95.9, 20390.0], [96.0, 20390.0], [96.1, 20390.0], [96.2, 20390.0], [96.3, 20390.0], [96.4, 20390.0], [96.5, 20390.0], [96.6, 20390.0], [96.7, 20390.0], [96.8, 20422.0], [96.9, 20422.0], [97.0, 20422.0], [97.1, 20422.0], [97.2, 20422.0], [97.3, 20456.0], [97.4, 20456.0], [97.5, 20456.0], [97.6, 20456.0], [97.7, 20552.0], [97.8, 20552.0], [97.9, 20552.0], [98.0, 20552.0], [98.1, 20552.0], [98.2, 20866.0], [98.3, 20866.0], [98.4, 20866.0], [98.5, 20866.0], [98.6, 20866.0], [98.7, 20909.0], [98.8, 20909.0], [98.9, 20909.0], [99.0, 20909.0], [99.1, 21449.0], [99.2, 21449.0], [99.3, 21449.0], [99.4, 21449.0], [99.5, 21449.0], [99.6, 21608.0], [99.7, 21608.0], [99.8, 21608.0], [99.9, 21608.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 30.0, "series": [{"data": [[600.0, 10.0], [700.0, 10.0], [800.0, 13.0], [900.0, 9.0], [1000.0, 3.0], [1100.0, 1.0], [1200.0, 2.0], [1500.0, 2.0], [1700.0, 2.0], [1800.0, 3.0], [1900.0, 1.0], [2000.0, 3.0], [2100.0, 3.0], [2200.0, 3.0], [2300.0, 1.0], [2400.0, 1.0], [2600.0, 1.0], [2700.0, 1.0], [2900.0, 1.0], [3100.0, 1.0], [3300.0, 2.0], [3700.0, 1.0], [4900.0, 3.0], [5100.0, 1.0], [5300.0, 1.0], [5200.0, 2.0], [5500.0, 1.0], [5600.0, 1.0], [5700.0, 1.0], [6000.0, 1.0], [6300.0, 1.0], [6200.0, 1.0], [6400.0, 1.0], [7100.0, 1.0], [7400.0, 1.0], [7900.0, 1.0], [8000.0, 1.0], [8700.0, 1.0], [8500.0, 1.0], [9100.0, 2.0], [9300.0, 2.0], [9400.0, 2.0], [9500.0, 1.0], [10200.0, 2.0], [10100.0, 1.0], [10300.0, 1.0], [10800.0, 7.0], [11100.0, 2.0], [11000.0, 3.0], [100.0, 6.0], [200.0, 30.0], [300.0, 25.0], [400.0, 24.0], [500.0, 13.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[200.0, 3.0], [300.0, 21.0], [400.0, 6.0], [500.0, 9.0], [600.0, 2.0], [700.0, 3.0], [1000.0, 2.0], [1100.0, 3.0], [1200.0, 1.0], [1300.0, 2.0], [1400.0, 1.0], [1500.0, 1.0], [2000.0, 1.0], [2100.0, 1.0], [2200.0, 1.0], [2400.0, 1.0], [2500.0, 1.0], [3000.0, 1.0], [3700.0, 1.0], [3900.0, 1.0], [4300.0, 2.0], [4200.0, 2.0], [4500.0, 1.0], [4400.0, 1.0], [4600.0, 1.0], [4700.0, 1.0], [4900.0, 1.0], [5500.0, 1.0], [5700.0, 1.0], [5800.0, 1.0], [6200.0, 1.0], [7000.0, 1.0], [7400.0, 1.0], [7700.0, 1.0], [8500.0, 1.0], [9000.0, 1.0], [9200.0, 1.0], [9400.0, 1.0], [10200.0, 1.0], [10400.0, 1.0], [10700.0, 1.0], [10900.0, 1.0], [10800.0, 1.0], [11200.0, 1.0], [11300.0, 1.0], [12100.0, 2.0], [12400.0, 1.0], [12600.0, 1.0], [13300.0, 1.0], [13800.0, 1.0], [13700.0, 1.0], [13500.0, 1.0], [14000.0, 1.0], [14200.0, 1.0], [14500.0, 2.0], [15100.0, 1.0], [15600.0, 1.0], [15700.0, 1.0], [16100.0, 1.0], [15900.0, 1.0], [16600.0, 1.0], [17000.0, 1.0], [17100.0, 1.0], [17300.0, 1.0], [17400.0, 1.0], [17900.0, 4.0], [18100.0, 3.0], [17800.0, 3.0], [17500.0, 2.0], [18300.0, 3.0], [18000.0, 3.0], [18400.0, 1.0], [18200.0, 3.0], [17700.0, 1.0], [18500.0, 5.0], [18800.0, 5.0], [18700.0, 5.0], [19100.0, 1.0], [18900.0, 4.0], [19300.0, 7.0], [19400.0, 2.0], [19000.0, 5.0], [19200.0, 2.0], [18600.0, 2.0], [20300.0, 7.0], [20000.0, 5.0], [19900.0, 6.0], [19700.0, 7.0], [20200.0, 1.0], [19500.0, 3.0], [20400.0, 2.0], [19800.0, 5.0], [20100.0, 2.0], [20900.0, 1.0], [20800.0, 1.0], [21400.0, 1.0], [20500.0, 1.0], [21600.0, 1.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 83.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 231.0, "series": [{"data": [[0.0, 116.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 83.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 231.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.6540069605E12, "maxY": 2.0, "series": [{"data": [[1.654006977E12, 1.5294117647058822], [1.6540069995E12, 1.5], [1.6540070055E12, 1.5789473684210522], [1.65400698E12, 1.7333333333333334], [1.6540070025E12, 1.4166666666666665], [1.6540069605E12, 2.0], [1.654006983E12, 1.611111111111111], [1.6540069635E12, 1.5], [1.654006986E12, 1.8749999999999998], [1.6540069665E12, 1.5], [1.654006989E12, 1.7777777777777777], [1.6540069695E12, 1.5555555555555556], [1.654006992E12, 1.5714285714285716], [1.6540069725E12, 1.5], [1.6540070115E12, 1.0], [1.654006995E12, 1.0], [1.6540069755E12, 1.6666666666666667], [1.6540070085E12, 1.0], [1.654006998E12, 1.5833333333333335], [1.654007007E12, 1.0], [1.6540069785E12, 1.7272727272727275], [1.654007001E12, 1.5555555555555556], [1.6540069815E12, 1.857142857142857], [1.654007004E12, 1.5454545454545456], [1.654006962E12, 1.4], [1.6540069845E12, 1.6923076923076925], [1.654006965E12, 1.5], [1.6540069875E12, 1.833333333333333], [1.654006968E12, 1.5], [1.6540069905E12, 1.8333333333333333], [1.654006971E12, 1.5], [1.654007013E12, 1.0], [1.6540069935E12, 1.7272727272727273], [1.654006974E12, 1.5], [1.65400701E12, 1.0], [1.6540069965E12, 1.6363636363636365]], "isOverall": false, "label": "parallel bzm - Parallel", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654007013E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 213.08333333333337, "minX": 1.0, "maxY": 21449.0, "series": [{"data": [[2.0, 375.8888888888889], [3.0, 318.27272727272725], [4.0, 494.5], [5.0, 500.5], [6.0, 366.6666666666667], [7.0, 352.0], [8.0, 348.25], [9.0, 351.3333333333333], [13.0, 961.0], [14.0, 759.8], [15.0, 455.6666666666667], [16.0, 386.5], [17.0, 384.5], [18.0, 382.0], [19.0, 393.0], [20.0, 397.0], [23.0, 607.0], [24.0, 601.0], [25.0, 545.0], [26.0, 458.0], [27.0, 475.0], [28.0, 462.5], [29.0, 468.0], [30.0, 480.0], [31.0, 452.0], [32.0, 519.0], [33.0, 613.0], [34.0, 505.5], [35.0, 466.0], [36.0, 479.5], [37.0, 466.5], [38.0, 477.0], [40.0, 519.0], [43.0, 886.0], [44.0, 858.0], [45.0, 846.0], [46.0, 942.0], [47.0, 849.0], [48.0, 811.0], [49.0, 836.3333333333334], [51.0, 708.5], [50.0, 778.0], [52.0, 834.0], [53.0, 720.0], [54.0, 695.0], [55.0, 680.0], [58.0, 887.0], [59.0, 875.0], [60.0, 822.0], [61.0, 821.0], [62.0, 843.0], [63.0, 707.0], [64.0, 809.0], [67.0, 753.25], [69.0, 661.0], [71.0, 904.0], [74.0, 1046.0], [76.0, 1188.5], [78.0, 1221.0], [82.0, 1554.0], [83.0, 1527.0], [88.0, 1808.0], [89.0, 2095.25], [90.0, 7914.166666666667], [91.0, 6297.5], [95.0, 1994.0], [94.0, 10838.0], [93.0, 10258.0], [92.0, 10882.75], [97.0, 7463.625], [98.0, 2101.0], [96.0, 2003.0], [101.0, 2301.0], [103.0, 9428.0], [102.0, 9366.0], [100.0, 9543.5], [106.0, 3995.4], [107.0, 8887.5], [104.0, 9368.0], [111.0, 7335.5], [109.0, 7987.0], [108.0, 8799.0], [114.0, 4846.333333333334], [115.0, 3384.0], [113.0, 6293.0], [119.0, 5103.0], [118.0, 5674.5], [117.0, 5617.0], [122.0, 5199.0], [121.0, 4915.0], [1.0, 213.08333333333337]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[49.91162790697674, 2326.1302325581396]], "isOverall": false, "label": "/api/statistics/neighbourhoods-Aggregated", "isController": false}, {"data": [[2.0, 1813.3846153846155], [3.0, 1694.6666666666667], [4.0, 6537.0], [5.0, 9528.5], [6.0, 17590.0], [7.0, 4475.8], [8.0, 5310.25], [9.0, 6872.666666666667], [10.0, 17338.0], [11.0, 18209.0], [12.0, 18301.0], [13.0, 10274.0], [14.0, 18711.0], [15.0, 7680.333333333333], [16.0, 18470.0], [17.0, 10578.0], [18.0, 10244.0], [19.0, 18023.0], [20.0, 18580.0], [21.0, 10806.0], [22.0, 18856.0], [23.0, 18605.0], [24.0, 19073.0], [25.0, 18861.0], [26.0, 11182.5], [27.0, 18753.0], [28.0, 18928.0], [29.0, 11415.5], [30.0, 19205.0], [31.0, 19075.0], [32.0, 9162.333333333332], [33.0, 9316.666666666668], [34.0, 9517.0], [35.0, 11972.5], [37.0, 12311.5], [36.0, 19004.0], [38.0, 12330.5], [39.0, 19312.0], [41.0, 19044.0], [40.0, 18953.0], [43.0, 17934.0], [42.0, 19526.0], [44.0, 12430.0], [45.0, 19381.0], [46.0, 12849.0], [47.0, 12617.0], [49.0, 19487.0], [48.0, 19710.0], [51.0, 15159.666666666666], [53.0, 19756.0], [52.0, 19848.0], [55.0, 19828.0], [54.0, 20116.0], [57.0, 19981.0], [56.0, 19785.0], [59.0, 20552.0], [58.0, 20456.0], [60.0, 13513.5], [61.0, 21449.0], [63.0, 18707.0], [62.0, 19929.0], [64.0, 13750.5], [67.0, 14678.5], [66.0, 20358.0], [65.0, 20349.0], [71.0, 20390.0], [70.0, 19003.0], [69.0, 20123.0], [68.0, 20376.0], [75.0, 12350.666666666666], [74.0, 19813.0], [73.0, 18944.0], [72.0, 20313.0], [79.0, 19561.0], [78.0, 20866.0], [77.0, 20083.0], [76.0, 19909.0], [83.0, 20382.0], [82.0, 19577.0], [81.0, 20422.0], [80.0, 20045.0], [84.0, 12813.0], [87.0, 20215.0], [86.0, 20909.0], [85.0, 20067.0], [91.0, 20390.0], [90.0, 19752.0], [89.0, 14270.0], [88.0, 19382.0], [95.0, 18971.0], [94.0, 20099.0], [93.0, 19960.0], [92.0, 15924.0], [98.0, 14194.0], [97.0, 13362.0], [99.0, 18839.0], [96.0, 19118.0], [101.0, 13525.333333333334], [100.0, 14561.5], [103.0, 18305.0], [102.0, 18065.0], [107.0, 14632.0], [106.0, 17975.0], [105.0, 18144.0], [104.0, 17580.0], [111.0, 16646.0], [110.0, 17096.0], [109.0, 17113.0], [108.0, 18169.0], [115.0, 15616.0], [114.0, 15127.0], [113.0, 15714.0], [112.0, 16184.0], [116.0, 12241.0], [119.0, 13516.0], [118.0, 14548.0], [117.0, 14512.0], [122.0, 14085.0], [121.0, 13863.0], [120.0, 13787.0], [124.0, 13011.5], [1.0, 1360.4705882352941]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}, {"data": [[46.55348837209301, 11994.91627906977]], "isOverall": false, "label": "/api/listings?geojson=true-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 124.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 98.66666666666667, "minX": 1.6540069605E12, "maxY": 1.0005008E7, "series": [{"data": [[1.654006977E12, 3339124.6666666665], [1.6540069995E12, 834666.6666666666], [1.6540070055E12, 3340040.6666666665], [1.65400698E12, 1672539.3333333333], [1.6540070025E12, 2920417.3333333335], [1.6540069605E12, 458.0], [1.654006983E12, 2923165.3333333335], [1.6540069635E12, 834666.6666666666], [1.654006986E12, 840162.6666666666], [1.6540069665E12, 1669333.3333333333], [1.654006989E12, 836956.6666666666], [1.6540069695E12, 1669791.3333333333], [1.654006992E12, 2504916.0], [1.6540069725E12, 2504000.0], [1.6540070115E12, 1.0005008E7], [1.654006995E12, 833750.6666666666], [1.6540069755E12, 1671165.3333333333], [1.6540070085E12, 7086880.666666667], [1.654006998E12, 2087582.6666666667], [1.654007007E12, 6253130.0], [1.6540069785E12, 1254290.0], [1.654007001E12, 1669791.3333333333], [1.6540069815E12, 839246.6666666666], [1.654007004E12, 2087124.6666666667], [1.654006962E12, 1251542.0], [1.6540069845E12, 1671623.3333333333], [1.654006965E12, 1252000.0], [1.6540069875E12, 1257496.0], [1.654006968E12, 2086666.6666666667], [1.6540069905E12, 838330.6666666666], [1.654006971E12, 2504000.0], [1.654007013E12, 5002504.0], [1.6540069935E12, 1254290.0], [1.654006974E12, 3338666.6666666665], [1.65400701E12, 7920631.333333333], [1.6540069965E12, 1670707.3333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.654006977E12, 1656.0], [1.6540069995E12, 389.3333333333333], [1.6540070055E12, 1853.3333333333333], [1.65400698E12, 1469.3333333333333], [1.6540070025E12, 1165.3333333333333], [1.6540069605E12, 98.66666666666667], [1.654006983E12, 1757.3333333333333], [1.6540069635E12, 389.3333333333333], [1.654006986E12, 1573.3333333333333], [1.6540069665E12, 778.6666666666666], [1.654006989E12, 882.6666666666666], [1.6540069695E12, 877.3333333333334], [1.654006992E12, 1365.3333333333333], [1.6540069725E12, 1168.0], [1.6540070115E12, 2304.0], [1.654006995E12, 192.0], [1.6540069755E12, 1173.3333333333333], [1.6540070085E12, 1632.0], [1.654006998E12, 1170.6666666666667], [1.654007007E12, 1440.0], [1.6540069785E12, 1077.3333333333333], [1.654007001E12, 877.3333333333334], [1.6540069815E12, 1376.0], [1.654007004E12, 1072.0], [1.654006962E12, 485.3333333333333], [1.6540069845E12, 1272.0], [1.654006965E12, 584.0], [1.6540069875E12, 1768.0], [1.654006968E12, 973.3333333333334], [1.6540069905E12, 1178.6666666666667], [1.654006971E12, 1168.0], [1.654007013E12, 1152.0], [1.6540069935E12, 1077.3333333333333], [1.654006974E12, 1557.3333333333333], [1.65400701E12, 1824.0], [1.6540069965E12, 1074.6666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654007013E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 198.5, "minX": 1.6540069605E12, "maxY": 20199.529411764703, "series": [{"data": [[1.654006977E12, 346.3333333333333], [1.6540069995E12, 7335.5], [1.6540070055E12, 10853.81818181818], [1.65400698E12, 426.09090909090907], [1.6540070025E12, 9386.2], [1.6540069605E12, 995.0], [1.654006983E12, 536.8181818181819], [1.6540069635E12, 198.5], [1.654006986E12, 791.7142857142857], [1.6540069665E12, 205.75], [1.654006989E12, 1036.4285714285716], [1.6540069695E12, 212.0], [1.654006992E12, 2141.25], [1.6540069725E12, 330.5], [1.6540069755E12, 419.75], [1.654006998E12, 6010.285714285715], [1.6540069785E12, 657.0], [1.654007001E12, 8509.6], [1.6540069815E12, 499.5], [1.654007004E12, 10461.833333333332], [1.654006962E12, 235.5], [1.6540069845E12, 608.6666666666667], [1.654006965E12, 200.0], [1.6540069875E12, 806.9333333333334], [1.654006968E12, 263.6], [1.6540069905E12, 1858.5], [1.654006971E12, 240.5], [1.6540069935E12, 3056.5], [1.654006974E12, 290.125], [1.6540069965E12, 5131.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.654006977E12, 1194.125], [1.6540069995E12, 15949.0], [1.6540070055E12, 18593.5], [1.65400698E12, 2573.75], [1.6540070025E12, 18069.142857142855], [1.654006983E12, 4406.285714285715], [1.6540069635E12, 309.5], [1.654006986E12, 6075.5], [1.6540069665E12, 308.0], [1.654006989E12, 8810.0], [1.6540069695E12, 309.25], [1.654006992E12, 10730.166666666666], [1.6540069725E12, 570.3333333333334], [1.6540070115E12, 18794.0], [1.654006995E12, 13011.5], [1.6540069755E12, 591.25], [1.6540070085E12, 20199.529411764703], [1.654006998E12, 14381.8], [1.654007007E12, 20001.533333333333], [1.6540069785E12, 1879.3333333333333], [1.654007001E12, 17256.0], [1.6540069815E12, 3845.0], [1.654007004E12, 18645.0], [1.654006962E12, 863.3333333333333], [1.6540069845E12, 5257.5], [1.654006965E12, 311.3333333333333], [1.6540069875E12, 7421.333333333333], [1.654006968E12, 361.0], [1.6540069905E12, 9320.5], [1.654006971E12, 396.0], [1.654007013E12, 17903.583333333332], [1.6540069935E12, 11996.666666666666], [1.654006974E12, 510.62499999999994], [1.65400701E12, 19487.842105263157], [1.6540069965E12, 13812.75]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654007013E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 198.5, "minX": 1.6540069605E12, "maxY": 20197.705882352937, "series": [{"data": [[1.654006977E12, 346.3333333333333], [1.6540069995E12, 7335.5], [1.6540070055E12, 10853.727272727272], [1.65400698E12, 426.0], [1.6540070025E12, 9386.2], [1.6540069605E12, 992.0], [1.654006983E12, 536.6363636363636], [1.6540069635E12, 198.5], [1.654006986E12, 791.6428571428572], [1.6540069665E12, 205.75], [1.654006989E12, 1036.4285714285716], [1.6540069695E12, 212.0], [1.654006992E12, 2141.125], [1.6540069725E12, 330.33333333333337], [1.6540069755E12, 419.625], [1.654006998E12, 6010.285714285715], [1.6540069785E12, 657.0], [1.654007001E12, 8509.6], [1.6540069815E12, 499.5], [1.654007004E12, 10461.5], [1.654006962E12, 235.5], [1.6540069845E12, 608.5555555555555], [1.654006965E12, 200.0], [1.6540069875E12, 806.9333333333334], [1.654006968E12, 263.6], [1.6540069905E12, 1858.3000000000002], [1.654006971E12, 240.33333333333331], [1.6540069935E12, 3056.5], [1.654006974E12, 290.125], [1.6540069965E12, 5131.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.654006977E12, 1192.375], [1.6540069995E12, 15947.0], [1.6540070055E12, 18591.75], [1.65400698E12, 2570.75], [1.6540070025E12, 18067.714285714286], [1.654006983E12, 4404.571428571428], [1.6540069635E12, 301.5], [1.654006986E12, 6074.0], [1.6540069665E12, 306.25], [1.654006989E12, 8809.0], [1.6540069695E12, 306.75], [1.654006992E12, 10721.666666666666], [1.6540069725E12, 568.0], [1.6540070115E12, 18792.166666666664], [1.654006995E12, 12993.5], [1.6540069755E12, 588.75], [1.6540070085E12, 20197.705882352937], [1.654006998E12, 14366.8], [1.654007007E12, 19999.86666666667], [1.6540069785E12, 1877.0], [1.654007001E12, 17252.75], [1.6540069815E12, 3843.5], [1.654007004E12, 18643.6], [1.654006962E12, 850.3333333333333], [1.6540069845E12, 5255.5], [1.654006965E12, 302.6666666666667], [1.6540069875E12, 7419.666666666667], [1.654006968E12, 358.8], [1.6540069905E12, 9319.0], [1.654006971E12, 394.0], [1.654007013E12, 17901.583333333336], [1.6540069935E12, 11902.333333333334], [1.654006974E12, 508.5], [1.65400701E12, 19485.578947368424], [1.6540069965E12, 13807.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654007013E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.6540069605E12, "maxY": 687.2727272727273, "series": [{"data": [[1.654006977E12, 10.11111111111111], [1.6540069995E12, 252.5], [1.6540070055E12, 687.2727272727273], [1.65400698E12, 11.90909090909091], [1.6540070025E12, 315.2], [1.6540069605E12, 42.0], [1.654006983E12, 20.181818181818183], [1.6540069635E12, 7.5], [1.654006986E12, 49.92857142857142], [1.6540069665E12, 7.0], [1.654006989E12, 11.142857142857144], [1.6540069695E12, 7.4], [1.654006992E12, 15.0], [1.6540069725E12, 9.666666666666666], [1.6540069755E12, 24.874999999999996], [1.654006998E12, 129.42857142857144], [1.6540069785E12, 66.75], [1.654007001E12, 372.6], [1.6540069815E12, 12.583333333333334], [1.654007004E12, 445.5], [1.654006962E12, 9.5], [1.6540069845E12, 9.555555555555555], [1.654006965E12, 7.333333333333333], [1.6540069875E12, 16.73333333333333], [1.654006968E12, 7.6], [1.6540069905E12, 31.8], [1.654006971E12, 9.166666666666668], [1.6540069935E12, 266.99999999999994], [1.654006974E12, 9.75], [1.6540069965E12, 220.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.654006977E12, 24.75], [1.6540069995E12, 9.5], [1.6540070055E12, 24.25], [1.65400698E12, 10.25], [1.6540070025E12, 58.857142857142854], [1.654006983E12, 75.85714285714286], [1.6540069635E12, 8.0], [1.654006986E12, 12.0], [1.6540069665E12, 7.0], [1.654006989E12, 11.5], [1.6540069695E12, 7.5], [1.654006992E12, 14.833333333333332], [1.6540069725E12, 9.333333333333332], [1.6540070115E12, 331.37499999999994], [1.654006995E12, 9.5], [1.6540069755E12, 10.5], [1.6540070085E12, 23.0], [1.654006998E12, 10.0], [1.654007007E12, 11.200000000000001], [1.6540069785E12, 10.0], [1.654007001E12, 9.5], [1.6540069815E12, 10.0], [1.654007004E12, 49.60000000000001], [1.654006962E12, 20.333333333333332], [1.6540069845E12, 11.25], [1.654006965E12, 7.333333333333333], [1.6540069875E12, 11.0], [1.654006968E12, 7.8], [1.6540069905E12, 10.5], [1.654006971E12, 8.666666666666666], [1.654007013E12, 641.4166666666667], [1.6540069935E12, 10.0], [1.654006974E12, 9.875], [1.65400701E12, 167.73684210526318], [1.6540069965E12, 38.25]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654007013E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 192.0, "minX": 1.6540069605E12, "maxY": 21608.0, "series": [{"data": [[1.654006977E12, 1377.0], [1.6540069995E12, 16184.0], [1.6540070055E12, 20390.0], [1.65400698E12, 3030.0], [1.6540070025E12, 18524.0], [1.6540069605E12, 995.0], [1.654006983E12, 4634.0], [1.6540069635E12, 312.0], [1.654006986E12, 6253.0], [1.6540069665E12, 315.0], [1.654006989E12, 9022.0], [1.6540069695E12, 326.0], [1.654006992E12, 11222.0], [1.6540069725E12, 714.0], [1.6540070115E12, 19742.0], [1.654006995E12, 13325.0], [1.6540069755E12, 762.0], [1.6540070085E12, 21608.0], [1.654006998E12, 15616.0], [1.654007007E12, 20909.0], [1.6540069785E12, 2189.0], [1.654007001E12, 18169.0], [1.6540069815E12, 3986.0], [1.654007004E12, 19118.0], [1.654006962E12, 1552.0], [1.6540069845E12, 5733.0], [1.654006965E12, 315.0], [1.6540069875E12, 7749.0], [1.654006968E12, 557.0], [1.6540069905E12, 9437.0], [1.654006971E12, 414.0], [1.654007013E12, 18301.0], [1.6540069935E12, 12434.0], [1.654006974E12, 551.0], [1.65400701E12, 20116.0], [1.6540069965E12, 14085.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.654006977E12, 1336.2], [1.6540069995E12, 16184.0], [1.6540070055E12, 20099.0], [1.65400698E12, 2758.2000000000003], [1.6540070025E12, 18458.3], [1.6540069605E12, 995.0], [1.654006983E12, 4514.3], [1.6540069635E12, 312.0], [1.654006986E12, 6004.5], [1.6540069665E12, 315.0], [1.654006989E12, 9022.0], [1.6540069695E12, 326.0], [1.654006992E12, 11066.0], [1.6540069725E12, 686.1000000000001], [1.6540070115E12, 19261.5], [1.654006995E12, 13325.0], [1.6540069755E12, 741.0000000000001], [1.6540070085E12, 21480.8], [1.654006998E12, 15469.300000000001], [1.654007007E12, 20883.2], [1.6540069785E12, 2160.0], [1.654007001E12, 18169.0], [1.6540069815E12, 3845.0], [1.654007004E12, 19062.2], [1.654006962E12, 1552.0], [1.6540069845E12, 5659.4], [1.654006965E12, 315.0], [1.6540069875E12, 7493.400000000001], [1.654006968E12, 545.6], [1.6540069905E12, 9367.1], [1.654006971E12, 409.5], [1.654007013E12, 18299.2], [1.6540069935E12, 12383.8], [1.654006974E12, 534.2], [1.65400701E12, 19965.0], [1.6540069965E12, 14040.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.654006977E12, 1377.0], [1.6540069995E12, 16184.0], [1.6540070055E12, 20390.0], [1.65400698E12, 3030.0], [1.6540070025E12, 18524.0], [1.6540069605E12, 995.0], [1.654006983E12, 4634.0], [1.6540069635E12, 312.0], [1.654006986E12, 6253.0], [1.6540069665E12, 315.0], [1.654006989E12, 9022.0], [1.6540069695E12, 326.0], [1.654006992E12, 11222.0], [1.6540069725E12, 714.0], [1.6540070115E12, 19742.0], [1.654006995E12, 13325.0], [1.6540069755E12, 762.0], [1.6540070085E12, 21608.0], [1.654006998E12, 15616.0], [1.654007007E12, 20909.0], [1.6540069785E12, 2189.0], [1.654007001E12, 18169.0], [1.6540069815E12, 3986.0], [1.654007004E12, 19118.0], [1.654006962E12, 1552.0], [1.6540069845E12, 5733.0], [1.654006965E12, 315.0], [1.6540069875E12, 7749.0], [1.654006968E12, 557.0], [1.6540069905E12, 9437.0], [1.654006971E12, 414.0], [1.654007013E12, 18301.0], [1.6540069935E12, 12434.0], [1.654006974E12, 551.0], [1.65400701E12, 20116.0], [1.6540069965E12, 14085.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.654006977E12, 1377.0], [1.6540069995E12, 16184.0], [1.6540070055E12, 20390.0], [1.65400698E12, 3030.0], [1.6540070025E12, 18524.0], [1.6540069605E12, 995.0], [1.654006983E12, 4634.0], [1.6540069635E12, 312.0], [1.654006986E12, 6253.0], [1.6540069665E12, 315.0], [1.654006989E12, 9022.0], [1.6540069695E12, 326.0], [1.654006992E12, 11222.0], [1.6540069725E12, 714.0], [1.6540070115E12, 19634.25], [1.654006995E12, 13325.0], [1.6540069755E12, 762.0], [1.6540070085E12, 21608.0], [1.654006998E12, 15616.0], [1.654007007E12, 20909.0], [1.6540069785E12, 2189.0], [1.654007001E12, 18169.0], [1.6540069815E12, 3986.0], [1.654007004E12, 19118.0], [1.654006962E12, 1552.0], [1.6540069845E12, 5733.0], [1.654006965E12, 315.0], [1.6540069875E12, 7749.0], [1.654006968E12, 557.0], [1.6540069905E12, 9437.0], [1.654006971E12, 414.0], [1.654007013E12, 18301.0], [1.6540069935E12, 12434.0], [1.654006974E12, 551.0], [1.65400701E12, 20116.0], [1.6540069965E12, 14085.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.654006977E12, 324.0], [1.6540069995E12, 7181.0], [1.6540070055E12, 10191.0], [1.65400698E12, 378.0], [1.6540070025E12, 9174.0], [1.6540069605E12, 995.0], [1.654006983E12, 454.0], [1.6540069635E12, 194.0], [1.654006986E12, 629.0], [1.6540069665E12, 192.0], [1.654006989E12, 661.0], [1.6540069695E12, 199.0], [1.654006992E12, 1994.0], [1.6540069725E12, 226.0], [1.6540070115E12, 17911.0], [1.654006995E12, 12698.0], [1.6540069755E12, 291.0], [1.6540070085E12, 18707.0], [1.654006998E12, 5599.0], [1.654007007E12, 18944.0], [1.6540069785E12, 349.0], [1.654007001E12, 7930.0], [1.6540069815E12, 432.0], [1.654007004E12, 9492.0], [1.654006962E12, 204.0], [1.6540069845E12, 458.0], [1.654006965E12, 195.0], [1.6540069875E12, 646.0], [1.654006968E12, 193.0], [1.6540069905E12, 1527.0], [1.654006971E12, 226.0], [1.654007013E12, 17338.0], [1.6540069935E12, 2459.0], [1.654006974E12, 279.0], [1.65400701E12, 17934.0], [1.6540069965E12, 4915.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.654006977E12, 387.0], [1.6540069995E12, 11602.0], [1.6540070055E12, 11156.0], [1.65400698E12, 398.0], [1.6540070025E12, 17735.5], [1.6540069605E12, 995.0], [1.654006983E12, 595.5], [1.6540069635E12, 255.0], [1.654006986E12, 797.0], [1.6540069665E12, 261.5], [1.654006989E12, 1099.0], [1.6540069695E12, 223.0], [1.654006992E12, 2308.0], [1.6540069725E12, 454.0], [1.6540070115E12, 18788.5], [1.654006995E12, 13011.5], [1.6540069755E12, 451.5], [1.6540070085E12, 20313.0], [1.654006998E12, 6369.0], [1.654007007E12, 20045.0], [1.6540069785E12, 930.0], [1.654007001E12, 9176.0], [1.6540069815E12, 480.0], [1.654007004E12, 10883.0], [1.654006962E12, 319.0], [1.6540069845E12, 846.0], [1.654006965E12, 258.0], [1.6540069875E12, 830.5], [1.654006968E12, 296.0], [1.6540069905E12, 1852.5], [1.654006971E12, 318.5], [1.654007013E12, 17907.0], [1.6540069935E12, 3355.0], [1.654006974E12, 386.0], [1.65400701E12, 19526.0], [1.6540069965E12, 5275.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654007013E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 261.5, "minX": 1.0, "maxY": 19526.0, "series": [{"data": [[2.0, 261.5], [8.0, 945.5], [9.0, 7050.0], [10.0, 555.0], [11.0, 589.0], [3.0, 4366.5], [12.0, 4479.5], [13.0, 12480.0], [14.0, 11126.0], [15.0, 19526.0], [1.0, 995.0], [4.0, 308.5], [16.0, 18633.0], [5.0, 16646.0], [6.0, 889.0], [7.0, 1046.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 16.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 257.0, "minX": 1.0, "maxY": 19524.0, "series": [{"data": [[2.0, 257.0], [8.0, 945.5], [9.0, 7049.0], [10.0, 552.0], [11.0, 589.0], [3.0, 4357.0], [12.0, 4477.5], [13.0, 12478.0], [14.0, 11126.0], [15.0, 19524.0], [1.0, 992.0], [4.0, 301.0], [16.0, 18631.5], [5.0, 16644.0], [6.0, 887.5], [7.0, 1046.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 16.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.6540069605E12, "maxY": 20.0, "series": [{"data": [[1.654006977E12, 12.0], [1.6540069785E12, 13.333333333333334], [1.65400698E12, 13.333333333333334], [1.6540069605E12, 2.6666666666666665], [1.6540069815E12, 16.0], [1.654006962E12, 1.3333333333333333], [1.654006983E12, 16.0], [1.6540069845E12, 17.333333333333332], [1.6540069635E12, 4.0], [1.654006986E12, 17.333333333333332], [1.654006965E12, 4.0], [1.6540069665E12, 5.333333333333333], [1.6540069875E12, 20.0], [1.654006968E12, 5.333333333333333], [1.654006989E12, 20.0], [1.6540069905E12, 20.0], [1.6540069695E12, 8.0], [1.654006992E12, 20.0], [1.654006971E12, 8.0], [1.6540069725E12, 9.333333333333334], [1.6540069935E12, 20.0], [1.654006974E12, 9.333333333333334], [1.654006995E12, 12.0], [1.6540069755E12, 12.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654006995E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.6540069605E12, "maxY": 16.0, "series": [{"data": [[1.654006977E12, 11.333333333333334], [1.6540069995E12, 2.6666666666666665], [1.6540070055E12, 12.666666666666666], [1.65400698E12, 10.0], [1.6540070025E12, 8.0], [1.6540069605E12, 0.6666666666666666], [1.654006983E12, 12.0], [1.6540069635E12, 2.6666666666666665], [1.654006986E12, 10.666666666666666], [1.6540069665E12, 5.333333333333333], [1.654006989E12, 6.0], [1.6540069695E12, 6.0], [1.654006992E12, 9.333333333333334], [1.6540069725E12, 8.0], [1.6540070115E12, 16.0], [1.654006995E12, 1.3333333333333333], [1.6540069755E12, 8.0], [1.6540070085E12, 11.333333333333334], [1.654006998E12, 8.0], [1.654007007E12, 10.0], [1.6540069785E12, 7.333333333333333], [1.654007001E12, 6.0], [1.6540069815E12, 9.333333333333334], [1.654007004E12, 7.333333333333333], [1.654006962E12, 3.3333333333333335], [1.6540069845E12, 8.666666666666666], [1.654006965E12, 4.0], [1.6540069875E12, 12.0], [1.654006968E12, 6.666666666666667], [1.6540069905E12, 8.0], [1.654006971E12, 8.0], [1.654007013E12, 8.0], [1.6540069935E12, 7.333333333333333], [1.654006974E12, 10.666666666666666], [1.65400701E12, 12.666666666666666], [1.6540069965E12, 7.333333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654007013E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.6540069605E12, "maxY": 16.0, "series": [{"data": [[1.654006977E12, 6.0], [1.6540069995E12, 1.3333333333333333], [1.6540070055E12, 7.333333333333333], [1.65400698E12, 7.333333333333333], [1.6540070025E12, 3.3333333333333335], [1.6540069605E12, 0.6666666666666666], [1.654006983E12, 7.333333333333333], [1.6540069635E12, 1.3333333333333333], [1.654006986E12, 9.333333333333334], [1.6540069665E12, 2.6666666666666665], [1.654006989E12, 4.666666666666667], [1.6540069695E12, 3.3333333333333335], [1.654006992E12, 5.333333333333333], [1.6540069725E12, 4.0], [1.6540069755E12, 5.333333333333333], [1.654006998E12, 4.666666666666667], [1.6540069785E12, 5.333333333333333], [1.654007001E12, 3.3333333333333335], [1.6540069815E12, 8.0], [1.654007004E12, 4.0], [1.654006962E12, 1.3333333333333333], [1.6540069845E12, 6.0], [1.654006965E12, 2.0], [1.6540069875E12, 10.0], [1.654006968E12, 3.3333333333333335], [1.6540069905E12, 6.666666666666667], [1.654006971E12, 4.0], [1.6540069935E12, 5.333333333333333], [1.654006974E12, 5.333333333333333], [1.6540069965E12, 4.666666666666667]], "isOverall": false, "label": "/api/statistics/neighbourhoods-success", "isController": false}, {"data": [[1.654006977E12, 5.333333333333333], [1.6540069995E12, 1.3333333333333333], [1.6540070055E12, 5.333333333333333], [1.65400698E12, 2.6666666666666665], [1.6540070025E12, 4.666666666666667], [1.654006983E12, 4.666666666666667], [1.6540069635E12, 1.3333333333333333], [1.654006986E12, 1.3333333333333333], [1.6540069665E12, 2.6666666666666665], [1.654006989E12, 1.3333333333333333], [1.6540069695E12, 2.6666666666666665], [1.654006992E12, 4.0], [1.6540069725E12, 4.0], [1.6540070115E12, 16.0], [1.654006995E12, 1.3333333333333333], [1.6540069755E12, 2.6666666666666665], [1.6540070085E12, 11.333333333333334], [1.654006998E12, 3.3333333333333335], [1.654007007E12, 10.0], [1.6540069785E12, 2.0], [1.654007001E12, 2.6666666666666665], [1.6540069815E12, 1.3333333333333333], [1.654007004E12, 3.3333333333333335], [1.654006962E12, 2.0], [1.6540069845E12, 2.6666666666666665], [1.654006965E12, 2.0], [1.6540069875E12, 2.0], [1.654006968E12, 3.3333333333333335], [1.6540069905E12, 1.3333333333333333], [1.654006971E12, 4.0], [1.654007013E12, 8.0], [1.6540069935E12, 2.0], [1.654006974E12, 5.333333333333333], [1.65400701E12, 12.666666666666666], [1.6540069965E12, 2.6666666666666665]], "isOverall": false, "label": "/api/listings?geojson=true-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654007013E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.6540069605E12, "maxY": 16.0, "series": [{"data": [[1.654006977E12, 11.333333333333334], [1.6540069995E12, 2.6666666666666665], [1.6540070055E12, 12.666666666666666], [1.65400698E12, 10.0], [1.6540070025E12, 8.0], [1.6540069605E12, 0.6666666666666666], [1.654006983E12, 12.0], [1.6540069635E12, 2.6666666666666665], [1.654006986E12, 10.666666666666666], [1.6540069665E12, 5.333333333333333], [1.654006989E12, 6.0], [1.6540069695E12, 6.0], [1.654006992E12, 9.333333333333334], [1.6540069725E12, 8.0], [1.6540070115E12, 16.0], [1.654006995E12, 1.3333333333333333], [1.6540069755E12, 8.0], [1.6540070085E12, 11.333333333333334], [1.654006998E12, 8.0], [1.654007007E12, 10.0], [1.6540069785E12, 7.333333333333333], [1.654007001E12, 6.0], [1.6540069815E12, 9.333333333333334], [1.654007004E12, 7.333333333333333], [1.654006962E12, 3.3333333333333335], [1.6540069845E12, 8.666666666666666], [1.654006965E12, 4.0], [1.6540069875E12, 12.0], [1.654006968E12, 6.666666666666667], [1.6540069905E12, 8.0], [1.654006971E12, 8.0], [1.654007013E12, 8.0], [1.6540069935E12, 7.333333333333333], [1.654006974E12, 10.666666666666666], [1.65400701E12, 12.666666666666666], [1.6540069965E12, 7.333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654007013E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

