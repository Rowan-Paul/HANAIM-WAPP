/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 19.0, "minX": 0.0, "maxY": 9351.0, "series": [{"data": [[0.0, 141.0], [0.1, 141.0], [0.2, 144.0], [0.3, 144.0], [0.4, 146.0], [0.5, 146.0], [0.6, 147.0], [0.7, 147.0], [0.8, 147.0], [0.9, 148.0], [1.0, 148.0], [1.1, 148.0], [1.2, 148.0], [1.3, 149.0], [1.4, 149.0], [1.5, 149.0], [1.6, 149.0], [1.7, 150.0], [1.8, 150.0], [1.9, 150.0], [2.0, 151.0], [2.1, 151.0], [2.2, 151.0], [2.3, 151.0], [2.4, 151.0], [2.5, 152.0], [2.6, 152.0], [2.7, 152.0], [2.8, 153.0], [2.9, 153.0], [3.0, 153.0], [3.1, 153.0], [3.2, 153.0], [3.3, 153.0], [3.4, 154.0], [3.5, 154.0], [3.6, 154.0], [3.7, 154.0], [3.8, 154.0], [3.9, 154.0], [4.0, 154.0], [4.1, 155.0], [4.2, 155.0], [4.3, 155.0], [4.4, 155.0], [4.5, 155.0], [4.6, 155.0], [4.7, 155.0], [4.8, 156.0], [4.9, 156.0], [5.0, 156.0], [5.1, 156.0], [5.2, 156.0], [5.3, 156.0], [5.4, 157.0], [5.5, 157.0], [5.6, 157.0], [5.7, 157.0], [5.8, 157.0], [5.9, 157.0], [6.0, 157.0], [6.1, 158.0], [6.2, 158.0], [6.3, 158.0], [6.4, 158.0], [6.5, 158.0], [6.6, 159.0], [6.7, 159.0], [6.8, 159.0], [6.9, 159.0], [7.0, 159.0], [7.1, 159.0], [7.2, 159.0], [7.3, 159.0], [7.4, 160.0], [7.5, 161.0], [7.6, 161.0], [7.7, 161.0], [7.8, 161.0], [7.9, 161.0], [8.0, 161.0], [8.1, 161.0], [8.2, 162.0], [8.3, 162.0], [8.4, 162.0], [8.5, 162.0], [8.6, 162.0], [8.7, 162.0], [8.8, 163.0], [8.9, 163.0], [9.0, 163.0], [9.1, 163.0], [9.2, 163.0], [9.3, 163.0], [9.4, 163.0], [9.5, 163.0], [9.6, 163.0], [9.7, 163.0], [9.8, 163.0], [9.9, 163.0], [10.0, 163.0], [10.1, 163.0], [10.2, 164.0], [10.3, 164.0], [10.4, 164.0], [10.5, 164.0], [10.6, 164.0], [10.7, 164.0], [10.8, 164.0], [10.9, 165.0], [11.0, 165.0], [11.1, 165.0], [11.2, 166.0], [11.3, 166.0], [11.4, 166.0], [11.5, 166.0], [11.6, 166.0], [11.7, 166.0], [11.8, 166.0], [11.9, 167.0], [12.0, 167.0], [12.1, 168.0], [12.2, 168.0], [12.3, 169.0], [12.4, 169.0], [12.5, 169.0], [12.6, 169.0], [12.7, 169.0], [12.8, 169.0], [12.9, 169.0], [13.0, 169.0], [13.1, 170.0], [13.2, 170.0], [13.3, 170.0], [13.4, 170.0], [13.5, 170.0], [13.6, 170.0], [13.7, 170.0], [13.8, 171.0], [13.9, 171.0], [14.0, 171.0], [14.1, 171.0], [14.2, 171.0], [14.3, 171.0], [14.4, 171.0], [14.5, 171.0], [14.6, 171.0], [14.7, 172.0], [14.8, 172.0], [14.9, 172.0], [15.0, 172.0], [15.1, 172.0], [15.2, 172.0], [15.3, 173.0], [15.4, 173.0], [15.5, 173.0], [15.6, 173.0], [15.7, 174.0], [15.8, 174.0], [15.9, 174.0], [16.0, 174.0], [16.1, 174.0], [16.2, 174.0], [16.3, 175.0], [16.4, 175.0], [16.5, 175.0], [16.6, 175.0], [16.7, 175.0], [16.8, 175.0], [16.9, 176.0], [17.0, 176.0], [17.1, 176.0], [17.2, 176.0], [17.3, 177.0], [17.4, 177.0], [17.5, 177.0], [17.6, 178.0], [17.7, 178.0], [17.8, 179.0], [17.9, 179.0], [18.0, 179.0], [18.1, 179.0], [18.2, 179.0], [18.3, 179.0], [18.4, 179.0], [18.5, 180.0], [18.6, 180.0], [18.7, 180.0], [18.8, 181.0], [18.9, 181.0], [19.0, 182.0], [19.1, 182.0], [19.2, 182.0], [19.3, 182.0], [19.4, 183.0], [19.5, 183.0], [19.6, 184.0], [19.7, 184.0], [19.8, 184.0], [19.9, 185.0], [20.0, 186.0], [20.1, 186.0], [20.2, 186.0], [20.3, 187.0], [20.4, 188.0], [20.5, 188.0], [20.6, 188.0], [20.7, 188.0], [20.8, 188.0], [20.9, 188.0], [21.0, 188.0], [21.1, 188.0], [21.2, 189.0], [21.3, 189.0], [21.4, 189.0], [21.5, 189.0], [21.6, 191.0], [21.7, 192.0], [21.8, 192.0], [21.9, 192.0], [22.0, 192.0], [22.1, 194.0], [22.2, 194.0], [22.3, 194.0], [22.4, 195.0], [22.5, 195.0], [22.6, 195.0], [22.7, 196.0], [22.8, 196.0], [22.9, 196.0], [23.0, 197.0], [23.1, 198.0], [23.2, 199.0], [23.3, 199.0], [23.4, 199.0], [23.5, 200.0], [23.6, 200.0], [23.7, 201.0], [23.8, 201.0], [23.9, 202.0], [24.0, 202.0], [24.1, 204.0], [24.2, 204.0], [24.3, 204.0], [24.4, 205.0], [24.5, 205.0], [24.6, 206.0], [24.7, 206.0], [24.8, 207.0], [24.9, 207.0], [25.0, 208.0], [25.1, 208.0], [25.2, 208.0], [25.3, 209.0], [25.4, 209.0], [25.5, 209.0], [25.6, 210.0], [25.7, 210.0], [25.8, 210.0], [25.9, 212.0], [26.0, 212.0], [26.1, 212.0], [26.2, 214.0], [26.3, 217.0], [26.4, 217.0], [26.5, 217.0], [26.6, 218.0], [26.7, 219.0], [26.8, 220.0], [26.9, 221.0], [27.0, 221.0], [27.1, 222.0], [27.2, 222.0], [27.3, 223.0], [27.4, 223.0], [27.5, 224.0], [27.6, 224.0], [27.7, 225.0], [27.8, 225.0], [27.9, 225.0], [28.0, 226.0], [28.1, 227.0], [28.2, 229.0], [28.3, 229.0], [28.4, 231.0], [28.5, 232.0], [28.6, 232.0], [28.7, 234.0], [28.8, 235.0], [28.9, 236.0], [29.0, 236.0], [29.1, 237.0], [29.2, 237.0], [29.3, 237.0], [29.4, 238.0], [29.5, 238.0], [29.6, 238.0], [29.7, 238.0], [29.8, 240.0], [29.9, 240.0], [30.0, 243.0], [30.1, 243.0], [30.2, 244.0], [30.3, 247.0], [30.4, 248.0], [30.5, 271.0], [30.6, 282.0], [30.7, 282.0], [30.8, 282.0], [30.9, 287.0], [31.0, 307.0], [31.1, 311.0], [31.2, 327.0], [31.3, 342.0], [31.4, 359.0], [31.5, 359.0], [31.6, 370.0], [31.7, 388.0], [31.8, 442.0], [31.9, 589.0], [32.0, 658.0], [32.1, 662.0], [32.2, 662.0], [32.3, 665.0], [32.4, 667.0], [32.5, 684.0], [32.6, 694.0], [32.7, 715.0], [32.8, 732.0], [32.9, 732.0], [33.0, 736.0], [33.1, 743.0], [33.2, 744.0], [33.3, 746.0], [33.4, 747.0], [33.5, 752.0], [33.6, 752.0], [33.7, 758.0], [33.8, 759.0], [33.9, 764.0], [34.0, 800.0], [34.1, 808.0], [34.2, 816.0], [34.3, 816.0], [34.4, 823.0], [34.5, 825.0], [34.6, 827.0], [34.7, 833.0], [34.8, 840.0], [34.9, 842.0], [35.0, 844.0], [35.1, 844.0], [35.2, 855.0], [35.3, 855.0], [35.4, 856.0], [35.5, 863.0], [35.6, 865.0], [35.7, 868.0], [35.8, 868.0], [35.9, 869.0], [36.0, 869.0], [36.1, 874.0], [36.2, 884.0], [36.3, 885.0], [36.4, 885.0], [36.5, 885.0], [36.6, 885.0], [36.7, 886.0], [36.8, 893.0], [36.9, 901.0], [37.0, 903.0], [37.1, 906.0], [37.2, 906.0], [37.3, 913.0], [37.4, 915.0], [37.5, 918.0], [37.6, 938.0], [37.7, 939.0], [37.8, 944.0], [37.9, 944.0], [38.0, 948.0], [38.1, 949.0], [38.2, 950.0], [38.3, 954.0], [38.4, 954.0], [38.5, 960.0], [38.6, 960.0], [38.7, 960.0], [38.8, 961.0], [38.9, 971.0], [39.0, 977.0], [39.1, 979.0], [39.2, 980.0], [39.3, 980.0], [39.4, 980.0], [39.5, 981.0], [39.6, 985.0], [39.7, 992.0], [39.8, 992.0], [39.9, 992.0], [40.0, 992.0], [40.1, 993.0], [40.2, 999.0], [40.3, 1001.0], [40.4, 1011.0], [40.5, 1011.0], [40.6, 1016.0], [40.7, 1022.0], [40.8, 1022.0], [40.9, 1040.0], [41.0, 1042.0], [41.1, 1042.0], [41.2, 1055.0], [41.3, 1057.0], [41.4, 1059.0], [41.5, 1059.0], [41.6, 1065.0], [41.7, 1074.0], [41.8, 1089.0], [41.9, 1089.0], [42.0, 1101.0], [42.1, 1103.0], [42.2, 1103.0], [42.3, 1106.0], [42.4, 1118.0], [42.5, 1119.0], [42.6, 1124.0], [42.7, 1124.0], [42.8, 1135.0], [42.9, 1135.0], [43.0, 1138.0], [43.1, 1140.0], [43.2, 1141.0], [43.3, 1147.0], [43.4, 1152.0], [43.5, 1153.0], [43.6, 1153.0], [43.7, 1154.0], [43.8, 1162.0], [43.9, 1162.0], [44.0, 1166.0], [44.1, 1168.0], [44.2, 1169.0], [44.3, 1169.0], [44.4, 1175.0], [44.5, 1179.0], [44.6, 1183.0], [44.7, 1184.0], [44.8, 1186.0], [44.9, 1187.0], [45.0, 1187.0], [45.1, 1195.0], [45.2, 1199.0], [45.3, 1199.0], [45.4, 1199.0], [45.5, 1203.0], [45.6, 1203.0], [45.7, 1210.0], [45.8, 1210.0], [45.9, 1211.0], [46.0, 1214.0], [46.1, 1217.0], [46.2, 1228.0], [46.3, 1230.0], [46.4, 1231.0], [46.5, 1231.0], [46.6, 1233.0], [46.7, 1234.0], [46.8, 1235.0], [46.9, 1240.0], [47.0, 1246.0], [47.1, 1247.0], [47.2, 1247.0], [47.3, 1258.0], [47.4, 1259.0], [47.5, 1261.0], [47.6, 1262.0], [47.7, 1262.0], [47.8, 1267.0], [47.9, 1267.0], [48.0, 1268.0], [48.1, 1274.0], [48.2, 1276.0], [48.3, 1277.0], [48.4, 1280.0], [48.5, 1291.0], [48.6, 1291.0], [48.7, 1291.0], [48.8, 1294.0], [48.9, 1296.0], [49.0, 1304.0], [49.1, 1307.0], [49.2, 1310.0], [49.3, 1310.0], [49.4, 1312.0], [49.5, 1321.0], [49.6, 1322.0], [49.7, 1329.0], [49.8, 1329.0], [49.9, 1336.0], [50.0, 1336.0], [50.1, 1338.0], [50.2, 1338.0], [50.3, 1338.0], [50.4, 1340.0], [50.5, 1341.0], [50.6, 1356.0], [50.7, 1360.0], [50.8, 1360.0], [50.9, 1372.0], [51.0, 1385.0], [51.1, 1391.0], [51.2, 1393.0], [51.3, 1399.0], [51.4, 1413.0], [51.5, 1413.0], [51.6, 1415.0], [51.7, 1416.0], [51.8, 1417.0], [51.9, 1419.0], [52.0, 1420.0], [52.1, 1424.0], [52.2, 1424.0], [52.3, 1430.0], [52.4, 1431.0], [52.5, 1447.0], [52.6, 1448.0], [52.7, 1448.0], [52.8, 1452.0], [52.9, 1452.0], [53.0, 1457.0], [53.1, 1462.0], [53.2, 1462.0], [53.3, 1470.0], [53.4, 1483.0], [53.5, 1487.0], [53.6, 1487.0], [53.7, 1498.0], [53.8, 1511.0], [53.9, 1515.0], [54.0, 1517.0], [54.1, 1546.0], [54.2, 1551.0], [54.3, 1551.0], [54.4, 1554.0], [54.5, 1556.0], [54.6, 1559.0], [54.7, 1561.0], [54.8, 1561.0], [54.9, 1566.0], [55.0, 1566.0], [55.1, 1573.0], [55.2, 1574.0], [55.3, 1579.0], [55.4, 1587.0], [55.5, 1589.0], [55.6, 1616.0], [55.7, 1616.0], [55.8, 1616.0], [55.9, 1622.0], [56.0, 1637.0], [56.1, 1638.0], [56.2, 1638.0], [56.3, 1642.0], [56.4, 1649.0], [56.5, 1649.0], [56.6, 1655.0], [56.7, 1657.0], [56.8, 1672.0], [56.9, 1673.0], [57.0, 1675.0], [57.1, 1681.0], [57.2, 1681.0], [57.3, 1687.0], [57.4, 1705.0], [57.5, 1714.0], [57.6, 1725.0], [57.7, 1730.0], [57.8, 1731.0], [57.9, 1731.0], [58.0, 1731.0], [58.1, 1745.0], [58.2, 1746.0], [58.3, 1749.0], [58.4, 1761.0], [58.5, 1773.0], [58.6, 1773.0], [58.7, 1776.0], [58.8, 1776.0], [58.9, 1798.0], [59.0, 1804.0], [59.1, 1820.0], [59.2, 1823.0], [59.3, 1823.0], [59.4, 1850.0], [59.5, 1854.0], [59.6, 1855.0], [59.7, 1856.0], [59.8, 1864.0], [59.9, 1876.0], [60.0, 1876.0], [60.1, 1876.0], [60.2, 1891.0], [60.3, 1895.0], [60.4, 1946.0], [60.5, 1951.0], [60.6, 1956.0], [60.7, 1969.0], [60.8, 1969.0], [60.9, 1972.0], [61.0, 1974.0], [61.1, 1979.0], [61.2, 2002.0], [61.3, 2004.0], [61.4, 2008.0], [61.5, 2008.0], [61.6, 2019.0], [61.7, 2033.0], [61.8, 2060.0], [61.9, 2062.0], [62.0, 2074.0], [62.1, 2105.0], [62.2, 2105.0], [62.3, 2111.0], [62.4, 2122.0], [62.5, 2142.0], [62.6, 2153.0], [62.7, 2176.0], [62.8, 2183.0], [62.9, 2183.0], [63.0, 2192.0], [63.1, 2208.0], [63.2, 2226.0], [63.3, 2292.0], [63.4, 2300.0], [63.5, 2312.0], [63.6, 2312.0], [63.7, 2343.0], [63.8, 2368.0], [63.9, 2374.0], [64.0, 2424.0], [64.1, 2435.0], [64.2, 2459.0], [64.3, 2459.0], [64.4, 2502.0], [64.5, 2508.0], [64.6, 2518.0], [64.7, 2529.0], [64.8, 2531.0], [64.9, 2538.0], [65.0, 2538.0], [65.1, 2561.0], [65.2, 2577.0], [65.3, 2579.0], [65.4, 2590.0], [65.5, 2596.0], [65.6, 2606.0], [65.7, 2621.0], [65.8, 2621.0], [65.9, 2621.0], [66.0, 2624.0], [66.1, 2627.0], [66.2, 2644.0], [66.3, 2675.0], [66.4, 2699.0], [66.5, 2699.0], [66.6, 2704.0], [66.7, 2708.0], [66.8, 2719.0], [66.9, 2753.0], [67.0, 2766.0], [67.1, 2786.0], [67.2, 2786.0], [67.3, 2807.0], [67.4, 2811.0], [67.5, 2816.0], [67.6, 2818.0], [67.7, 2827.0], [67.8, 2849.0], [67.9, 2849.0], [68.0, 2864.0], [68.1, 2876.0], [68.2, 2878.0], [68.3, 2885.0], [68.4, 2891.0], [68.5, 2892.0], [68.6, 2892.0], [68.7, 2926.0], [68.8, 2934.0], [68.9, 2942.0], [69.0, 2962.0], [69.1, 2965.0], [69.2, 2968.0], [69.3, 2968.0], [69.4, 2984.0], [69.5, 2988.0], [69.6, 3013.0], [69.7, 3013.0], [69.8, 3030.0], [69.9, 3052.0], [70.0, 3052.0], [70.1, 3092.0], [70.2, 3094.0], [70.3, 3107.0], [70.4, 3125.0], [70.5, 3154.0], [70.6, 3160.0], [70.7, 3166.0], [70.8, 3166.0], [70.9, 3173.0], [71.0, 3201.0], [71.1, 3217.0], [71.2, 3258.0], [71.3, 3338.0], [71.4, 3342.0], [71.5, 3342.0], [71.6, 3344.0], [71.7, 3372.0], [71.8, 3390.0], [71.9, 3403.0], [72.0, 3418.0], [72.1, 3420.0], [72.2, 3420.0], [72.3, 3445.0], [72.4, 3454.0], [72.5, 3485.0], [72.6, 3515.0], [72.7, 3550.0], [72.8, 3565.0], [72.9, 3565.0], [73.0, 3581.0], [73.1, 3595.0], [73.2, 3621.0], [73.3, 3633.0], [73.4, 3656.0], [73.5, 3692.0], [73.6, 3692.0], [73.7, 3741.0], [73.8, 3742.0], [73.9, 3776.0], [74.0, 3795.0], [74.1, 3796.0], [74.2, 3816.0], [74.3, 3816.0], [74.4, 3820.0], [74.5, 3825.0], [74.6, 3834.0], [74.7, 3838.0], [74.8, 3861.0], [74.9, 3935.0], [75.0, 3935.0], [75.1, 3964.0], [75.2, 3974.0], [75.3, 4006.0], [75.4, 4011.0], [75.5, 4033.0], [75.6, 4036.0], [75.7, 4072.0], [75.8, 4072.0], [75.9, 4077.0], [76.0, 4080.0], [76.1, 4092.0], [76.2, 4113.0], [76.3, 4119.0], [76.4, 4134.0], [76.5, 4134.0], [76.6, 4154.0], [76.7, 4167.0], [76.8, 4189.0], [76.9, 4227.0], [77.0, 4233.0], [77.1, 4246.0], [77.2, 4246.0], [77.3, 4247.0], [77.4, 4248.0], [77.5, 4250.0], [77.6, 4259.0], [77.7, 4279.0], [77.8, 4280.0], [77.9, 4280.0], [78.0, 4319.0], [78.1, 4332.0], [78.2, 4336.0], [78.3, 4343.0], [78.4, 4345.0], [78.5, 4358.0], [78.6, 4358.0], [78.7, 4376.0], [78.8, 4376.0], [78.9, 4386.0], [79.0, 4419.0], [79.1, 4423.0], [79.2, 4435.0], [79.3, 4435.0], [79.4, 4438.0], [79.5, 4444.0], [79.6, 4447.0], [79.7, 4461.0], [79.8, 4464.0], [79.9, 4503.0], [80.0, 4503.0], [80.1, 4518.0], [80.2, 4519.0], [80.3, 4548.0], [80.4, 4579.0], [80.5, 4589.0], [80.6, 4592.0], [80.7, 4611.0], [80.8, 4611.0], [80.9, 4626.0], [81.0, 4638.0], [81.1, 4653.0], [81.2, 4653.0], [81.3, 4676.0], [81.4, 4678.0], [81.5, 4678.0], [81.6, 4752.0], [81.7, 4756.0], [81.8, 4765.0], [81.9, 4768.0], [82.0, 4769.0], [82.1, 4775.0], [82.2, 4775.0], [82.3, 4778.0], [82.4, 4783.0], [82.5, 4784.0], [82.6, 4788.0], [82.7, 4792.0], [82.8, 4798.0], [82.9, 4798.0], [83.0, 4799.0], [83.1, 4801.0], [83.2, 4809.0], [83.3, 4812.0], [83.4, 4816.0], [83.5, 4831.0], [83.6, 4831.0], [83.7, 4839.0], [83.8, 4841.0], [83.9, 4845.0], [84.0, 4851.0], [84.1, 4868.0], [84.2, 4870.0], [84.3, 4870.0], [84.4, 4893.0], [84.5, 4909.0], [84.6, 4916.0], [84.7, 4916.0], [84.8, 4920.0], [84.9, 4931.0], [85.0, 4931.0], [85.1, 4931.0], [85.2, 4940.0], [85.3, 4946.0], [85.4, 4946.0], [85.5, 4963.0], [85.6, 4974.0], [85.7, 4980.0], [85.8, 4980.0], [85.9, 4982.0], [86.0, 4984.0], [86.1, 4988.0], [86.2, 5005.0], [86.3, 5013.0], [86.4, 5020.0], [86.5, 5020.0], [86.6, 5043.0], [86.7, 5044.0], [86.8, 5045.0], [86.9, 5050.0], [87.0, 5081.0], [87.1, 5082.0], [87.2, 5082.0], [87.3, 5084.0], [87.4, 5102.0], [87.5, 5107.0], [87.6, 5124.0], [87.7, 5136.0], [87.8, 5144.0], [87.9, 5144.0], [88.0, 5146.0], [88.1, 5149.0], [88.2, 5164.0], [88.3, 5166.0], [88.4, 5172.0], [88.5, 5177.0], [88.6, 5177.0], [88.7, 5185.0], [88.8, 5191.0], [88.9, 5193.0], [89.0, 5215.0], [89.1, 5218.0], [89.2, 5227.0], [89.3, 5227.0], [89.4, 5240.0], [89.5, 5244.0], [89.6, 5247.0], [89.7, 5250.0], [89.8, 5254.0], [89.9, 5262.0], [90.0, 5262.0], [90.1, 5262.0], [90.2, 5283.0], [90.3, 5288.0], [90.4, 5313.0], [90.5, 5318.0], [90.6, 5322.0], [90.7, 5325.0], [90.8, 5325.0], [90.9, 5328.0], [91.0, 5330.0], [91.1, 5344.0], [91.2, 5350.0], [91.3, 5353.0], [91.4, 5369.0], [91.5, 5369.0], [91.6, 5371.0], [91.7, 5372.0], [91.8, 5381.0], [91.9, 5384.0], [92.0, 5411.0], [92.1, 5412.0], [92.2, 5412.0], [92.3, 5414.0], [92.4, 5437.0], [92.5, 5443.0], [92.6, 5443.0], [92.7, 5453.0], [92.8, 5462.0], [92.9, 5462.0], [93.0, 5490.0], [93.1, 5510.0], [93.2, 5522.0], [93.3, 5540.0], [93.4, 5572.0], [93.5, 5576.0], [93.6, 5576.0], [93.7, 5587.0], [93.8, 5593.0], [93.9, 5594.0], [94.0, 5618.0], [94.1, 5619.0], [94.2, 5619.0], [94.3, 5619.0], [94.4, 5631.0], [94.5, 5635.0], [94.6, 5661.0], [94.7, 5670.0], [94.8, 5702.0], [94.9, 5739.0], [95.0, 5739.0], [95.1, 5748.0], [95.2, 5772.0], [95.3, 5783.0], [95.4, 5791.0], [95.5, 5826.0], [95.6, 5834.0], [95.7, 5861.0], [95.8, 5861.0], [95.9, 5881.0], [96.0, 5891.0], [96.1, 5911.0], [96.2, 5937.0], [96.3, 5941.0], [96.4, 5946.0], [96.5, 5946.0], [96.6, 5965.0], [96.7, 5992.0], [96.8, 6003.0], [96.9, 6018.0], [97.0, 6043.0], [97.1, 6051.0], [97.2, 6051.0], [97.3, 6068.0], [97.4, 6121.0], [97.5, 6129.0], [97.6, 6142.0], [97.7, 6146.0], [97.8, 6216.0], [97.9, 6216.0], [98.0, 6239.0], [98.1, 6246.0], [98.2, 6269.0], [98.3, 6299.0], [98.4, 6323.0], [98.5, 6347.0], [98.6, 6347.0], [98.7, 6347.0], [98.8, 6350.0], [98.9, 6397.0], [99.0, 6470.0], [99.1, 6486.0], [99.2, 6520.0], [99.3, 6520.0], [99.4, 6620.0], [99.5, 6652.0], [99.6, 7044.0], [99.7, 7098.0], [99.8, 7245.0], [99.9, 7385.0], [100.0, 7385.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[0.0, 19.0], [0.1, 19.0], [0.2, 19.0], [0.3, 19.0], [0.4, 19.0], [0.5, 19.0], [0.6, 19.0], [0.7, 19.0], [0.8, 19.0], [0.9, 19.0], [1.0, 19.0], [1.1, 19.0], [1.2, 19.0], [1.3, 19.0], [1.4, 19.0], [1.5, 19.0], [1.6, 19.0], [1.7, 19.0], [1.8, 19.0], [1.9, 19.0], [2.0, 19.0], [2.1, 19.0], [2.2, 19.0], [2.3, 19.0], [2.4, 19.0], [2.5, 19.0], [2.6, 19.0], [2.7, 19.0], [2.8, 20.0], [2.9, 20.0], [3.0, 20.0], [3.1, 20.0], [3.2, 20.0], [3.3, 20.0], [3.4, 20.0], [3.5, 20.0], [3.6, 20.0], [3.7, 20.0], [3.8, 20.0], [3.9, 20.0], [4.0, 20.0], [4.1, 20.0], [4.2, 20.0], [4.3, 20.0], [4.4, 20.0], [4.5, 20.0], [4.6, 20.0], [4.7, 20.0], [4.8, 20.0], [4.9, 20.0], [5.0, 20.0], [5.1, 20.0], [5.2, 20.0], [5.3, 20.0], [5.4, 20.0], [5.5, 20.0], [5.6, 20.0], [5.7, 20.0], [5.8, 20.0], [5.9, 20.0], [6.0, 20.0], [6.1, 20.0], [6.2, 20.0], [6.3, 20.0], [6.4, 20.0], [6.5, 20.0], [6.6, 20.0], [6.7, 20.0], [6.8, 20.0], [6.9, 20.0], [7.0, 20.0], [7.1, 20.0], [7.2, 20.0], [7.3, 20.0], [7.4, 20.0], [7.5, 20.0], [7.6, 20.0], [7.7, 20.0], [7.8, 20.0], [7.9, 20.0], [8.0, 20.0], [8.1, 20.0], [8.2, 20.0], [8.3, 21.0], [8.4, 21.0], [8.5, 21.0], [8.6, 21.0], [8.7, 21.0], [8.8, 21.0], [8.9, 21.0], [9.0, 21.0], [9.1, 21.0], [9.2, 21.0], [9.3, 21.0], [9.4, 21.0], [9.5, 21.0], [9.6, 21.0], [9.7, 21.0], [9.8, 21.0], [9.9, 21.0], [10.0, 21.0], [10.1, 21.0], [10.2, 21.0], [10.3, 21.0], [10.4, 21.0], [10.5, 21.0], [10.6, 21.0], [10.7, 21.0], [10.8, 21.0], [10.9, 21.0], [11.0, 21.0], [11.1, 21.0], [11.2, 21.0], [11.3, 21.0], [11.4, 21.0], [11.5, 21.0], [11.6, 21.0], [11.7, 21.0], [11.8, 21.0], [11.9, 21.0], [12.0, 21.0], [12.1, 21.0], [12.2, 21.0], [12.3, 21.0], [12.4, 21.0], [12.5, 21.0], [12.6, 21.0], [12.7, 21.0], [12.8, 21.0], [12.9, 21.0], [13.0, 21.0], [13.1, 21.0], [13.2, 21.0], [13.3, 21.0], [13.4, 21.0], [13.5, 21.0], [13.6, 21.0], [13.7, 21.0], [13.8, 21.0], [13.9, 21.0], [14.0, 21.0], [14.1, 21.0], [14.2, 21.0], [14.3, 21.0], [14.4, 21.0], [14.5, 21.0], [14.6, 21.0], [14.7, 21.0], [14.8, 21.0], [14.9, 21.0], [15.0, 21.0], [15.1, 21.0], [15.2, 21.0], [15.3, 21.0], [15.4, 21.0], [15.5, 22.0], [15.6, 22.0], [15.7, 22.0], [15.8, 22.0], [15.9, 22.0], [16.0, 22.0], [16.1, 22.0], [16.2, 22.0], [16.3, 22.0], [16.4, 22.0], [16.5, 22.0], [16.6, 22.0], [16.7, 22.0], [16.8, 22.0], [16.9, 22.0], [17.0, 22.0], [17.1, 22.0], [17.2, 22.0], [17.3, 22.0], [17.4, 22.0], [17.5, 22.0], [17.6, 22.0], [17.7, 22.0], [17.8, 22.0], [17.9, 22.0], [18.0, 22.0], [18.1, 22.0], [18.2, 22.0], [18.3, 22.0], [18.4, 22.0], [18.5, 22.0], [18.6, 22.0], [18.7, 22.0], [18.8, 22.0], [18.9, 22.0], [19.0, 22.0], [19.1, 22.0], [19.2, 22.0], [19.3, 22.0], [19.4, 22.0], [19.5, 22.0], [19.6, 22.0], [19.7, 22.0], [19.8, 22.0], [19.9, 22.0], [20.0, 22.0], [20.1, 22.0], [20.2, 22.0], [20.3, 22.0], [20.4, 22.0], [20.5, 22.0], [20.6, 22.0], [20.7, 22.0], [20.8, 22.0], [20.9, 22.0], [21.0, 22.0], [21.1, 22.0], [21.2, 22.0], [21.3, 23.0], [21.4, 23.0], [21.5, 23.0], [21.6, 23.0], [21.7, 23.0], [21.8, 23.0], [21.9, 23.0], [22.0, 23.0], [22.1, 23.0], [22.2, 23.0], [22.3, 23.0], [22.4, 23.0], [22.5, 23.0], [22.6, 23.0], [22.7, 23.0], [22.8, 23.0], [22.9, 23.0], [23.0, 23.0], [23.1, 23.0], [23.2, 23.0], [23.3, 23.0], [23.4, 23.0], [23.5, 23.0], [23.6, 23.0], [23.7, 23.0], [23.8, 24.0], [23.9, 24.0], [24.0, 24.0], [24.1, 24.0], [24.2, 24.0], [24.3, 24.0], [24.4, 24.0], [24.5, 24.0], [24.6, 24.0], [24.7, 24.0], [24.8, 24.0], [24.9, 24.0], [25.0, 24.0], [25.1, 24.0], [25.2, 24.0], [25.3, 24.0], [25.4, 24.0], [25.5, 24.0], [25.6, 25.0], [25.7, 25.0], [25.8, 25.0], [25.9, 25.0], [26.0, 25.0], [26.1, 25.0], [26.2, 25.0], [26.3, 25.0], [26.4, 26.0], [26.5, 26.0], [26.6, 26.0], [26.7, 26.0], [26.8, 26.0], [26.9, 26.0], [27.0, 26.0], [27.1, 26.0], [27.2, 26.0], [27.3, 27.0], [27.4, 27.0], [27.5, 27.0], [27.6, 27.0], [27.7, 27.0], [27.8, 27.0], [27.9, 27.0], [28.0, 27.0], [28.1, 27.0], [28.2, 27.0], [28.3, 27.0], [28.4, 27.0], [28.5, 27.0], [28.6, 27.0], [28.7, 28.0], [28.8, 28.0], [28.9, 28.0], [29.0, 28.0], [29.1, 28.0], [29.2, 28.0], [29.3, 28.0], [29.4, 28.0], [29.5, 29.0], [29.6, 29.0], [29.7, 29.0], [29.8, 29.0], [29.9, 29.0], [30.0, 29.0], [30.1, 29.0], [30.2, 29.0], [30.3, 29.0], [30.4, 29.0], [30.5, 29.0], [30.6, 30.0], [30.7, 30.0], [30.8, 30.0], [30.9, 31.0], [31.0, 31.0], [31.1, 31.0], [31.2, 31.0], [31.3, 31.0], [31.4, 31.0], [31.5, 31.0], [31.6, 31.0], [31.7, 32.0], [31.8, 33.0], [31.9, 36.0], [32.0, 42.0], [32.1, 42.0], [32.2, 42.0], [32.3, 43.0], [32.4, 44.0], [32.5, 44.0], [32.6, 45.0], [32.7, 47.0], [32.8, 47.0], [32.9, 47.0], [33.0, 54.0], [33.1, 61.0], [33.2, 67.0], [33.3, 78.0], [33.4, 81.0], [33.5, 84.0], [33.6, 84.0], [33.7, 86.0], [33.8, 88.0], [33.9, 91.0], [34.0, 92.0], [34.1, 92.0], [34.2, 93.0], [34.3, 93.0], [34.4, 107.0], [34.5, 108.0], [34.6, 125.0], [34.7, 128.0], [34.8, 129.0], [34.9, 134.0], [35.0, 134.0], [35.1, 139.0], [35.2, 139.0], [35.3, 142.0], [35.4, 156.0], [35.5, 162.0], [35.6, 164.0], [35.7, 170.0], [35.8, 170.0], [35.9, 170.0], [36.0, 179.0], [36.1, 186.0], [36.2, 186.0], [36.3, 195.0], [36.4, 196.0], [36.5, 196.0], [36.6, 204.0], [36.7, 206.0], [36.8, 209.0], [36.9, 216.0], [37.0, 220.0], [37.1, 224.0], [37.2, 224.0], [37.3, 227.0], [37.4, 229.0], [37.5, 229.0], [37.6, 232.0], [37.7, 234.0], [37.8, 241.0], [37.9, 241.0], [38.0, 250.0], [38.1, 251.0], [38.2, 258.0], [38.3, 263.0], [38.4, 263.0], [38.5, 273.0], [38.6, 273.0], [38.7, 280.0], [38.8, 283.0], [38.9, 285.0], [39.0, 287.0], [39.1, 289.0], [39.2, 290.0], [39.3, 290.0], [39.4, 297.0], [39.5, 297.0], [39.6, 305.0], [39.7, 316.0], [39.8, 318.0], [39.9, 321.0], [40.0, 321.0], [40.1, 326.0], [40.2, 330.0], [40.3, 341.0], [40.4, 347.0], [40.5, 350.0], [40.6, 352.0], [40.7, 352.0], [40.8, 352.0], [40.9, 356.0], [41.0, 358.0], [41.1, 359.0], [41.2, 368.0], [41.3, 368.0], [41.4, 381.0], [41.5, 381.0], [41.6, 381.0], [41.7, 382.0], [41.8, 386.0], [41.9, 389.0], [42.0, 390.0], [42.1, 390.0], [42.2, 390.0], [42.3, 406.0], [42.4, 407.0], [42.5, 413.0], [42.6, 415.0], [42.7, 420.0], [42.8, 436.0], [42.9, 436.0], [43.0, 436.0], [43.1, 436.0], [43.2, 440.0], [43.3, 443.0], [43.4, 443.0], [43.5, 459.0], [43.6, 459.0], [43.7, 468.0], [43.8, 472.0], [43.9, 475.0], [44.0, 476.0], [44.1, 480.0], [44.2, 490.0], [44.3, 490.0], [44.4, 492.0], [44.5, 502.0], [44.6, 503.0], [44.7, 504.0], [44.8, 512.0], [44.9, 515.0], [45.0, 515.0], [45.1, 523.0], [45.2, 529.0], [45.3, 534.0], [45.4, 536.0], [45.5, 536.0], [45.6, 540.0], [45.7, 549.0], [45.8, 549.0], [45.9, 555.0], [46.0, 556.0], [46.1, 562.0], [46.2, 564.0], [46.3, 569.0], [46.4, 573.0], [46.5, 573.0], [46.6, 586.0], [46.7, 588.0], [46.8, 591.0], [46.9, 596.0], [47.0, 601.0], [47.1, 603.0], [47.2, 603.0], [47.3, 604.0], [47.4, 604.0], [47.5, 612.0], [47.6, 615.0], [47.7, 621.0], [47.8, 627.0], [47.9, 627.0], [48.0, 628.0], [48.1, 632.0], [48.2, 634.0], [48.3, 636.0], [48.4, 642.0], [48.5, 643.0], [48.6, 643.0], [48.7, 650.0], [48.8, 663.0], [48.9, 663.0], [49.0, 689.0], [49.1, 690.0], [49.2, 693.0], [49.3, 693.0], [49.4, 699.0], [49.5, 722.0], [49.6, 722.0], [49.7, 729.0], [49.8, 733.0], [49.9, 739.0], [50.0, 739.0], [50.1, 746.0], [50.2, 746.0], [50.3, 750.0], [50.4, 752.0], [50.5, 757.0], [50.6, 767.0], [50.7, 771.0], [50.8, 771.0], [50.9, 773.0], [51.0, 778.0], [51.1, 779.0], [51.2, 783.0], [51.3, 783.0], [51.4, 789.0], [51.5, 789.0], [51.6, 790.0], [51.7, 806.0], [51.8, 808.0], [51.9, 812.0], [52.0, 823.0], [52.1, 832.0], [52.2, 832.0], [52.3, 836.0], [52.4, 843.0], [52.5, 851.0], [52.6, 857.0], [52.7, 883.0], [52.8, 884.0], [52.9, 884.0], [53.0, 897.0], [53.1, 914.0], [53.2, 918.0], [53.3, 930.0], [53.4, 941.0], [53.5, 962.0], [53.6, 962.0], [53.7, 964.0], [53.8, 991.0], [53.9, 996.0], [54.0, 998.0], [54.1, 1003.0], [54.2, 1012.0], [54.3, 1012.0], [54.4, 1022.0], [54.5, 1023.0], [54.6, 1043.0], [54.7, 1057.0], [54.8, 1070.0], [54.9, 1074.0], [55.0, 1074.0], [55.1, 1090.0], [55.2, 1092.0], [55.3, 1108.0], [55.4, 1121.0], [55.5, 1130.0], [55.6, 1134.0], [55.7, 1144.0], [55.8, 1144.0], [55.9, 1150.0], [56.0, 1153.0], [56.1, 1157.0], [56.2, 1178.0], [56.3, 1178.0], [56.4, 1208.0], [56.5, 1208.0], [56.6, 1212.0], [56.7, 1223.0], [56.8, 1225.0], [56.9, 1235.0], [57.0, 1240.0], [57.1, 1249.0], [57.2, 1249.0], [57.3, 1251.0], [57.4, 1268.0], [57.5, 1271.0], [57.6, 1301.0], [57.7, 1322.0], [57.8, 1350.0], [57.9, 1350.0], [58.0, 1350.0], [58.1, 1364.0], [58.2, 1378.0], [58.3, 1398.0], [58.4, 1400.0], [58.5, 1411.0], [58.6, 1411.0], [58.7, 1426.0], [58.8, 1445.0], [58.9, 1454.0], [59.0, 1461.0], [59.1, 1475.0], [59.2, 1487.0], [59.3, 1487.0], [59.4, 1492.0], [59.5, 1502.0], [59.6, 1519.0], [59.7, 1520.0], [59.8, 1534.0], [59.9, 1540.0], [60.0, 1540.0], [60.1, 1552.0], [60.2, 1573.0], [60.3, 1589.0], [60.4, 1592.0], [60.5, 1599.0], [60.6, 1625.0], [60.7, 1631.0], [60.8, 1631.0], [60.9, 1634.0], [61.0, 1654.0], [61.1, 1661.0], [61.2, 1666.0], [61.3, 1672.0], [61.4, 1677.0], [61.5, 1677.0], [61.6, 1681.0], [61.7, 1683.0], [61.8, 1706.0], [61.9, 1711.0], [62.0, 1728.0], [62.1, 1733.0], [62.2, 1733.0], [62.3, 1742.0], [62.4, 1777.0], [62.5, 1797.0], [62.6, 1811.0], [62.7, 1843.0], [62.8, 1861.0], [62.9, 1861.0], [63.0, 1882.0], [63.1, 1910.0], [63.2, 1919.0], [63.3, 1941.0], [63.4, 1943.0], [63.5, 1956.0], [63.6, 1956.0], [63.7, 1966.0], [63.8, 1977.0], [63.9, 1981.0], [64.0, 2015.0], [64.1, 2055.0], [64.2, 2150.0], [64.3, 2150.0], [64.4, 2158.0], [64.5, 2191.0], [64.6, 2223.0], [64.7, 2268.0], [64.8, 2274.0], [64.9, 2321.0], [65.0, 2321.0], [65.1, 2353.0], [65.2, 2793.0], [65.3, 2936.0], [65.4, 3093.0], [65.5, 4093.0], [65.6, 4297.0], [65.7, 4348.0], [65.8, 4348.0], [65.9, 4361.0], [66.0, 4388.0], [66.1, 4433.0], [66.2, 4444.0], [66.3, 4465.0], [66.4, 4476.0], [66.5, 4476.0], [66.6, 4477.0], [66.7, 4483.0], [66.8, 4498.0], [66.9, 4536.0], [67.0, 4541.0], [67.1, 4557.0], [67.2, 4557.0], [67.3, 4590.0], [67.4, 4599.0], [67.5, 4605.0], [67.6, 4607.0], [67.7, 4620.0], [67.8, 4647.0], [67.9, 4647.0], [68.0, 4666.0], [68.1, 4679.0], [68.2, 4679.0], [68.3, 4681.0], [68.4, 4691.0], [68.5, 4720.0], [68.6, 4720.0], [68.7, 4729.0], [68.8, 4734.0], [68.9, 4739.0], [69.0, 4755.0], [69.1, 4755.0], [69.2, 4768.0], [69.3, 4768.0], [69.4, 4769.0], [69.5, 4770.0], [69.6, 4787.0], [69.7, 4791.0], [69.8, 4795.0], [69.9, 4817.0], [70.0, 4817.0], [70.1, 4847.0], [70.2, 4848.0], [70.3, 4863.0], [70.4, 4875.0], [70.5, 4878.0], [70.6, 4881.0], [70.7, 4894.0], [70.8, 4894.0], [70.9, 4927.0], [71.0, 4928.0], [71.1, 4936.0], [71.2, 4969.0], [71.3, 4971.0], [71.4, 4991.0], [71.5, 4991.0], [71.6, 5004.0], [71.7, 5022.0], [71.8, 5034.0], [71.9, 5035.0], [72.0, 5051.0], [72.1, 5053.0], [72.2, 5053.0], [72.3, 5064.0], [72.4, 5080.0], [72.5, 5098.0], [72.6, 5113.0], [72.7, 5124.0], [72.8, 5142.0], [72.9, 5142.0], [73.0, 5144.0], [73.1, 5177.0], [73.2, 5181.0], [73.3, 5182.0], [73.4, 5202.0], [73.5, 5208.0], [73.6, 5208.0], [73.7, 5212.0], [73.8, 5222.0], [73.9, 5230.0], [74.0, 5257.0], [74.1, 5264.0], [74.2, 5274.0], [74.3, 5274.0], [74.4, 5286.0], [74.5, 5308.0], [74.6, 5324.0], [74.7, 5335.0], [74.8, 5335.0], [74.9, 5341.0], [75.0, 5341.0], [75.1, 5347.0], [75.2, 5364.0], [75.3, 5380.0], [75.4, 5381.0], [75.5, 5385.0], [75.6, 5391.0], [75.7, 5423.0], [75.8, 5423.0], [75.9, 5430.0], [76.0, 5442.0], [76.1, 5467.0], [76.2, 5469.0], [76.3, 5471.0], [76.4, 5473.0], [76.5, 5473.0], [76.6, 5486.0], [76.7, 5493.0], [76.8, 5504.0], [76.9, 5519.0], [77.0, 5527.0], [77.1, 5531.0], [77.2, 5531.0], [77.3, 5545.0], [77.4, 5545.0], [77.5, 5552.0], [77.6, 5553.0], [77.7, 5567.0], [77.8, 5570.0], [77.9, 5570.0], [78.0, 5600.0], [78.1, 5619.0], [78.2, 5632.0], [78.3, 5635.0], [78.4, 5650.0], [78.5, 5663.0], [78.6, 5663.0], [78.7, 5667.0], [78.8, 5673.0], [78.9, 5678.0], [79.0, 5701.0], [79.1, 5709.0], [79.2, 5723.0], [79.3, 5723.0], [79.4, 5727.0], [79.5, 5739.0], [79.6, 5750.0], [79.7, 5769.0], [79.8, 5788.0], [79.9, 5804.0], [80.0, 5804.0], [80.1, 5807.0], [80.2, 5820.0], [80.3, 5830.0], [80.4, 5862.0], [80.5, 5873.0], [80.6, 5879.0], [80.7, 5905.0], [80.8, 5905.0], [80.9, 5914.0], [81.0, 5925.0], [81.1, 5942.0], [81.2, 5954.0], [81.3, 5955.0], [81.4, 5972.0], [81.5, 5972.0], [81.6, 5990.0], [81.7, 6001.0], [81.8, 6008.0], [81.9, 6040.0], [82.0, 6063.0], [82.1, 6073.0], [82.2, 6073.0], [82.3, 6075.0], [82.4, 6075.0], [82.5, 6085.0], [82.6, 6088.0], [82.7, 6113.0], [82.8, 6125.0], [82.9, 6125.0], [83.0, 6138.0], [83.1, 6153.0], [83.2, 6156.0], [83.3, 6158.0], [83.4, 6166.0], [83.5, 6177.0], [83.6, 6177.0], [83.7, 6180.0], [83.8, 6204.0], [83.9, 6216.0], [84.0, 6220.0], [84.1, 6234.0], [84.2, 6235.0], [84.3, 6235.0], [84.4, 6273.0], [84.5, 6312.0], [84.6, 6313.0], [84.7, 6329.0], [84.8, 6333.0], [84.9, 6366.0], [85.0, 6366.0], [85.1, 6366.0], [85.2, 6372.0], [85.3, 6382.0], [85.4, 6408.0], [85.5, 6411.0], [85.6, 6431.0], [85.7, 6463.0], [85.8, 6463.0], [85.9, 6469.0], [86.0, 6477.0], [86.1, 6492.0], [86.2, 6494.0], [86.3, 6500.0], [86.4, 6506.0], [86.5, 6506.0], [86.6, 6535.0], [86.7, 6548.0], [86.8, 6562.0], [86.9, 6565.0], [87.0, 6587.0], [87.1, 6620.0], [87.2, 6620.0], [87.3, 6661.0], [87.4, 6673.0], [87.5, 6675.0], [87.6, 6681.0], [87.7, 6698.0], [87.8, 6705.0], [87.9, 6705.0], [88.0, 6736.0], [88.1, 6740.0], [88.2, 6746.0], [88.3, 6763.0], [88.4, 6773.0], [88.5, 6797.0], [88.6, 6797.0], [88.7, 6831.0], [88.8, 6831.0], [88.9, 6848.0], [89.0, 6866.0], [89.1, 6880.0], [89.2, 6881.0], [89.3, 6881.0], [89.4, 6882.0], [89.5, 6905.0], [89.6, 6918.0], [89.7, 6949.0], [89.8, 6955.0], [89.9, 6959.0], [90.0, 6959.0], [90.1, 6980.0], [90.2, 6984.0], [90.3, 6992.0], [90.4, 6994.0], [90.5, 7018.0], [90.6, 7030.0], [90.7, 7037.0], [90.8, 7037.0], [90.9, 7038.0], [91.0, 7063.0], [91.1, 7081.0], [91.2, 7092.0], [91.3, 7105.0], [91.4, 7119.0], [91.5, 7119.0], [91.6, 7143.0], [91.7, 7147.0], [91.8, 7171.0], [91.9, 7179.0], [92.0, 7181.0], [92.1, 7197.0], [92.2, 7197.0], [92.3, 7213.0], [92.4, 7221.0], [92.5, 7229.0], [92.6, 7235.0], [92.7, 7252.0], [92.8, 7292.0], [92.9, 7292.0], [93.0, 7292.0], [93.1, 7296.0], [93.2, 7319.0], [93.3, 7323.0], [93.4, 7350.0], [93.5, 7360.0], [93.6, 7360.0], [93.7, 7371.0], [93.8, 7394.0], [93.9, 7396.0], [94.0, 7449.0], [94.1, 7487.0], [94.2, 7496.0], [94.3, 7496.0], [94.4, 7498.0], [94.5, 7501.0], [94.6, 7503.0], [94.7, 7521.0], [94.8, 7521.0], [94.9, 7583.0], [95.0, 7583.0], [95.1, 7593.0], [95.2, 7611.0], [95.3, 7669.0], [95.4, 7690.0], [95.5, 7714.0], [95.6, 7726.0], [95.7, 7746.0], [95.8, 7746.0], [95.9, 7754.0], [96.0, 7775.0], [96.1, 7790.0], [96.2, 7802.0], [96.3, 7812.0], [96.4, 7870.0], [96.5, 7870.0], [96.6, 7894.0], [96.7, 7916.0], [96.8, 7920.0], [96.9, 7939.0], [97.0, 7982.0], [97.1, 7989.0], [97.2, 7989.0], [97.3, 8012.0], [97.4, 8070.0], [97.5, 8116.0], [97.6, 8127.0], [97.7, 8146.0], [97.8, 8149.0], [97.9, 8149.0], [98.0, 8194.0], [98.1, 8218.0], [98.2, 8223.0], [98.3, 8290.0], [98.4, 8303.0], [98.5, 8312.0], [98.6, 8312.0], [98.7, 8355.0], [98.8, 8385.0], [98.9, 8386.0], [99.0, 8388.0], [99.1, 8402.0], [99.2, 8418.0], [99.3, 8418.0], [99.4, 8423.0], [99.5, 8632.0], [99.6, 8730.0], [99.7, 8949.0], [99.8, 9023.0], [99.9, 9351.0], [100.0, 9351.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 295.0, "series": [{"data": [[600.0, 6.0], [700.0, 11.0], [800.0, 25.0], [900.0, 29.0], [1000.0, 15.0], [1100.0, 30.0], [1200.0, 30.0], [1300.0, 21.0], [1400.0, 20.0], [1500.0, 16.0], [1600.0, 15.0], [1700.0, 14.0], [1800.0, 12.0], [1900.0, 7.0], [2000.0, 8.0], [2100.0, 8.0], [2200.0, 3.0], [2300.0, 5.0], [2400.0, 3.0], [2500.0, 11.0], [2600.0, 8.0], [2800.0, 12.0], [2700.0, 6.0], [2900.0, 8.0], [3000.0, 6.0], [3100.0, 6.0], [3200.0, 3.0], [3300.0, 5.0], [3400.0, 6.0], [3500.0, 5.0], [3700.0, 5.0], [3600.0, 4.0], [3800.0, 6.0], [3900.0, 3.0], [4000.0, 8.0], [4200.0, 9.0], [4100.0, 6.0], [4300.0, 9.0], [4600.0, 7.0], [4400.0, 8.0], [4500.0, 7.0], [4700.0, 13.0], [4800.0, 12.0], [4900.0, 15.0], [5000.0, 10.0], [5100.0, 14.0], [5200.0, 12.0], [5300.0, 14.0], [5600.0, 7.0], [5400.0, 9.0], [5500.0, 8.0], [5700.0, 6.0], [5800.0, 5.0], [6100.0, 4.0], [5900.0, 6.0], [6000.0, 5.0], [6300.0, 5.0], [6200.0, 5.0], [6500.0, 1.0], [6600.0, 2.0], [6400.0, 2.0], [7000.0, 2.0], [7200.0, 1.0], [7300.0, 1.0], [100.0, 202.0], [200.0, 64.0], [300.0, 7.0], [400.0, 1.0], [500.0, 1.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[0.0, 295.0], [600.0, 21.0], [700.0, 19.0], [800.0, 12.0], [900.0, 9.0], [1000.0, 10.0], [1100.0, 10.0], [1200.0, 10.0], [1300.0, 7.0], [1400.0, 9.0], [1500.0, 10.0], [1600.0, 10.0], [1700.0, 7.0], [1800.0, 4.0], [1900.0, 8.0], [2000.0, 2.0], [2100.0, 3.0], [2200.0, 3.0], [2300.0, 2.0], [2700.0, 1.0], [2900.0, 1.0], [3000.0, 1.0], [4000.0, 1.0], [4300.0, 3.0], [4200.0, 1.0], [4600.0, 9.0], [4400.0, 7.0], [4500.0, 5.0], [4700.0, 12.0], [4800.0, 8.0], [5000.0, 9.0], [4900.0, 6.0], [5100.0, 7.0], [5300.0, 11.0], [5200.0, 9.0], [5400.0, 9.0], [5600.0, 9.0], [5500.0, 10.0], [5700.0, 8.0], [5800.0, 7.0], [6100.0, 9.0], [5900.0, 8.0], [6000.0, 9.0], [6300.0, 8.0], [6200.0, 6.0], [6400.0, 8.0], [6600.0, 6.0], [6500.0, 7.0], [6700.0, 7.0], [6800.0, 7.0], [6900.0, 9.0], [7000.0, 7.0], [7100.0, 8.0], [7200.0, 8.0], [7300.0, 7.0], [7400.0, 4.0], [7500.0, 6.0], [7600.0, 3.0], [7700.0, 6.0], [7800.0, 4.0], [7900.0, 5.0], [8000.0, 2.0], [8100.0, 5.0], [8300.0, 6.0], [8400.0, 3.0], [8600.0, 1.0], [8700.0, 1.0], [8200.0, 3.0], [8900.0, 1.0], [9000.0, 1.0], [9300.0, 1.0], [100.0, 19.0], [200.0, 26.0], [300.0, 23.0], [400.0, 19.0], [500.0, 22.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 317.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 747.0, "series": [{"data": [[0.0, 656.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 317.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 747.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.65401325E12, "maxY": 2.0, "series": [{"data": [[1.654013256E12, 1.5], [1.6540132755E12, 1.460869565217391], [1.6540132785E12, 1.5161290322580645], [1.65401325E12, 1.5], [1.6540132695E12, 1.4782608695652175], [1.654013253E12, 1.5], [1.6540132725E12, 1.5301204819277103], [1.6540132875E12, 1.5585585585585584], [1.654013265E12, 1.4931506849315068], [1.654013268E12, 1.614035087719299], [1.6540132815E12, 2.0], [1.654013259E12, 1.5], [1.6540132845E12, 1.7872340425531916], [1.654013262E12, 1.5], [1.654013277E12, 1.5192307692307694], [1.6540132545E12, 1.5185185185185186], [1.6540132575E12, 1.5], [1.65401328E12, 1.8181818181818175], [1.654013271E12, 1.4583333333333335], [1.654013274E12, 1.5522388059701493], [1.6540132515E12, 1.5333333333333332], [1.6540132665E12, 1.520547945205479], [1.654013286E12, 1.2972972972972978], [1.654013289E12, 1.0], [1.6540132605E12, 1.5098039215686274], [1.6540132635E12, 1.5161290322580645], [1.654013283E12, 1.4747474747474747]], "isOverall": false, "label": "parallel bzm - Parallel", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654013289E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 21.14666666666666, "minX": 1.0, "maxY": 8730.0, "series": [{"data": [[2.0, 265.9824561403509], [3.0, 261.3703703703703], [4.0, 186.327868852459], [5.0, 486.975], [6.0, 438.22222222222223], [7.0, 429.5185185185185], [8.0, 1716.25], [9.0, 1549.6], [10.0, 2899.5], [11.0, 5453.0], [12.0, 5911.0], [13.0, 5372.0], [15.0, 5431.0], [16.0, 5227.0], [17.0, 5330.0], [18.0, 5172.0], [19.0, 5262.0], [20.0, 5572.0], [21.0, 5946.0], [22.0, 3248.5], [23.0, 3002.6666666666665], [24.0, 2698.666666666667], [25.0, 1633.3333333333335], [26.0, 1789.0], [27.0, 2539.0], [28.0, 1367.4615384615383], [29.0, 1750.125], [30.0, 1359.8333333333333], [31.0, 3298.0], [33.0, 1810.4285714285716], [32.0, 4778.0], [35.0, 987.6666666666666], [34.0, 825.0], [37.0, 1154.1], [36.0, 1067.7142857142856], [39.0, 959.3333333333334], [38.0, 1491.25], [41.0, 1095.0], [40.0, 1304.8], [43.0, 1227.3333333333333], [44.0, 1183.3333333333333], [47.0, 1224.5], [46.0, 1513.3333333333333], [49.0, 1457.4], [48.0, 1131.1249999999998], [50.0, 1673.0], [51.0, 1420.0], [52.0, 1240.0], [53.0, 1081.75], [55.0, 1247.0], [54.0, 1426.5], [56.0, 1441.5], [57.0, 1350.8], [59.0, 1457.625], [58.0, 1640.6666666666667], [60.0, 1461.0], [61.0, 1813.5], [63.0, 1629.6666666666667], [64.0, 1555.5], [67.0, 7098.0], [66.0, 5521.857142857143], [68.0, 2708.857142857142], [71.0, 2120.2], [70.0, 6052.5], [73.0, 3777.0], [72.0, 2737.75], [74.0, 5542.8823529411775], [79.0, 3607.0], [77.0, 6547.0], [82.0, 2108.0], [81.0, 1448.5], [80.0, 2876.0], [87.0, 1399.0], [85.0, 2984.0], [84.0, 2203.5], [91.0, 2221.1250000000005], [89.0, 2062.0], [94.0, 1928.5], [93.0, 2786.0], [99.0, 2154.6666666666665], [98.0, 2394.0], [97.0, 2017.5], [96.0, 1965.25], [101.0, 2202.3333333333335], [100.0, 1756.0], [106.0, 2448.75], [135.0, 2811.0], [134.0, 4235.0], [133.0, 2795.6], [132.0, 2074.0], [131.0, 2958.285714285714], [130.0, 2784.8181818181815], [129.0, 2766.0], [137.0, 2817.3333333333335], [136.0, 2465.75], [147.0, 2122.0], [163.0, 2886.2727272727275], [207.0, 4518.0], [219.0, 4688.5], [229.0, 5288.5], [230.0, 3913.499999999999], [231.0, 5136.736842105263], [228.0, 5211.0], [232.0, 5050.562500000001], [237.0, 3555.0], [239.0, 4565.333333333333], [235.0, 4827.0], [234.0, 5937.75], [240.0, 4235.545454545455], [243.0, 4611.92], [245.0, 5619.0], [244.0, 4998.2], [242.0, 4571.75], [241.0, 4846.0], [251.0, 4343.0], [248.0, 4865.0], [270.0, 4133.666666666667], [269.0, 4626.0], [265.0, 3900.0], [264.0, 4299.333333333333], [262.0, 3816.0], [260.0, 4583.25], [256.0, 4371.5], [272.0, 5011.5], [1.0, 753.6666666666666]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[79.15581395348838, 2119.1767441860457]], "isOverall": false, "label": "/api/statistics/neighbourhoods-Aggregated", "isController": false}, {"data": [[2.0, 21.161290322580648], [3.0, 21.14666666666666], [4.0, 52.95918367346938], [5.0, 23.095238095238095], [6.0, 28.434782608695656], [7.0, 34.375], [8.0, 27.5], [9.0, 27.5], [20.0, 389.0], [21.0, 421.0], [22.0, 271.0], [23.0, 377.7307692307692], [24.0, 276.42857142857144], [25.0, 383.31250000000006], [27.0, 336.7894736842105], [28.0, 412.66666666666663], [29.0, 374.0], [30.0, 579.7857142857142], [31.0, 3653.5], [33.0, 4607.5], [34.0, 1305.375], [35.0, 5324.0], [36.0, 829.6666666666667], [37.0, 953.4285714285713], [39.0, 928.3333333333334], [38.0, 3289.75], [41.0, 2574.6], [40.0, 4519.5], [43.0, 930.0], [42.0, 4085.5], [45.0, 958.5], [44.0, 1212.0], [47.0, 3066.4], [46.0, 647.1176470588235], [49.0, 1149.4], [48.0, 998.0], [50.0, 1048.0], [51.0, 1217.0], [53.0, 2495.666666666667], [52.0, 1369.2857142857142], [54.0, 2222.0], [55.0, 1574.5], [57.0, 1403.0], [56.0, 3476.333333333333], [59.0, 4971.0], [58.0, 5570.25], [61.0, 5347.666666666667], [60.0, 5442.0], [62.0, 5318.0], [65.0, 5374.428571428572], [64.0, 4936.0], [75.0, 1679.3333333333333], [74.0, 1715.6666666666665], [73.0, 1618.3333333333333], [79.0, 1687.25], [77.0, 1661.0], [76.0, 1461.0], [80.0, 1655.9], [81.0, 2337.0], [87.0, 1579.6666666666667], [84.0, 1322.0], [91.0, 1909.3333333333333], [90.0, 2936.0], [89.0, 1646.5], [88.0, 1812.5], [94.0, 2064.5], [93.0, 2232.5], [92.0, 2248.5], [96.0, 1861.3333333333333], [135.0, 5592.0], [134.0, 5428.9245283018845], [143.0, 5834.714285714286], [142.0, 5487.8], [141.0, 5469.0], [140.0, 5854.666666666667], [138.0, 4923.333333333333], [149.0, 6500.0], [144.0, 6158.75], [157.0, 6885.0], [156.0, 5381.0], [155.0, 7487.0], [153.0, 5917.4], [152.0, 6114.0], [163.0, 6763.5], [161.0, 6553.0], [160.0, 6441.0], [175.0, 6746.0], [174.0, 7630.0], [172.0, 6501.333333333333], [170.0, 6535.0], [169.0, 7792.0], [168.0, 6421.75], [183.0, 7449.0], [182.0, 7802.0], [181.0, 7147.0], [180.0, 7900.5], [178.0, 7682.5], [176.0, 8402.0], [189.0, 7100.666666666667], [188.0, 8312.0], [186.0, 8320.5], [199.0, 7714.0], [198.0, 7219.0], [197.0, 8016.0], [207.0, 7503.0], [206.0, 7686.5], [205.0, 7583.0], [201.0, 7926.5], [200.0, 7360.2], [215.0, 7746.0], [223.0, 7541.0], [221.0, 7722.0], [219.0, 7889.5], [217.0, 7750.666666666667], [216.0, 7260.666666666667], [231.0, 8720.5], [229.0, 7521.0], [228.0, 8632.0], [227.0, 8730.0], [226.0, 7811.666666666667], [239.0, 5467.5], [238.0, 5628.333333333333], [235.0, 6959.5], [234.0, 7922.333333333333], [233.0, 6075.0], [232.0, 8386.0], [240.0, 6714.8], [243.0, 6495.888888888888], [242.0, 7473.0], [245.0, 7496.0], [244.0, 7296.0], [241.0, 7185.0], [253.0, 6366.0], [251.0, 6055.0], [249.0, 5647.5], [248.0, 6355.6], [270.0, 6524.0], [269.0, 6424.25], [265.0, 7229.0], [264.0, 6833.333333333333], [262.0, 6916.5], [261.0, 5955.0], [260.0, 6589.0], [256.0, 6872.25], [272.0, 5803.0], [1.0, 28.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}, {"data": [[69.9558139534884, 2435.584883720932]], "isOverall": false, "label": "/api/listings?geojson=true-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 272.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1458.6666666666667, "minX": 1.65401325E12, "maxY": 7.130904E7, "series": [{"data": [[1.654013256E12, 7512000.0], [1.6540132755E12, 2.2122788666666668E7], [1.6540132785E12, 1.1271664E7], [1.65401325E12, 3338666.6666666665], [1.6540132695E12, 1.8364498666666668E7], [1.654013253E12, 5008000.0], [1.6540132725E12, 1.8360376666666668E7], [1.6540132875E12, 2.6701547333333332E7], [1.654013265E12, 1.5024458E7], [1.654013268E12, 1.4600712666666666E7], [1.6540132815E12, 15114.0], [1.654013259E12, 1.0016E7], [1.6540132845E12, 4185699.3333333335], [1.654013262E12, 1.252E7], [1.654013277E12, 1.0434249333333334E7], [1.6540132545E12, 5842208.666666667], [1.6540132575E12, 7929333.333333333], [1.65401328E12, 25190.0], [1.654013271E12, 1.3774748E7], [1.654013274E12, 1.5438127333333334E7], [1.6540132515E12, 3338208.6666666665], [1.6540132665E12, 1.5857292666666666E7], [1.654013286E12, 7.130904E7], [1.654013289E12, 13740.0], [1.6540132605E12, 1.0850208666666666E7], [1.6540132635E12, 1.3353750666666666E7], [1.654013283E12, 2.1699043333333332E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.654013256E12, 3504.0], [1.6540132755E12, 11205.333333333334], [1.6540132785E12, 6045.333333333333], [1.65401325E12, 1557.3333333333333], [1.6540132695E12, 8960.0], [1.654013253E12, 2336.0], [1.6540132725E12, 8072.0], [1.6540132875E12, 10781.333333333334], [1.654013265E12, 7106.666666666667], [1.654013268E12, 5530.666666666667], [1.6540132815E12, 3256.0], [1.654013259E12, 4672.0], [1.6540132845E12, 4610.666666666667], [1.654013262E12, 5840.0], [1.654013277E12, 5064.0], [1.6540132545E12, 2626.6666666666665], [1.6540132575E12, 3698.6666666666665], [1.65401328E12, 5426.666666666667], [1.654013271E12, 7016.0], [1.654013274E12, 6512.0], [1.6540132515E12, 1458.6666666666667], [1.6540132665E12, 7101.333333333333], [1.654013286E12, 21448.0], [1.654013289E12, 2960.0], [1.6540132605E12, 4962.666666666667], [1.6540132635E12, 6032.0], [1.654013283E12, 9629.333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654013289E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 19.888888888888893, "minX": 1.65401325E12, "maxY": 7315.000000000001, "series": [{"data": [[1.654013256E12, 155.5], [1.6540132755E12, 1529.5000000000005], [1.6540132785E12, 2164.4285714285716], [1.65401325E12, 360.12499999999994], [1.6540132695E12, 1031.8958333333333], [1.654013253E12, 172.33333333333334], [1.6540132725E12, 1220.5641025641023], [1.6540132875E12, 5649.723404255318], [1.654013265E12, 206.94594594594597], [1.654013268E12, 342.0909090909091], [1.6540132815E12, 3971.3030303030305], [1.654013259E12, 166.08333333333334], [1.6540132845E12, 4732.891891891893], [1.654013262E12, 178.06666666666666], [1.654013277E12, 2011.925925925926], [1.6540132545E12, 165.15384615384616], [1.6540132575E12, 156.42105263157896], [1.65401328E12, 2755.6363636363635], [1.654013271E12, 1028.076923076923], [1.654013274E12, 1287.9333333333334], [1.6540132515E12, 153.42857142857142], [1.6540132665E12, 241.79999999999995], [1.654013286E12, 5236.803921568627], [1.654013289E12, 5706.200000000001], [1.6540132605E12, 161.56], [1.6540132635E12, 173.2666666666666], [1.654013283E12, 4341.234042553192]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.654013256E12, 19.888888888888893], [1.654013277E12, 1665.68], [1.6540132545E12, 21.92857142857143], [1.6540132755E12, 1127.3396226415093], [1.6540132575E12, 20.736842105263158], [1.6540132785E12, 1912.148148148148], [1.65401325E12, 214.125], [1.654013271E12, 357.75757575757564], [1.6540132695E12, 402.8863636363637], [1.654013274E12, 821.4054054054056], [1.654013253E12, 22.666666666666668], [1.6540132725E12, 474.6363636363636], [1.6540132515E12, 25.875], [1.6540132665E12, 29.868421052631586], [1.6540132875E12, 5173.031249999999], [1.654013286E12, 6519.345029239762], [1.654013265E12, 23.416666666666664], [1.654013268E12, 164.82857142857142], [1.6540132605E12, 20.88461538461538], [1.654013259E12, 21.041666666666664], [1.6540132845E12, 7315.000000000001], [1.6540132635E12, 22.03125], [1.654013262E12, 21.900000000000002], [1.654013283E12, 6314.134615384616]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654013289E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 18.72222222222222, "minX": 1.65401325E12, "maxY": 5706.200000000001, "series": [{"data": [[1.654013256E12, 155.5], [1.6540132755E12, 1529.4838709677417], [1.6540132785E12, 2164.4285714285716], [1.65401325E12, 360.12499999999994], [1.6540132695E12, 1031.8958333333333], [1.654013253E12, 172.33333333333334], [1.6540132725E12, 1220.5641025641023], [1.6540132875E12, 5649.723404255318], [1.654013265E12, 206.91891891891893], [1.654013268E12, 342.04545454545456], [1.6540132815E12, 3971.3030303030305], [1.654013259E12, 166.04166666666669], [1.6540132845E12, 4732.891891891893], [1.654013262E12, 178.06666666666666], [1.654013277E12, 2011.8888888888891], [1.6540132545E12, 165.07692307692307], [1.6540132575E12, 156.42105263157896], [1.65401328E12, 2755.6181818181826], [1.654013271E12, 1028.0256410256416], [1.654013274E12, 1287.9333333333334], [1.6540132515E12, 153.42857142857142], [1.6540132665E12, 241.77142857142852], [1.654013286E12, 5236.803921568627], [1.654013289E12, 5706.200000000001], [1.6540132605E12, 161.52], [1.6540132635E12, 173.2666666666666], [1.654013283E12, 4341.212765957445]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.654013256E12, 18.72222222222222], [1.654013277E12, 1540.68], [1.6540132545E12, 20.785714285714285], [1.6540132755E12, 1066.4716981132076], [1.6540132575E12, 19.578947368421055], [1.6540132785E12, 1848.4074074074072], [1.65401325E12, 211.0], [1.654013271E12, 339.1515151515151], [1.6540132695E12, 373.1136363636364], [1.654013274E12, 498.4054054054054], [1.654013253E12, 21.5], [1.6540132725E12, 465.29545454545456], [1.6540132515E12, 24.75], [1.6540132665E12, 28.63157894736843], [1.6540132875E12, 5150.71875], [1.654013286E12, 3854.5555555555566], [1.654013265E12, 22.22222222222222], [1.654013268E12, 163.31428571428572], [1.6540132605E12, 19.807692307692307], [1.654013259E12, 19.666666666666664], [1.6540132845E12, 2374.6], [1.6540132635E12, 20.687499999999996], [1.654013262E12, 20.766666666666666], [1.654013283E12, 2618.5961538461543]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654013289E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 5.7142857142857135, "minX": 1.65401325E12, "maxY": 2621.266666666667, "series": [{"data": [[1.654013256E12, 5.944444444444445], [1.6540132755E12, 339.1774193548388], [1.6540132785E12, 519.9428571428572], [1.65401325E12, 9.125], [1.6540132695E12, 149.66666666666669], [1.654013253E12, 6.083333333333333], [1.6540132725E12, 250.17948717948713], [1.6540132875E12, 1913.595744680851], [1.654013265E12, 6.783783783783783], [1.654013268E12, 6.909090909090909], [1.6540132815E12, 732.3636363636361], [1.654013259E12, 6.25], [1.6540132845E12, 2151.135135135136], [1.654013262E12, 6.2333333333333325], [1.654013277E12, 450.6666666666667], [1.6540132545E12, 6.307692307692308], [1.6540132575E12, 6.052631578947368], [1.65401328E12, 461.1818181818182], [1.654013271E12, 178.3846153846154], [1.654013274E12, 289.56666666666666], [1.6540132515E12, 5.7142857142857135], [1.6540132665E12, 9.48571428571429], [1.654013286E12, 1911.8235294117646], [1.654013289E12, 2621.266666666667], [1.6540132605E12, 5.88], [1.6540132635E12, 6.3], [1.654013283E12, 1115.2340425531916]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.654013256E12, 5.833333333333333], [1.654013277E12, 507.23999999999995], [1.6540132545E12, 6.2142857142857135], [1.6540132755E12, 366.4528301886792], [1.6540132575E12, 5.894736842105264], [1.6540132785E12, 447.88888888888886], [1.65401325E12, 8.875], [1.654013271E12, 163.78787878787878], [1.6540132695E12, 176.25], [1.654013274E12, 217.16216216216216], [1.654013253E12, 6.083333333333333], [1.6540132725E12, 311.54545454545456], [1.6540132515E12, 5.875], [1.6540132665E12, 9.684210526315791], [1.6540132875E12, 2274.6718750000005], [1.654013286E12, 1557.0526315789466], [1.654013265E12, 6.722222222222221], [1.654013268E12, 99.85714285714285], [1.6540132605E12, 5.884615384615385], [1.654013259E12, 6.166666666666666], [1.6540132845E12, 403.9], [1.6540132635E12, 6.375000000000001], [1.654013262E12, 6.266666666666667], [1.654013283E12, 540.7115384615386]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654013289E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 19.0, "minX": 1.65401325E12, "maxY": 9351.0, "series": [{"data": [[1.654013256E12, 173.0], [1.6540132755E12, 2538.0], [1.6540132785E12, 3166.0], [1.65401325E12, 954.0], [1.6540132695E12, 1447.0], [1.654013253E12, 195.0], [1.6540132725E12, 1761.0], [1.6540132875E12, 7245.0], [1.654013265E12, 229.0], [1.654013268E12, 885.0], [1.6540132815E12, 5013.0], [1.654013259E12, 189.0], [1.6540132845E12, 7775.0], [1.654013262E12, 212.0], [1.654013277E12, 3030.0], [1.6540132545E12, 188.0], [1.6540132575E12, 166.0], [1.65401328E12, 3795.0], [1.654013271E12, 1979.0], [1.654013274E12, 1731.0], [1.6540132515E12, 163.0], [1.6540132665E12, 388.0], [1.654013286E12, 9351.0], [1.654013289E12, 7385.0], [1.6540132605E12, 175.0], [1.6540132635E12, 199.0], [1.654013283E12, 7371.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.654013256E12, 163.40000000000003], [1.6540132755E12, 1889.6000000000001], [1.6540132785E12, 2839.1], [1.65401325E12, 823.1000000000001], [1.6540132695E12, 1286.8], [1.654013253E12, 182.5], [1.6540132725E12, 1460.0], [1.6540132875E12, 6226.599999999999], [1.654013265E12, 221.60000000000002], [1.654013268E12, 666.6000000000003], [1.6540132815E12, 4934.0], [1.654013259E12, 172.3], [1.6540132845E12, 7336.000000000001], [1.654013262E12, 187.8], [1.654013277E12, 2551.4], [1.6540132545E12, 175.0], [1.6540132575E12, 163.0], [1.65401328E12, 3446.0], [1.654013271E12, 1237.3000000000002], [1.654013274E12, 1596.8000000000002], [1.6540132515E12, 160.6], [1.6540132665E12, 299.00000000000017], [1.654013286E12, 8102.200000000001], [1.654013289E12, 6392.3], [1.6540132605E12, 169.8], [1.6540132635E12, 179.0], [1.654013283E12, 7018.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.654013256E12, 173.0], [1.6540132755E12, 2525.36], [1.6540132785E12, 3166.0], [1.65401325E12, 954.0], [1.6540132695E12, 1447.0], [1.654013253E12, 195.0], [1.6540132725E12, 1761.0], [1.6540132875E12, 7227.36], [1.654013265E12, 229.0], [1.654013268E12, 885.0], [1.6540132815E12, 5013.0], [1.654013259E12, 189.0], [1.6540132845E12, 7775.0], [1.654013262E12, 212.0], [1.654013277E12, 3030.0], [1.6540132545E12, 188.0], [1.6540132575E12, 166.0], [1.65401328E12, 3795.0], [1.654013271E12, 1979.0], [1.654013274E12, 1731.0], [1.6540132515E12, 163.0], [1.6540132665E12, 388.0], [1.654013286E12, 9005.980000000001], [1.654013289E12, 7385.0], [1.6540132605E12, 175.0], [1.6540132635E12, 199.0], [1.654013283E12, 7371.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.654013256E12, 169.6], [1.6540132755E12, 2028.5999999999988], [1.6540132785E12, 2980.2], [1.65401325E12, 954.0], [1.6540132695E12, 1347.0], [1.654013253E12, 192.0], [1.6540132725E12, 1578.0], [1.6540132875E12, 6480.6], [1.654013265E12, 225.0], [1.654013268E12, 802.2999999999998], [1.6540132815E12, 4992.7], [1.654013259E12, 182.64999999999998], [1.6540132845E12, 7652.799999999998], [1.654013262E12, 192.0], [1.654013277E12, 2994.1499999999996], [1.6540132545E12, 184.39999999999998], [1.6540132575E12, 163.14999999999998], [1.65401328E12, 3571.0], [1.654013271E12, 1311.7499999999998], [1.654013274E12, 1692.1999999999998], [1.6540132515E12, 163.0], [1.6540132665E12, 347.09999999999997], [1.654013286E12, 8380.5], [1.654013289E12, 6964.249999999999], [1.6540132605E12, 172.8], [1.6540132635E12, 187.54999999999998], [1.654013283E12, 7213.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.654013256E12, 19.0], [1.6540132755E12, 86.0], [1.6540132785E12, 1150.0], [1.65401325E12, 29.0], [1.6540132695E12, 47.0], [1.654013253E12, 19.0], [1.6540132725E12, 54.0], [1.6540132875E12, 4433.0], [1.654013265E12, 20.0], [1.654013268E12, 22.0], [1.6540132815E12, 2624.0], [1.654013259E12, 19.0], [1.6540132845E12, 3581.0], [1.654013262E12, 19.0], [1.654013277E12, 1223.0], [1.6540132545E12, 20.0], [1.6540132575E12, 19.0], [1.65401328E12, 1589.0], [1.654013271E12, 42.0], [1.654013274E12, 263.0], [1.6540132515E12, 21.0], [1.6540132665E12, 20.0], [1.654013286E12, 4093.0], [1.654013289E12, 5172.0], [1.6540132605E12, 19.0], [1.6540132635E12, 19.0], [1.654013283E12, 3342.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.654013256E12, 84.0], [1.6540132755E12, 1310.0], [1.6540132785E12, 2067.0], [1.65401325E12, 151.5], [1.6540132695E12, 707.5], [1.654013253E12, 89.5], [1.6540132725E12, 808.0], [1.6540132875E12, 5324.0], [1.654013265E12, 178.0], [1.654013268E12, 231.0], [1.6540132815E12, 4036.0], [1.654013259E12, 91.5], [1.6540132845E12, 4963.0], [1.654013262E12, 93.5], [1.654013277E12, 1765.0], [1.6540132545E12, 29.0], [1.6540132575E12, 87.5], [1.65401328E12, 2811.0], [1.654013271E12, 749.5], [1.654013274E12, 1003.0], [1.6540132515E12, 31.0], [1.6540132665E12, 93.0], [1.654013286E12, 6065.5], [1.654013289E12, 5516.0], [1.6540132605E12, 29.0], [1.6540132635E12, 28.5], [1.654013283E12, 5240.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654013289E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 28.5, "minX": 8.0, "maxY": 6065.5, "series": [{"data": [[33.0, 1406.5], [35.0, 89.5], [40.0, 93.5], [42.0, 28.5], [43.0, 722.0], [44.0, 2742.5], [46.0, 976.0], [47.0, 4963.0], [49.0, 109.0], [48.0, 103.5], [53.0, 573.0], [52.0, 1765.0], [55.0, 1454.0], [56.0, 714.0], [60.0, 1173.0], [62.0, 2067.0], [67.0, 1003.0], [71.0, 604.0], [91.0, 5493.0], [111.0, 5324.0], [8.0, 1804.0], [11.0, 1371.0], [12.0, 231.5], [222.0, 6065.5], [16.0, 89.5], [19.0, 29.0], [24.0, 87.0], [26.0, 85.5], [30.0, 5516.0], [31.0, 159.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 222.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 24.5, "minX": 8.0, "maxY": 5516.0, "series": [{"data": [[33.0, 1406.5], [35.0, 89.0], [40.0, 92.5], [42.0, 24.5], [43.0, 680.0], [44.0, 2742.5], [46.0, 976.0], [47.0, 4579.0], [49.0, 107.0], [48.0, 103.0], [53.0, 538.0], [52.0, 1672.0], [55.0, 1415.0], [56.0, 696.0], [60.0, 1153.0], [62.0, 2060.0], [67.0, 792.0], [71.0, 589.0], [91.0, 3485.0], [111.0, 5318.0], [8.0, 1078.5], [11.0, 1371.0], [12.0, 228.0], [222.0, 4178.0], [16.0, 89.0], [19.0, 28.0], [24.0, 86.0], [26.0, 85.0], [30.0, 5516.0], [31.0, 159.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 222.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.6540132485E12, "maxY": 81.33333333333333, "series": [{"data": [[1.654013256E12, 24.0], [1.6540132755E12, 73.33333333333333], [1.6540132785E12, 81.33333333333333], [1.65401325E12, 8.0], [1.6540132695E12, 58.666666666666664], [1.654013253E12, 16.0], [1.6540132725E12, 66.66666666666667], [1.654013265E12, 49.333333333333336], [1.654013268E12, 56.0], [1.6540132815E12, 78.66666666666667], [1.654013259E12, 32.0], [1.6540132845E12, 1.3333333333333333], [1.654013262E12, 40.0], [1.654013277E12, 80.0], [1.6540132545E12, 18.666666666666668], [1.6540132575E12, 26.666666666666668], [1.65401328E12, 80.0], [1.654013271E12, 64.0], [1.6540132485E12, 2.6666666666666665], [1.654013274E12, 72.0], [1.6540132515E12, 10.666666666666666], [1.6540132665E12, 49.333333333333336], [1.6540132605E12, 34.666666666666664], [1.6540132635E12, 41.333333333333336], [1.654013283E12, 81.33333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6540132845E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.65401325E12, "maxY": 148.0, "series": [{"data": [[1.654013256E12, 24.0], [1.6540132755E12, 76.66666666666667], [1.6540132785E12, 41.333333333333336], [1.65401325E12, 10.666666666666666], [1.6540132695E12, 61.333333333333336], [1.654013253E12, 16.0], [1.6540132725E12, 55.333333333333336], [1.6540132875E12, 74.0], [1.654013265E12, 48.666666666666664], [1.654013268E12, 38.0], [1.6540132815E12, 22.0], [1.654013259E12, 32.0], [1.6540132845E12, 31.333333333333332], [1.654013262E12, 40.0], [1.654013277E12, 34.666666666666664], [1.6540132545E12, 18.0], [1.6540132575E12, 25.333333333333332], [1.65401328E12, 36.666666666666664], [1.654013271E12, 48.0], [1.654013274E12, 44.666666666666664], [1.6540132515E12, 10.0], [1.6540132665E12, 48.666666666666664], [1.654013286E12, 148.0], [1.654013289E12, 20.0], [1.6540132605E12, 34.0], [1.6540132635E12, 41.333333333333336], [1.654013283E12, 66.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654013289E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.666666666666667, "minX": 1.65401325E12, "maxY": 114.0, "series": [{"data": [[1.654013256E12, 12.0], [1.654013277E12, 16.666666666666668], [1.6540132545E12, 9.333333333333334], [1.6540132755E12, 35.333333333333336], [1.6540132575E12, 12.666666666666666], [1.6540132785E12, 18.0], [1.65401325E12, 5.333333333333333], [1.654013271E12, 22.0], [1.6540132695E12, 29.333333333333332], [1.654013274E12, 24.666666666666668], [1.654013253E12, 8.0], [1.6540132725E12, 29.333333333333332], [1.6540132515E12, 5.333333333333333], [1.6540132665E12, 25.333333333333332], [1.6540132875E12, 42.666666666666664], [1.654013286E12, 114.0], [1.654013265E12, 24.0], [1.654013268E12, 23.333333333333332], [1.6540132605E12, 17.333333333333332], [1.654013259E12, 16.0], [1.6540132845E12, 6.666666666666667], [1.6540132635E12, 21.333333333333332], [1.654013262E12, 20.0], [1.654013283E12, 34.666666666666664]], "isOverall": false, "label": "/api/listings?geojson=true-success", "isController": false}, {"data": [[1.654013256E12, 12.0], [1.6540132755E12, 41.333333333333336], [1.6540132785E12, 23.333333333333332], [1.65401325E12, 5.333333333333333], [1.6540132695E12, 32.0], [1.654013253E12, 8.0], [1.6540132725E12, 26.0], [1.6540132875E12, 31.333333333333332], [1.654013265E12, 24.666666666666668], [1.654013268E12, 14.666666666666666], [1.6540132815E12, 22.0], [1.654013259E12, 16.0], [1.6540132845E12, 24.666666666666668], [1.654013262E12, 20.0], [1.654013277E12, 18.0], [1.6540132545E12, 8.666666666666666], [1.6540132575E12, 12.666666666666666], [1.65401328E12, 36.666666666666664], [1.654013271E12, 26.0], [1.654013274E12, 20.0], [1.6540132515E12, 4.666666666666667], [1.6540132665E12, 23.333333333333332], [1.654013286E12, 34.0], [1.654013289E12, 20.0], [1.6540132605E12, 16.666666666666668], [1.6540132635E12, 20.0], [1.654013283E12, 31.333333333333332]], "isOverall": false, "label": "/api/statistics/neighbourhoods-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654013289E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.65401325E12, "maxY": 148.0, "series": [{"data": [[1.654013256E12, 24.0], [1.6540132755E12, 76.66666666666667], [1.6540132785E12, 41.333333333333336], [1.65401325E12, 10.666666666666666], [1.6540132695E12, 61.333333333333336], [1.654013253E12, 16.0], [1.6540132725E12, 55.333333333333336], [1.6540132875E12, 74.0], [1.654013265E12, 48.666666666666664], [1.654013268E12, 38.0], [1.6540132815E12, 22.0], [1.654013259E12, 32.0], [1.6540132845E12, 31.333333333333332], [1.654013262E12, 40.0], [1.654013277E12, 34.666666666666664], [1.6540132545E12, 18.0], [1.6540132575E12, 25.333333333333332], [1.65401328E12, 36.666666666666664], [1.654013271E12, 48.0], [1.654013274E12, 44.666666666666664], [1.6540132515E12, 10.0], [1.6540132665E12, 48.666666666666664], [1.654013286E12, 148.0], [1.654013289E12, 20.0], [1.6540132605E12, 34.0], [1.6540132635E12, 41.333333333333336], [1.654013283E12, 66.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654013289E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

