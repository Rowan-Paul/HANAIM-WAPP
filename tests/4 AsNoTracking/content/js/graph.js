/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 18.0, "minX": 0.0, "maxY": 7993.0, "series": [{"data": [[0.0, 142.0], [0.1, 142.0], [0.2, 143.0], [0.3, 144.0], [0.4, 144.0], [0.5, 145.0], [0.6, 145.0], [0.7, 145.0], [0.8, 145.0], [0.9, 145.0], [1.0, 146.0], [1.1, 146.0], [1.2, 146.0], [1.3, 146.0], [1.4, 146.0], [1.5, 146.0], [1.6, 147.0], [1.7, 147.0], [1.8, 147.0], [1.9, 147.0], [2.0, 147.0], [2.1, 147.0], [2.2, 147.0], [2.3, 147.0], [2.4, 147.0], [2.5, 148.0], [2.6, 148.0], [2.7, 148.0], [2.8, 149.0], [2.9, 149.0], [3.0, 149.0], [3.1, 149.0], [3.2, 149.0], [3.3, 149.0], [3.4, 150.0], [3.5, 150.0], [3.6, 150.0], [3.7, 150.0], [3.8, 150.0], [3.9, 150.0], [4.0, 150.0], [4.1, 150.0], [4.2, 151.0], [4.3, 151.0], [4.4, 151.0], [4.5, 151.0], [4.6, 151.0], [4.7, 151.0], [4.8, 151.0], [4.9, 151.0], [5.0, 151.0], [5.1, 151.0], [5.2, 151.0], [5.3, 151.0], [5.4, 151.0], [5.5, 152.0], [5.6, 152.0], [5.7, 152.0], [5.8, 152.0], [5.9, 152.0], [6.0, 152.0], [6.1, 153.0], [6.2, 153.0], [6.3, 153.0], [6.4, 153.0], [6.5, 153.0], [6.6, 153.0], [6.7, 153.0], [6.8, 153.0], [6.9, 154.0], [7.0, 154.0], [7.1, 154.0], [7.2, 154.0], [7.3, 155.0], [7.4, 155.0], [7.5, 155.0], [7.6, 155.0], [7.7, 155.0], [7.8, 156.0], [7.9, 156.0], [8.0, 156.0], [8.1, 156.0], [8.2, 156.0], [8.3, 156.0], [8.4, 156.0], [8.5, 157.0], [8.6, 157.0], [8.7, 157.0], [8.8, 157.0], [8.9, 157.0], [9.0, 157.0], [9.1, 157.0], [9.2, 158.0], [9.3, 158.0], [9.4, 158.0], [9.5, 158.0], [9.6, 159.0], [9.7, 159.0], [9.8, 159.0], [9.9, 159.0], [10.0, 159.0], [10.1, 160.0], [10.2, 160.0], [10.3, 160.0], [10.4, 160.0], [10.5, 160.0], [10.6, 160.0], [10.7, 161.0], [10.8, 161.0], [10.9, 161.0], [11.0, 161.0], [11.1, 162.0], [11.2, 162.0], [11.3, 162.0], [11.4, 162.0], [11.5, 162.0], [11.6, 163.0], [11.7, 163.0], [11.8, 163.0], [11.9, 163.0], [12.0, 163.0], [12.1, 163.0], [12.2, 163.0], [12.3, 163.0], [12.4, 163.0], [12.5, 164.0], [12.6, 164.0], [12.7, 164.0], [12.8, 164.0], [12.9, 164.0], [13.0, 164.0], [13.1, 165.0], [13.2, 165.0], [13.3, 165.0], [13.4, 165.0], [13.5, 166.0], [13.6, 166.0], [13.7, 167.0], [13.8, 167.0], [13.9, 167.0], [14.0, 167.0], [14.1, 167.0], [14.2, 167.0], [14.3, 167.0], [14.4, 167.0], [14.5, 168.0], [14.6, 168.0], [14.7, 168.0], [14.8, 168.0], [14.9, 168.0], [15.0, 168.0], [15.1, 168.0], [15.2, 168.0], [15.3, 168.0], [15.4, 169.0], [15.5, 169.0], [15.6, 169.0], [15.7, 169.0], [15.8, 169.0], [15.9, 171.0], [16.0, 171.0], [16.1, 171.0], [16.2, 172.0], [16.3, 173.0], [16.4, 173.0], [16.5, 173.0], [16.6, 174.0], [16.7, 174.0], [16.8, 174.0], [16.9, 174.0], [17.0, 175.0], [17.1, 175.0], [17.2, 175.0], [17.3, 176.0], [17.4, 176.0], [17.5, 176.0], [17.6, 176.0], [17.7, 177.0], [17.8, 177.0], [17.9, 177.0], [18.0, 177.0], [18.1, 177.0], [18.2, 178.0], [18.3, 178.0], [18.4, 179.0], [18.5, 179.0], [18.6, 179.0], [18.7, 180.0], [18.8, 180.0], [18.9, 181.0], [19.0, 181.0], [19.1, 181.0], [19.2, 181.0], [19.3, 181.0], [19.4, 181.0], [19.5, 181.0], [19.6, 182.0], [19.7, 182.0], [19.8, 183.0], [19.9, 183.0], [20.0, 183.0], [20.1, 184.0], [20.2, 184.0], [20.3, 185.0], [20.4, 185.0], [20.5, 185.0], [20.6, 186.0], [20.7, 186.0], [20.8, 186.0], [20.9, 187.0], [21.0, 188.0], [21.1, 188.0], [21.2, 189.0], [21.3, 189.0], [21.4, 190.0], [21.5, 190.0], [21.6, 191.0], [21.7, 191.0], [21.8, 192.0], [21.9, 192.0], [22.0, 192.0], [22.1, 193.0], [22.2, 193.0], [22.3, 193.0], [22.4, 193.0], [22.5, 193.0], [22.6, 193.0], [22.7, 194.0], [22.8, 194.0], [22.9, 194.0], [23.0, 194.0], [23.1, 194.0], [23.2, 195.0], [23.3, 195.0], [23.4, 195.0], [23.5, 196.0], [23.6, 196.0], [23.7, 196.0], [23.8, 196.0], [23.9, 197.0], [24.0, 197.0], [24.1, 197.0], [24.2, 197.0], [24.3, 197.0], [24.4, 198.0], [24.5, 198.0], [24.6, 198.0], [24.7, 198.0], [24.8, 199.0], [24.9, 199.0], [25.0, 199.0], [25.1, 199.0], [25.2, 199.0], [25.3, 200.0], [25.4, 200.0], [25.5, 201.0], [25.6, 201.0], [25.7, 201.0], [25.8, 201.0], [25.9, 201.0], [26.0, 202.0], [26.1, 202.0], [26.2, 202.0], [26.3, 202.0], [26.4, 202.0], [26.5, 202.0], [26.6, 202.0], [26.7, 202.0], [26.8, 203.0], [26.9, 204.0], [27.0, 204.0], [27.1, 205.0], [27.2, 205.0], [27.3, 206.0], [27.4, 206.0], [27.5, 206.0], [27.6, 206.0], [27.7, 206.0], [27.8, 207.0], [27.9, 207.0], [28.0, 207.0], [28.1, 207.0], [28.2, 208.0], [28.3, 208.0], [28.4, 209.0], [28.5, 209.0], [28.6, 209.0], [28.7, 209.0], [28.8, 209.0], [28.9, 209.0], [29.0, 209.0], [29.1, 209.0], [29.2, 209.0], [29.3, 209.0], [29.4, 210.0], [29.5, 210.0], [29.6, 210.0], [29.7, 211.0], [29.8, 211.0], [29.9, 212.0], [30.0, 212.0], [30.1, 212.0], [30.2, 212.0], [30.3, 212.0], [30.4, 213.0], [30.5, 213.0], [30.6, 213.0], [30.7, 213.0], [30.8, 213.0], [30.9, 213.0], [31.0, 213.0], [31.1, 214.0], [31.2, 214.0], [31.3, 214.0], [31.4, 215.0], [31.5, 215.0], [31.6, 215.0], [31.7, 216.0], [31.8, 216.0], [31.9, 216.0], [32.0, 217.0], [32.1, 217.0], [32.2, 217.0], [32.3, 217.0], [32.4, 217.0], [32.5, 218.0], [32.6, 218.0], [32.7, 219.0], [32.8, 220.0], [32.9, 220.0], [33.0, 220.0], [33.1, 221.0], [33.2, 221.0], [33.3, 221.0], [33.4, 221.0], [33.5, 221.0], [33.6, 221.0], [33.7, 221.0], [33.8, 221.0], [33.9, 222.0], [34.0, 223.0], [34.1, 223.0], [34.2, 224.0], [34.3, 224.0], [34.4, 225.0], [34.5, 225.0], [34.6, 226.0], [34.7, 226.0], [34.8, 226.0], [34.9, 227.0], [35.0, 227.0], [35.1, 227.0], [35.2, 228.0], [35.3, 229.0], [35.4, 229.0], [35.5, 229.0], [35.6, 230.0], [35.7, 230.0], [35.8, 230.0], [35.9, 231.0], [36.0, 232.0], [36.1, 232.0], [36.2, 232.0], [36.3, 234.0], [36.4, 235.0], [36.5, 235.0], [36.6, 235.0], [36.7, 235.0], [36.8, 236.0], [36.9, 237.0], [37.0, 237.0], [37.1, 238.0], [37.2, 238.0], [37.3, 238.0], [37.4, 238.0], [37.5, 239.0], [37.6, 240.0], [37.7, 241.0], [37.8, 241.0], [37.9, 241.0], [38.0, 242.0], [38.1, 243.0], [38.2, 243.0], [38.3, 246.0], [38.4, 248.0], [38.5, 248.0], [38.6, 248.0], [38.7, 249.0], [38.8, 249.0], [38.9, 251.0], [39.0, 251.0], [39.1, 252.0], [39.2, 252.0], [39.3, 252.0], [39.4, 254.0], [39.5, 255.0], [39.6, 261.0], [39.7, 262.0], [39.8, 265.0], [39.9, 274.0], [40.0, 275.0], [40.1, 275.0], [40.2, 275.0], [40.3, 288.0], [40.4, 289.0], [40.5, 292.0], [40.6, 309.0], [40.7, 321.0], [40.8, 321.0], [40.9, 325.0], [41.0, 329.0], [41.1, 331.0], [41.2, 343.0], [41.3, 353.0], [41.4, 369.0], [41.5, 369.0], [41.6, 385.0], [41.7, 393.0], [41.8, 409.0], [41.9, 419.0], [42.0, 444.0], [42.1, 459.0], [42.2, 459.0], [42.3, 472.0], [42.4, 494.0], [42.5, 495.0], [42.6, 507.0], [42.7, 510.0], [42.8, 510.0], [42.9, 510.0], [43.0, 511.0], [43.1, 532.0], [43.2, 533.0], [43.3, 534.0], [43.4, 536.0], [43.5, 537.0], [43.6, 537.0], [43.7, 543.0], [43.8, 545.0], [43.9, 554.0], [44.0, 566.0], [44.1, 567.0], [44.2, 574.0], [44.3, 574.0], [44.4, 587.0], [44.5, 588.0], [44.6, 592.0], [44.7, 594.0], [44.8, 595.0], [44.9, 602.0], [45.0, 602.0], [45.1, 613.0], [45.2, 626.0], [45.3, 627.0], [45.4, 629.0], [45.5, 629.0], [45.6, 656.0], [45.7, 660.0], [45.8, 660.0], [45.9, 663.0], [46.0, 664.0], [46.1, 673.0], [46.2, 674.0], [46.3, 690.0], [46.4, 692.0], [46.5, 692.0], [46.6, 699.0], [46.7, 699.0], [46.8, 711.0], [46.9, 716.0], [47.0, 738.0], [47.1, 740.0], [47.2, 740.0], [47.3, 750.0], [47.4, 756.0], [47.5, 766.0], [47.6, 774.0], [47.7, 791.0], [47.8, 798.0], [47.9, 798.0], [48.0, 801.0], [48.1, 823.0], [48.2, 833.0], [48.3, 842.0], [48.4, 867.0], [48.5, 869.0], [48.6, 869.0], [48.7, 876.0], [48.8, 880.0], [48.9, 880.0], [49.0, 891.0], [49.1, 899.0], [49.2, 913.0], [49.3, 913.0], [49.4, 928.0], [49.5, 944.0], [49.6, 947.0], [49.7, 948.0], [49.8, 956.0], [49.9, 960.0], [50.0, 960.0], [50.1, 971.0], [50.2, 985.0], [50.3, 985.0], [50.4, 987.0], [50.5, 988.0], [50.6, 1015.0], [50.7, 1015.0], [50.8, 1015.0], [50.9, 1026.0], [51.0, 1041.0], [51.1, 1046.0], [51.2, 1047.0], [51.3, 1048.0], [51.4, 1052.0], [51.5, 1052.0], [51.6, 1057.0], [51.7, 1072.0], [51.8, 1082.0], [51.9, 1089.0], [52.0, 1098.0], [52.1, 1099.0], [52.2, 1099.0], [52.3, 1110.0], [52.4, 1125.0], [52.5, 1126.0], [52.6, 1128.0], [52.7, 1137.0], [52.8, 1141.0], [52.9, 1141.0], [53.0, 1144.0], [53.1, 1149.0], [53.2, 1164.0], [53.3, 1178.0], [53.4, 1178.0], [53.5, 1185.0], [53.6, 1185.0], [53.7, 1188.0], [53.8, 1197.0], [53.9, 1202.0], [54.0, 1202.0], [54.1, 1211.0], [54.2, 1227.0], [54.3, 1227.0], [54.4, 1230.0], [54.5, 1233.0], [54.6, 1241.0], [54.7, 1257.0], [54.8, 1258.0], [54.9, 1263.0], [55.0, 1263.0], [55.1, 1264.0], [55.2, 1268.0], [55.3, 1277.0], [55.4, 1284.0], [55.5, 1289.0], [55.6, 1291.0], [55.7, 1295.0], [55.8, 1295.0], [55.9, 1308.0], [56.0, 1320.0], [56.1, 1345.0], [56.2, 1347.0], [56.3, 1350.0], [56.4, 1350.0], [56.5, 1350.0], [56.6, 1362.0], [56.7, 1366.0], [56.8, 1378.0], [56.9, 1388.0], [57.0, 1393.0], [57.1, 1394.0], [57.2, 1394.0], [57.3, 1399.0], [57.4, 1400.0], [57.5, 1404.0], [57.6, 1409.0], [57.7, 1424.0], [57.8, 1452.0], [57.9, 1452.0], [58.0, 1455.0], [58.1, 1461.0], [58.2, 1462.0], [58.3, 1467.0], [58.4, 1471.0], [58.5, 1479.0], [58.6, 1479.0], [58.7, 1480.0], [58.8, 1498.0], [58.9, 1506.0], [59.0, 1508.0], [59.1, 1509.0], [59.2, 1521.0], [59.3, 1521.0], [59.4, 1528.0], [59.5, 1539.0], [59.6, 1540.0], [59.7, 1553.0], [59.8, 1569.0], [59.9, 1570.0], [60.0, 1570.0], [60.1, 1570.0], [60.2, 1585.0], [60.3, 1586.0], [60.4, 1595.0], [60.5, 1595.0], [60.6, 1600.0], [60.7, 1612.0], [60.8, 1612.0], [60.9, 1637.0], [61.0, 1646.0], [61.1, 1647.0], [61.2, 1677.0], [61.3, 1678.0], [61.4, 1701.0], [61.5, 1701.0], [61.6, 1703.0], [61.7, 1709.0], [61.8, 1712.0], [61.9, 1733.0], [62.0, 1734.0], [62.1, 1735.0], [62.2, 1735.0], [62.3, 1740.0], [62.4, 1748.0], [62.5, 1759.0], [62.6, 1769.0], [62.7, 1772.0], [62.8, 1787.0], [62.9, 1787.0], [63.0, 1827.0], [63.1, 1845.0], [63.2, 1860.0], [63.3, 1863.0], [63.4, 1867.0], [63.5, 1895.0], [63.6, 1895.0], [63.7, 1908.0], [63.8, 1946.0], [63.9, 1947.0], [64.0, 1948.0], [64.1, 1950.0], [64.2, 1962.0], [64.3, 1962.0], [64.4, 1967.0], [64.5, 1967.0], [64.6, 1971.0], [64.7, 1977.0], [64.8, 1981.0], [64.9, 1990.0], [65.0, 1990.0], [65.1, 1999.0], [65.2, 2007.0], [65.3, 2031.0], [65.4, 2038.0], [65.5, 2046.0], [65.6, 2067.0], [65.7, 2101.0], [65.8, 2101.0], [65.9, 2125.0], [66.0, 2130.0], [66.1, 2140.0], [66.2, 2148.0], [66.3, 2153.0], [66.4, 2162.0], [66.5, 2162.0], [66.6, 2163.0], [66.7, 2178.0], [66.8, 2179.0], [66.9, 2189.0], [67.0, 2192.0], [67.1, 2196.0], [67.2, 2196.0], [67.3, 2214.0], [67.4, 2222.0], [67.5, 2227.0], [67.6, 2230.0], [67.7, 2235.0], [67.8, 2240.0], [67.9, 2240.0], [68.0, 2242.0], [68.1, 2244.0], [68.2, 2251.0], [68.3, 2265.0], [68.4, 2269.0], [68.5, 2269.0], [68.6, 2269.0], [68.7, 2273.0], [68.8, 2282.0], [68.9, 2300.0], [69.0, 2301.0], [69.1, 2315.0], [69.2, 2317.0], [69.3, 2317.0], [69.4, 2318.0], [69.5, 2335.0], [69.6, 2343.0], [69.7, 2345.0], [69.8, 2381.0], [69.9, 2383.0], [70.0, 2383.0], [70.1, 2387.0], [70.2, 2392.0], [70.3, 2418.0], [70.4, 2442.0], [70.5, 2473.0], [70.6, 2474.0], [70.7, 2488.0], [70.8, 2488.0], [70.9, 2526.0], [71.0, 2544.0], [71.1, 2548.0], [71.2, 2551.0], [71.3, 2570.0], [71.4, 2605.0], [71.5, 2605.0], [71.6, 2610.0], [71.7, 2610.0], [71.8, 2619.0], [71.9, 2648.0], [72.0, 2674.0], [72.1, 2675.0], [72.2, 2675.0], [72.3, 2675.0], [72.4, 2691.0], [72.5, 2709.0], [72.6, 2721.0], [72.7, 2724.0], [72.8, 2743.0], [72.9, 2743.0], [73.0, 2787.0], [73.1, 2800.0], [73.2, 2830.0], [73.3, 2836.0], [73.4, 2862.0], [73.5, 2869.0], [73.6, 2869.0], [73.7, 2883.0], [73.8, 2894.0], [73.9, 2912.0], [74.0, 2913.0], [74.1, 2925.0], [74.2, 2960.0], [74.3, 2960.0], [74.4, 2995.0], [74.5, 3002.0], [74.6, 3003.0], [74.7, 3036.0], [74.8, 3047.0], [74.9, 3051.0], [75.0, 3051.0], [75.1, 3057.0], [75.2, 3059.0], [75.3, 3073.0], [75.4, 3082.0], [75.5, 3093.0], [75.6, 3096.0], [75.7, 3104.0], [75.8, 3104.0], [75.9, 3113.0], [76.0, 3113.0], [76.1, 3130.0], [76.2, 3148.0], [76.3, 3163.0], [76.4, 3192.0], [76.5, 3192.0], [76.6, 3193.0], [76.7, 3206.0], [76.8, 3228.0], [76.9, 3235.0], [77.0, 3243.0], [77.1, 3259.0], [77.2, 3259.0], [77.3, 3294.0], [77.4, 3370.0], [77.5, 3391.0], [77.6, 3406.0], [77.7, 3437.0], [77.8, 3467.0], [77.9, 3467.0], [78.0, 3474.0], [78.1, 3490.0], [78.2, 3504.0], [78.3, 3510.0], [78.4, 3510.0], [78.5, 3518.0], [78.6, 3518.0], [78.7, 3538.0], [78.8, 3583.0], [78.9, 3598.0], [79.0, 3600.0], [79.1, 3648.0], [79.2, 3665.0], [79.3, 3665.0], [79.4, 3693.0], [79.5, 3712.0], [79.6, 3805.0], [79.7, 3841.0], [79.8, 3905.0], [79.9, 3914.0], [80.0, 3914.0], [80.1, 4168.0], [80.2, 4188.0], [80.3, 4210.0], [80.4, 4216.0], [80.5, 4440.0], [80.6, 4445.0], [80.7, 4453.0], [80.8, 4453.0], [80.9, 4462.0], [81.0, 4479.0], [81.1, 4485.0], [81.2, 4502.0], [81.3, 4519.0], [81.4, 4571.0], [81.5, 4571.0], [81.6, 4581.0], [81.7, 4649.0], [81.8, 4656.0], [81.9, 4680.0], [82.0, 4684.0], [82.1, 4700.0], [82.2, 4700.0], [82.3, 4734.0], [82.4, 4738.0], [82.5, 4784.0], [82.6, 4839.0], [82.7, 4853.0], [82.8, 4862.0], [82.9, 4862.0], [83.0, 4876.0], [83.1, 4901.0], [83.2, 4915.0], [83.3, 4937.0], [83.4, 4962.0], [83.5, 4963.0], [83.6, 4963.0], [83.7, 5012.0], [83.8, 5028.0], [83.9, 5058.0], [84.0, 5060.0], [84.1, 5063.0], [84.2, 5077.0], [84.3, 5077.0], [84.4, 5079.0], [84.5, 5105.0], [84.6, 5106.0], [84.7, 5117.0], [84.8, 5123.0], [84.9, 5135.0], [85.0, 5135.0], [85.1, 5135.0], [85.2, 5151.0], [85.3, 5164.0], [85.4, 5167.0], [85.5, 5170.0], [85.6, 5182.0], [85.7, 5183.0], [85.8, 5183.0], [85.9, 5183.0], [86.0, 5192.0], [86.1, 5209.0], [86.2, 5234.0], [86.3, 5243.0], [86.4, 5243.0], [86.5, 5243.0], [86.6, 5255.0], [86.7, 5262.0], [86.8, 5283.0], [86.9, 5286.0], [87.0, 5338.0], [87.1, 5369.0], [87.2, 5369.0], [87.3, 5371.0], [87.4, 5383.0], [87.5, 5385.0], [87.6, 5391.0], [87.7, 5394.0], [87.8, 5412.0], [87.9, 5412.0], [88.0, 5427.0], [88.1, 5433.0], [88.2, 5438.0], [88.3, 5445.0], [88.4, 5478.0], [88.5, 5510.0], [88.6, 5510.0], [88.7, 5513.0], [88.8, 5514.0], [88.9, 5536.0], [89.0, 5557.0], [89.1, 5559.0], [89.2, 5568.0], [89.3, 5568.0], [89.4, 5576.0], [89.5, 5576.0], [89.6, 5577.0], [89.7, 5582.0], [89.8, 5584.0], [89.9, 5589.0], [90.0, 5589.0], [90.1, 5589.0], [90.2, 5598.0], [90.3, 5617.0], [90.4, 5629.0], [90.5, 5638.0], [90.6, 5643.0], [90.7, 5645.0], [90.8, 5645.0], [90.9, 5650.0], [91.0, 5653.0], [91.1, 5681.0], [91.2, 5710.0], [91.3, 5711.0], [91.4, 5725.0], [91.5, 5725.0], [91.6, 5737.0], [91.7, 5738.0], [91.8, 5760.0], [91.9, 5768.0], [92.0, 5774.0], [92.1, 5775.0], [92.2, 5775.0], [92.3, 5778.0], [92.4, 5804.0], [92.5, 5804.0], [92.6, 5809.0], [92.7, 5817.0], [92.8, 5826.0], [92.9, 5826.0], [93.0, 5827.0], [93.1, 5832.0], [93.2, 5862.0], [93.3, 5868.0], [93.4, 5873.0], [93.5, 5898.0], [93.6, 5898.0], [93.7, 5905.0], [93.8, 5927.0], [93.9, 5930.0], [94.0, 5940.0], [94.1, 5945.0], [94.2, 5958.0], [94.3, 5958.0], [94.4, 5962.0], [94.5, 5963.0], [94.6, 5965.0], [94.7, 5980.0], [94.8, 6031.0], [94.9, 6035.0], [95.0, 6035.0], [95.1, 6038.0], [95.2, 6051.0], [95.3, 6064.0], [95.4, 6070.0], [95.5, 6084.0], [95.6, 6130.0], [95.7, 6160.0], [95.8, 6160.0], [95.9, 6191.0], [96.0, 6201.0], [96.1, 6214.0], [96.2, 6244.0], [96.3, 6273.0], [96.4, 6274.0], [96.5, 6274.0], [96.6, 6279.0], [96.7, 6287.0], [96.8, 6300.0], [96.9, 6303.0], [97.0, 6329.0], [97.1, 6333.0], [97.2, 6333.0], [97.3, 6338.0], [97.4, 6344.0], [97.5, 6347.0], [97.6, 6362.0], [97.7, 6387.0], [97.8, 6387.0], [97.9, 6387.0], [98.0, 6397.0], [98.1, 6413.0], [98.2, 6428.0], [98.3, 6446.0], [98.4, 6457.0], [98.5, 6472.0], [98.6, 6472.0], [98.7, 6504.0], [98.8, 6508.0], [98.9, 6552.0], [99.0, 6553.0], [99.1, 6603.0], [99.2, 6706.0], [99.3, 6706.0], [99.4, 6739.0], [99.5, 6903.0], [99.6, 6919.0], [99.7, 7405.0], [99.8, 7600.0], [99.9, 7802.0], [100.0, 7802.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[0.0, 18.0], [0.1, 18.0], [0.2, 18.0], [0.3, 19.0], [0.4, 19.0], [0.5, 19.0], [0.6, 19.0], [0.7, 19.0], [0.8, 19.0], [0.9, 19.0], [1.0, 19.0], [1.1, 19.0], [1.2, 19.0], [1.3, 19.0], [1.4, 19.0], [1.5, 19.0], [1.6, 19.0], [1.7, 19.0], [1.8, 19.0], [1.9, 19.0], [2.0, 19.0], [2.1, 19.0], [2.2, 19.0], [2.3, 19.0], [2.4, 19.0], [2.5, 19.0], [2.6, 19.0], [2.7, 19.0], [2.8, 19.0], [2.9, 19.0], [3.0, 19.0], [3.1, 19.0], [3.2, 19.0], [3.3, 19.0], [3.4, 19.0], [3.5, 19.0], [3.6, 19.0], [3.7, 19.0], [3.8, 19.0], [3.9, 19.0], [4.0, 20.0], [4.1, 20.0], [4.2, 20.0], [4.3, 20.0], [4.4, 20.0], [4.5, 20.0], [4.6, 20.0], [4.7, 20.0], [4.8, 20.0], [4.9, 20.0], [5.0, 20.0], [5.1, 20.0], [5.2, 20.0], [5.3, 20.0], [5.4, 20.0], [5.5, 20.0], [5.6, 20.0], [5.7, 20.0], [5.8, 20.0], [5.9, 20.0], [6.0, 20.0], [6.1, 20.0], [6.2, 20.0], [6.3, 20.0], [6.4, 20.0], [6.5, 20.0], [6.6, 20.0], [6.7, 20.0], [6.8, 20.0], [6.9, 20.0], [7.0, 20.0], [7.1, 20.0], [7.2, 20.0], [7.3, 20.0], [7.4, 20.0], [7.5, 20.0], [7.6, 20.0], [7.7, 20.0], [7.8, 20.0], [7.9, 20.0], [8.0, 20.0], [8.1, 20.0], [8.2, 20.0], [8.3, 20.0], [8.4, 20.0], [8.5, 20.0], [8.6, 20.0], [8.7, 20.0], [8.8, 20.0], [8.9, 20.0], [9.0, 20.0], [9.1, 20.0], [9.2, 20.0], [9.3, 20.0], [9.4, 20.0], [9.5, 20.0], [9.6, 20.0], [9.7, 20.0], [9.8, 20.0], [9.9, 20.0], [10.0, 20.0], [10.1, 20.0], [10.2, 20.0], [10.3, 20.0], [10.4, 20.0], [10.5, 20.0], [10.6, 20.0], [10.7, 20.0], [10.8, 20.0], [10.9, 20.0], [11.0, 20.0], [11.1, 20.0], [11.2, 20.0], [11.3, 20.0], [11.4, 20.0], [11.5, 20.0], [11.6, 20.0], [11.7, 20.0], [11.8, 21.0], [11.9, 21.0], [12.0, 21.0], [12.1, 21.0], [12.2, 21.0], [12.3, 21.0], [12.4, 21.0], [12.5, 21.0], [12.6, 21.0], [12.7, 21.0], [12.8, 21.0], [12.9, 21.0], [13.0, 21.0], [13.1, 21.0], [13.2, 21.0], [13.3, 21.0], [13.4, 21.0], [13.5, 21.0], [13.6, 21.0], [13.7, 21.0], [13.8, 21.0], [13.9, 21.0], [14.0, 21.0], [14.1, 21.0], [14.2, 21.0], [14.3, 21.0], [14.4, 21.0], [14.5, 21.0], [14.6, 21.0], [14.7, 21.0], [14.8, 21.0], [14.9, 21.0], [15.0, 21.0], [15.1, 21.0], [15.2, 21.0], [15.3, 21.0], [15.4, 21.0], [15.5, 21.0], [15.6, 21.0], [15.7, 21.0], [15.8, 21.0], [15.9, 21.0], [16.0, 21.0], [16.1, 21.0], [16.2, 21.0], [16.3, 21.0], [16.4, 21.0], [16.5, 21.0], [16.6, 21.0], [16.7, 21.0], [16.8, 21.0], [16.9, 21.0], [17.0, 21.0], [17.1, 21.0], [17.2, 21.0], [17.3, 21.0], [17.4, 21.0], [17.5, 21.0], [17.6, 21.0], [17.7, 21.0], [17.8, 21.0], [17.9, 21.0], [18.0, 21.0], [18.1, 21.0], [18.2, 21.0], [18.3, 21.0], [18.4, 21.0], [18.5, 21.0], [18.6, 21.0], [18.7, 21.0], [18.8, 21.0], [18.9, 21.0], [19.0, 21.0], [19.1, 21.0], [19.2, 21.0], [19.3, 21.0], [19.4, 21.0], [19.5, 21.0], [19.6, 21.0], [19.7, 22.0], [19.8, 22.0], [19.9, 22.0], [20.0, 22.0], [20.1, 22.0], [20.2, 22.0], [20.3, 22.0], [20.4, 22.0], [20.5, 22.0], [20.6, 22.0], [20.7, 22.0], [20.8, 22.0], [20.9, 22.0], [21.0, 22.0], [21.1, 22.0], [21.2, 22.0], [21.3, 22.0], [21.4, 22.0], [21.5, 22.0], [21.6, 22.0], [21.7, 22.0], [21.8, 22.0], [21.9, 22.0], [22.0, 22.0], [22.1, 22.0], [22.2, 22.0], [22.3, 22.0], [22.4, 22.0], [22.5, 22.0], [22.6, 22.0], [22.7, 22.0], [22.8, 22.0], [22.9, 22.0], [23.0, 22.0], [23.1, 22.0], [23.2, 22.0], [23.3, 22.0], [23.4, 22.0], [23.5, 22.0], [23.6, 22.0], [23.7, 22.0], [23.8, 22.0], [23.9, 22.0], [24.0, 22.0], [24.1, 22.0], [24.2, 22.0], [24.3, 22.0], [24.4, 22.0], [24.5, 22.0], [24.6, 22.0], [24.7, 22.0], [24.8, 22.0], [24.9, 22.0], [25.0, 22.0], [25.1, 22.0], [25.2, 22.0], [25.3, 22.0], [25.4, 22.0], [25.5, 23.0], [25.6, 23.0], [25.7, 23.0], [25.8, 23.0], [25.9, 23.0], [26.0, 23.0], [26.1, 23.0], [26.2, 23.0], [26.3, 23.0], [26.4, 23.0], [26.5, 23.0], [26.6, 23.0], [26.7, 23.0], [26.8, 23.0], [26.9, 23.0], [27.0, 23.0], [27.1, 23.0], [27.2, 23.0], [27.3, 23.0], [27.4, 23.0], [27.5, 23.0], [27.6, 23.0], [27.7, 23.0], [27.8, 23.0], [27.9, 23.0], [28.0, 23.0], [28.1, 23.0], [28.2, 23.0], [28.3, 23.0], [28.4, 23.0], [28.5, 23.0], [28.6, 23.0], [28.7, 23.0], [28.8, 23.0], [28.9, 23.0], [29.0, 24.0], [29.1, 24.0], [29.2, 24.0], [29.3, 24.0], [29.4, 24.0], [29.5, 24.0], [29.6, 24.0], [29.7, 24.0], [29.8, 24.0], [29.9, 24.0], [30.0, 24.0], [30.1, 24.0], [30.2, 24.0], [30.3, 24.0], [30.4, 24.0], [30.5, 24.0], [30.6, 24.0], [30.7, 24.0], [30.8, 24.0], [30.9, 24.0], [31.0, 24.0], [31.1, 24.0], [31.2, 24.0], [31.3, 24.0], [31.4, 24.0], [31.5, 24.0], [31.6, 24.0], [31.7, 24.0], [31.8, 24.0], [31.9, 24.0], [32.0, 24.0], [32.1, 24.0], [32.2, 24.0], [32.3, 24.0], [32.4, 24.0], [32.5, 24.0], [32.6, 24.0], [32.7, 24.0], [32.8, 24.0], [32.9, 24.0], [33.0, 24.0], [33.1, 24.0], [33.2, 25.0], [33.3, 25.0], [33.4, 25.0], [33.5, 25.0], [33.6, 25.0], [33.7, 25.0], [33.8, 25.0], [33.9, 25.0], [34.0, 25.0], [34.1, 25.0], [34.2, 25.0], [34.3, 25.0], [34.4, 25.0], [34.5, 25.0], [34.6, 25.0], [34.7, 25.0], [34.8, 25.0], [34.9, 25.0], [35.0, 25.0], [35.1, 25.0], [35.2, 25.0], [35.3, 26.0], [35.4, 26.0], [35.5, 26.0], [35.6, 26.0], [35.7, 26.0], [35.8, 26.0], [35.9, 26.0], [36.0, 26.0], [36.1, 26.0], [36.2, 26.0], [36.3, 26.0], [36.4, 27.0], [36.5, 27.0], [36.6, 27.0], [36.7, 27.0], [36.8, 27.0], [36.9, 27.0], [37.0, 27.0], [37.1, 27.0], [37.2, 27.0], [37.3, 27.0], [37.4, 27.0], [37.5, 27.0], [37.6, 27.0], [37.7, 27.0], [37.8, 27.0], [37.9, 27.0], [38.0, 27.0], [38.1, 28.0], [38.2, 28.0], [38.3, 28.0], [38.4, 28.0], [38.5, 28.0], [38.6, 28.0], [38.7, 28.0], [38.8, 28.0], [38.9, 28.0], [39.0, 28.0], [39.1, 28.0], [39.2, 28.0], [39.3, 28.0], [39.4, 28.0], [39.5, 28.0], [39.6, 28.0], [39.7, 28.0], [39.8, 28.0], [39.9, 29.0], [40.0, 29.0], [40.1, 29.0], [40.2, 29.0], [40.3, 29.0], [40.4, 29.0], [40.5, 29.0], [40.6, 30.0], [40.7, 30.0], [40.8, 30.0], [40.9, 30.0], [41.0, 30.0], [41.1, 31.0], [41.2, 31.0], [41.3, 31.0], [41.4, 31.0], [41.5, 31.0], [41.6, 32.0], [41.7, 32.0], [41.8, 32.0], [41.9, 32.0], [42.0, 32.0], [42.1, 33.0], [42.2, 33.0], [42.3, 33.0], [42.4, 33.0], [42.5, 33.0], [42.6, 33.0], [42.7, 33.0], [42.8, 34.0], [42.9, 34.0], [43.0, 34.0], [43.1, 34.0], [43.2, 34.0], [43.3, 35.0], [43.4, 35.0], [43.5, 35.0], [43.6, 35.0], [43.7, 35.0], [43.8, 36.0], [43.9, 36.0], [44.0, 36.0], [44.1, 36.0], [44.2, 36.0], [44.3, 36.0], [44.4, 37.0], [44.5, 38.0], [44.6, 38.0], [44.7, 40.0], [44.8, 41.0], [44.9, 43.0], [45.0, 43.0], [45.1, 44.0], [45.2, 45.0], [45.3, 45.0], [45.4, 45.0], [45.5, 46.0], [45.6, 46.0], [45.7, 46.0], [45.8, 46.0], [45.9, 49.0], [46.0, 50.0], [46.1, 51.0], [46.2, 52.0], [46.3, 54.0], [46.4, 57.0], [46.5, 57.0], [46.6, 57.0], [46.7, 61.0], [46.8, 65.0], [46.9, 69.0], [47.0, 71.0], [47.1, 72.0], [47.2, 72.0], [47.3, 75.0], [47.4, 83.0], [47.5, 83.0], [47.6, 84.0], [47.7, 85.0], [47.8, 90.0], [47.9, 90.0], [48.0, 102.0], [48.1, 105.0], [48.2, 108.0], [48.3, 109.0], [48.4, 119.0], [48.5, 126.0], [48.6, 126.0], [48.7, 130.0], [48.8, 137.0], [48.9, 146.0], [49.0, 149.0], [49.1, 150.0], [49.2, 161.0], [49.3, 161.0], [49.4, 169.0], [49.5, 177.0], [49.6, 183.0], [49.7, 184.0], [49.8, 192.0], [49.9, 193.0], [50.0, 193.0], [50.1, 198.0], [50.2, 200.0], [50.3, 201.0], [50.4, 202.0], [50.5, 204.0], [50.6, 211.0], [50.7, 211.0], [50.8, 211.0], [50.9, 217.0], [51.0, 220.0], [51.1, 230.0], [51.2, 240.0], [51.3, 249.0], [51.4, 262.0], [51.5, 262.0], [51.6, 268.0], [51.7, 268.0], [51.8, 270.0], [51.9, 273.0], [52.0, 276.0], [52.1, 294.0], [52.2, 294.0], [52.3, 297.0], [52.4, 307.0], [52.5, 317.0], [52.6, 326.0], [52.7, 336.0], [52.8, 345.0], [52.9, 345.0], [53.0, 349.0], [53.1, 352.0], [53.2, 371.0], [53.3, 377.0], [53.4, 379.0], [53.5, 382.0], [53.6, 382.0], [53.7, 382.0], [53.8, 426.0], [53.9, 430.0], [54.0, 437.0], [54.1, 437.0], [54.2, 437.0], [54.3, 437.0], [54.4, 450.0], [54.5, 458.0], [54.6, 459.0], [54.7, 461.0], [54.8, 469.0], [54.9, 485.0], [55.0, 485.0], [55.1, 509.0], [55.2, 541.0], [55.3, 544.0], [55.4, 567.0], [55.5, 570.0], [55.6, 585.0], [55.7, 601.0], [55.8, 601.0], [55.9, 615.0], [56.0, 637.0], [56.1, 651.0], [56.2, 653.0], [56.3, 675.0], [56.4, 676.0], [56.5, 676.0], [56.6, 679.0], [56.7, 688.0], [56.8, 709.0], [56.9, 741.0], [57.0, 759.0], [57.1, 773.0], [57.2, 773.0], [57.3, 788.0], [57.4, 823.0], [57.5, 850.0], [57.6, 887.0], [57.7, 895.0], [57.8, 909.0], [57.9, 909.0], [58.0, 914.0], [58.1, 929.0], [58.2, 957.0], [58.3, 974.0], [58.4, 1027.0], [58.5, 1060.0], [58.6, 1060.0], [58.7, 1062.0], [58.8, 1077.0], [58.9, 1077.0], [59.0, 1104.0], [59.1, 1141.0], [59.2, 1164.0], [59.3, 1164.0], [59.4, 1222.0], [59.5, 1243.0], [59.6, 1277.0], [59.7, 1306.0], [59.8, 1312.0], [59.9, 1334.0], [60.0, 1334.0], [60.1, 1350.0], [60.2, 1374.0], [60.3, 1439.0], [60.4, 1454.0], [60.5, 1472.0], [60.6, 1476.0], [60.7, 1498.0], [60.8, 1498.0], [60.9, 1500.0], [61.0, 1505.0], [61.1, 1533.0], [61.2, 1566.0], [61.3, 1582.0], [61.4, 1584.0], [61.5, 1584.0], [61.6, 1591.0], [61.7, 1611.0], [61.8, 1625.0], [61.9, 1663.0], [62.0, 1673.0], [62.1, 1682.0], [62.2, 1682.0], [62.3, 1701.0], [62.4, 1705.0], [62.5, 1722.0], [62.6, 1729.0], [62.7, 1740.0], [62.8, 1754.0], [62.9, 1754.0], [63.0, 1769.0], [63.1, 1783.0], [63.2, 1784.0], [63.3, 1808.0], [63.4, 1814.0], [63.5, 1828.0], [63.6, 1828.0], [63.7, 1830.0], [63.8, 1864.0], [63.9, 1874.0], [64.0, 1876.0], [64.1, 1878.0], [64.2, 1907.0], [64.3, 1907.0], [64.4, 1936.0], [64.5, 1958.0], [64.6, 1967.0], [64.7, 1986.0], [64.8, 1999.0], [64.9, 2030.0], [65.0, 2030.0], [65.1, 2062.0], [65.2, 2074.0], [65.3, 2110.0], [65.4, 2128.0], [65.5, 2155.0], [65.6, 2189.0], [65.7, 2205.0], [65.8, 2205.0], [65.9, 2233.0], [66.0, 2250.0], [66.1, 2281.0], [66.2, 2315.0], [66.3, 2332.0], [66.4, 2357.0], [66.5, 2357.0], [66.6, 2378.0], [66.7, 2408.0], [66.8, 2438.0], [66.9, 2438.0], [67.0, 2450.0], [67.1, 2458.0], [67.2, 2458.0], [67.3, 2485.0], [67.4, 2488.0], [67.5, 2523.0], [67.6, 2538.0], [67.7, 2553.0], [67.8, 2574.0], [67.9, 2574.0], [68.0, 2597.0], [68.1, 2599.0], [68.2, 2624.0], [68.3, 2644.0], [68.4, 2653.0], [68.5, 2682.0], [68.6, 2682.0], [68.7, 2688.0], [68.8, 2720.0], [68.9, 2733.0], [69.0, 2775.0], [69.1, 2800.0], [69.2, 2839.0], [69.3, 2839.0], [69.4, 2859.0], [69.5, 2908.0], [69.6, 2988.0], [69.7, 2996.0], [69.8, 3019.0], [69.9, 3027.0], [70.0, 3027.0], [70.1, 3033.0], [70.2, 3062.0], [70.3, 3090.0], [70.4, 3109.0], [70.5, 3162.0], [70.6, 3183.0], [70.7, 3220.0], [70.8, 3220.0], [70.9, 3220.0], [71.0, 3228.0], [71.1, 3253.0], [71.2, 3280.0], [71.3, 3294.0], [71.4, 3298.0], [71.5, 3298.0], [71.6, 3298.0], [71.7, 3335.0], [71.8, 3337.0], [71.9, 3361.0], [72.0, 3380.0], [72.1, 3387.0], [72.2, 3387.0], [72.3, 3403.0], [72.4, 3412.0], [72.5, 3426.0], [72.6, 3460.0], [72.7, 3484.0], [72.8, 3507.0], [72.9, 3507.0], [73.0, 3552.0], [73.1, 3597.0], [73.2, 3599.0], [73.3, 3637.0], [73.4, 3643.0], [73.5, 3687.0], [73.6, 3687.0], [73.7, 3713.0], [73.8, 3756.0], [73.9, 3775.0], [74.0, 3803.0], [74.1, 3807.0], [74.2, 3822.0], [74.3, 3822.0], [74.4, 3827.0], [74.5, 3856.0], [74.6, 3866.0], [74.7, 3889.0], [74.8, 3892.0], [74.9, 3925.0], [75.0, 3925.0], [75.1, 3976.0], [75.2, 3979.0], [75.3, 4010.0], [75.4, 4029.0], [75.5, 4030.0], [75.6, 4039.0], [75.7, 4042.0], [75.8, 4042.0], [75.9, 4063.0], [76.0, 4085.0], [76.1, 4133.0], [76.2, 4181.0], [76.3, 4216.0], [76.4, 4223.0], [76.5, 4223.0], [76.6, 4242.0], [76.7, 4250.0], [76.8, 4278.0], [76.9, 4288.0], [77.0, 4307.0], [77.1, 4338.0], [77.2, 4338.0], [77.3, 4380.0], [77.4, 4409.0], [77.5, 4432.0], [77.6, 4445.0], [77.7, 4464.0], [77.8, 4481.0], [77.9, 4481.0], [78.0, 4499.0], [78.1, 4506.0], [78.2, 4520.0], [78.3, 4527.0], [78.4, 4534.0], [78.5, 4538.0], [78.6, 4538.0], [78.7, 4573.0], [78.8, 4587.0], [78.9, 4590.0], [79.0, 4604.0], [79.1, 4619.0], [79.2, 4619.0], [79.3, 4619.0], [79.4, 4635.0], [79.5, 4645.0], [79.6, 4651.0], [79.7, 4654.0], [79.8, 4659.0], [79.9, 4683.0], [80.0, 4683.0], [80.1, 4693.0], [80.2, 4700.0], [80.3, 4701.0], [80.4, 4711.0], [80.5, 4727.0], [80.6, 4737.0], [80.7, 4746.0], [80.8, 4746.0], [80.9, 4755.0], [81.0, 4779.0], [81.1, 4789.0], [81.2, 4791.0], [81.3, 4808.0], [81.4, 4816.0], [81.5, 4816.0], [81.6, 4818.0], [81.7, 4831.0], [81.8, 4846.0], [81.9, 4852.0], [82.0, 4864.0], [82.1, 4875.0], [82.2, 4875.0], [82.3, 4886.0], [82.4, 4893.0], [82.5, 4894.0], [82.6, 4896.0], [82.7, 4901.0], [82.8, 4902.0], [82.9, 4902.0], [83.0, 4902.0], [83.1, 4903.0], [83.2, 4909.0], [83.3, 4916.0], [83.4, 4924.0], [83.5, 4928.0], [83.6, 4928.0], [83.7, 4945.0], [83.8, 4949.0], [83.9, 4949.0], [84.0, 4985.0], [84.1, 4995.0], [84.2, 4996.0], [84.3, 4996.0], [84.4, 5017.0], [84.5, 5023.0], [84.6, 5034.0], [84.7, 5037.0], [84.8, 5038.0], [84.9, 5040.0], [85.0, 5040.0], [85.1, 5044.0], [85.2, 5055.0], [85.3, 5068.0], [85.4, 5069.0], [85.5, 5074.0], [85.6, 5077.0], [85.7, 5081.0], [85.8, 5081.0], [85.9, 5085.0], [86.0, 5089.0], [86.1, 5091.0], [86.2, 5120.0], [86.3, 5145.0], [86.4, 5149.0], [86.5, 5149.0], [86.6, 5157.0], [86.7, 5185.0], [86.8, 5189.0], [86.9, 5200.0], [87.0, 5206.0], [87.1, 5209.0], [87.2, 5209.0], [87.3, 5243.0], [87.4, 5260.0], [87.5, 5271.0], [87.6, 5277.0], [87.7, 5280.0], [87.8, 5286.0], [87.9, 5286.0], [88.0, 5299.0], [88.1, 5302.0], [88.2, 5303.0], [88.3, 5310.0], [88.4, 5313.0], [88.5, 5333.0], [88.6, 5333.0], [88.7, 5342.0], [88.8, 5350.0], [88.9, 5354.0], [89.0, 5364.0], [89.1, 5372.0], [89.2, 5389.0], [89.3, 5389.0], [89.4, 5412.0], [89.5, 5416.0], [89.6, 5420.0], [89.7, 5430.0], [89.8, 5436.0], [89.9, 5446.0], [90.0, 5446.0], [90.1, 5467.0], [90.2, 5469.0], [90.3, 5478.0], [90.4, 5491.0], [90.5, 5508.0], [90.6, 5513.0], [90.7, 5531.0], [90.8, 5531.0], [90.9, 5541.0], [91.0, 5543.0], [91.1, 5560.0], [91.2, 5562.0], [91.3, 5569.0], [91.4, 5571.0], [91.5, 5571.0], [91.6, 5589.0], [91.7, 5606.0], [91.8, 5617.0], [91.9, 5617.0], [92.0, 5638.0], [92.1, 5638.0], [92.2, 5638.0], [92.3, 5661.0], [92.4, 5663.0], [92.5, 5668.0], [92.6, 5700.0], [92.7, 5710.0], [92.8, 5739.0], [92.9, 5739.0], [93.0, 5745.0], [93.1, 5765.0], [93.2, 5770.0], [93.3, 5770.0], [93.4, 5776.0], [93.5, 5780.0], [93.6, 5780.0], [93.7, 5789.0], [93.8, 5806.0], [93.9, 5813.0], [94.0, 5819.0], [94.1, 5834.0], [94.2, 5857.0], [94.3, 5857.0], [94.4, 5862.0], [94.5, 5863.0], [94.6, 5864.0], [94.7, 5884.0], [94.8, 5902.0], [94.9, 5903.0], [95.0, 5903.0], [95.1, 5914.0], [95.2, 5935.0], [95.3, 5939.0], [95.4, 5959.0], [95.5, 5963.0], [95.6, 5980.0], [95.7, 5988.0], [95.8, 5988.0], [95.9, 6011.0], [96.0, 6042.0], [96.1, 6076.0], [96.2, 6105.0], [96.3, 6110.0], [96.4, 6134.0], [96.5, 6134.0], [96.6, 6162.0], [96.7, 6196.0], [96.8, 6214.0], [96.9, 6222.0], [97.0, 6227.0], [97.1, 6255.0], [97.2, 6255.0], [97.3, 6265.0], [97.4, 6282.0], [97.5, 6313.0], [97.6, 6339.0], [97.7, 6366.0], [97.8, 6384.0], [97.9, 6384.0], [98.0, 6387.0], [98.1, 6399.0], [98.2, 6434.0], [98.3, 6450.0], [98.4, 6504.0], [98.5, 6511.0], [98.6, 6511.0], [98.7, 6541.0], [98.8, 6588.0], [98.9, 6617.0], [99.0, 6627.0], [99.1, 6646.0], [99.2, 6707.0], [99.3, 6707.0], [99.4, 6710.0], [99.5, 6711.0], [99.6, 6726.0], [99.7, 6810.0], [99.8, 6954.0], [99.9, 7993.0], [100.0, 7993.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 412.0, "series": [{"data": [[600.0, 16.0], [700.0, 10.0], [800.0, 11.0], [900.0, 12.0], [1000.0, 14.0], [1100.0, 14.0], [1200.0, 17.0], [1300.0, 13.0], [1400.0, 13.0], [1500.0, 15.0], [1600.0, 7.0], [1700.0, 13.0], [1800.0, 6.0], [1900.0, 13.0], [2000.0, 5.0], [2100.0, 13.0], [2200.0, 14.0], [2300.0, 12.0], [2400.0, 5.0], [2500.0, 5.0], [2600.0, 9.0], [2800.0, 7.0], [2700.0, 5.0], [2900.0, 5.0], [3000.0, 11.0], [3100.0, 8.0], [3200.0, 6.0], [3300.0, 2.0], [3400.0, 5.0], [3500.0, 7.0], [3700.0, 1.0], [3600.0, 4.0], [3800.0, 2.0], [3900.0, 2.0], [4200.0, 2.0], [4100.0, 2.0], [4500.0, 4.0], [4600.0, 4.0], [4400.0, 6.0], [4700.0, 4.0], [4800.0, 4.0], [5100.0, 14.0], [4900.0, 5.0], [5000.0, 7.0], [5200.0, 8.0], [5300.0, 7.0], [5400.0, 6.0], [5600.0, 8.0], [5500.0, 15.0], [5800.0, 11.0], [5700.0, 10.0], [5900.0, 10.0], [6000.0, 7.0], [6100.0, 3.0], [6300.0, 11.0], [6200.0, 7.0], [6400.0, 5.0], [6500.0, 4.0], [6600.0, 1.0], [6900.0, 2.0], [6700.0, 2.0], [7400.0, 1.0], [7600.0, 1.0], [7800.0, 1.0], [100.0, 217.0], [200.0, 132.0], [300.0, 10.0], [400.0, 7.0], [500.0, 20.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[0.0, 412.0], [600.0, 9.0], [700.0, 5.0], [800.0, 4.0], [900.0, 5.0], [1000.0, 5.0], [1100.0, 3.0], [1200.0, 3.0], [1300.0, 5.0], [1400.0, 5.0], [1500.0, 7.0], [1600.0, 5.0], [1700.0, 9.0], [1800.0, 8.0], [1900.0, 6.0], [2000.0, 3.0], [2100.0, 4.0], [2200.0, 4.0], [2300.0, 4.0], [2400.0, 7.0], [2500.0, 6.0], [2600.0, 5.0], [2700.0, 3.0], [2800.0, 3.0], [2900.0, 3.0], [3000.0, 5.0], [3100.0, 3.0], [3200.0, 8.0], [3300.0, 5.0], [3400.0, 5.0], [3500.0, 4.0], [3600.0, 3.0], [3700.0, 3.0], [3800.0, 8.0], [3900.0, 3.0], [4000.0, 7.0], [4300.0, 3.0], [4200.0, 6.0], [4100.0, 2.0], [4400.0, 6.0], [4600.0, 10.0], [4500.0, 8.0], [4800.0, 12.0], [4700.0, 10.0], [4900.0, 14.0], [5000.0, 16.0], [5100.0, 6.0], [5200.0, 10.0], [5300.0, 11.0], [5600.0, 8.0], [5400.0, 10.0], [5500.0, 10.0], [5800.0, 9.0], [5700.0, 10.0], [5900.0, 9.0], [6100.0, 5.0], [6000.0, 3.0], [6300.0, 6.0], [6200.0, 6.0], [6600.0, 3.0], [6500.0, 4.0], [6400.0, 2.0], [6700.0, 4.0], [6800.0, 1.0], [6900.0, 1.0], [7900.0, 1.0], [100.0, 19.0], [200.0, 19.0], [300.0, 12.0], [400.0, 11.0], [500.0, 6.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 191.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 839.0, "series": [{"data": [[0.0, 839.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 191.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 690.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.654013823E12, "maxY": 2.0, "series": [{"data": [[1.6540138305E12, 1.5], [1.654013853E12, 1.3775510204081638], [1.654013856E12, 1.3785714285714288], [1.6540138335E12, 1.510204081632653], [1.6540138245E12, 1.5], [1.654013847E12, 1.5340909090909094], [1.6540138275E12, 1.5], [1.65401385E12, 1.282608695652174], [1.654013862E12, 1.5546218487394963], [1.6540138425E12, 1.5], [1.654013823E12, 1.5], [1.6540138365E12, 1.5], [1.654013859E12, 1.6842105263157894], [1.6540138395E12, 1.5], [1.6540138515E12, 1.6790123456790118], [1.654013832E12, 1.5], [1.6540138545E12, 2.0], [1.6540138455E12, 1.5222222222222226], [1.654013826E12, 1.5238095238095237], [1.6540138485E12, 1.5373134328358207], [1.654013829E12, 1.5151515151515151], [1.654013841E12, 1.5124999999999997], [1.6540138635E12, 1.0], [1.654013844E12, 1.5411764705882351], [1.654013835E12, 1.5], [1.654013838E12, 1.507246376811594], [1.6540138605E12, 1.4736842105263153]], "isOverall": false, "label": "parallel bzm - Parallel", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6540138635E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 20.475409836065577, "minX": 1.0, "maxY": 6711.0, "series": [{"data": [[2.0, 260.457627118644], [3.0, 291.0754716981132], [4.0, 284.86885245901635], [5.0, 310.65999999999997], [6.0, 323.3392857142857], [7.0, 326.64150943396226], [8.0, 899.4], [9.0, 1066.2857142857142], [10.0, 1350.8], [11.0, 1269.0], [12.0, 2121.666666666667], [13.0, 5768.0], [14.0, 1318.3333333333333], [15.0, 3265.0], [16.0, 3481.5], [17.0, 2208.666666666667], [18.0, 545.5], [19.0, 2340.166666666667], [20.0, 1161.4545454545455], [21.0, 2034.5], [22.0, 1615.4], [23.0, 1929.25], [24.0, 1677.3333333333335], [25.0, 2390.666666666667], [26.0, 3344.0], [27.0, 1587.7142857142858], [28.0, 839.1428571428572], [29.0, 3472.25], [30.0, 3691.0], [31.0, 2117.25], [33.0, 945.5], [32.0, 871.5], [35.0, 1013.5], [34.0, 1350.0], [39.0, 1137.0], [38.0, 1098.0], [41.0, 1528.0], [40.0, 1127.75], [43.0, 2364.166666666667], [42.0, 2361.4545454545455], [45.0, 985.3333333333334], [44.0, 1873.75], [47.0, 740.0], [49.0, 1227.375], [48.0, 1229.2], [51.0, 1264.0], [50.0, 1399.0], [52.0, 1558.75], [53.0, 1632.0], [55.0, 1494.3333333333333], [54.0, 1347.0], [57.0, 1474.0], [58.0, 1327.0], [63.0, 1424.2], [65.0, 1786.0], [67.0, 5804.0], [69.0, 2758.375], [71.0, 1967.0], [70.0, 2046.0], [75.0, 1264.0], [74.0, 4535.0], [78.0, 1680.857142857143], [77.0, 3824.8000000000006], [76.0, 5550.909090909091], [79.0, 6130.0], [81.0, 2506.0], [80.0, 1777.2222222222222], [83.0, 6102.75], [82.0, 5731.0], [86.0, 4070.75], [87.0, 4862.0], [91.0, 2192.0], [90.0, 2204.2], [89.0, 2148.0], [95.0, 2067.0], [94.0, 2746.5], [92.0, 2164.0], [99.0, 2479.5], [98.0, 2675.0], [96.0, 2474.0], [103.0, 2329.285714285714], [106.0, 1944.0], [107.0, 2227.375], [104.0, 2329.25], [109.0, 1940.1818181818182], [108.0, 1510.5], [110.0, 1867.0], [112.0, 2269.0], [113.0, 1637.0], [114.0, 2217.25], [115.0, 1943.6666666666667], [116.0, 1967.0], [117.0, 2548.0], [118.0, 2473.0], [119.0, 2648.0], [143.0, 3173.3333333333335], [146.0, 3362.0], [144.0, 3342.5], [151.0, 4876.5], [157.0, 3921.5555555555557], [159.0, 3243.0], [158.0, 2619.0], [153.0, 5307.407407407408], [152.0, 5539.8], [160.0, 3020.5294117647063], [174.0, 5424.923076923078], [172.0, 5318.0], [171.0, 4977.812499999999], [178.0, 3188.4285714285716], [179.0, 2381.0], [177.0, 5479.333333333333], [176.0, 4913.5], [199.0, 3510.0], [198.0, 3065.5], [197.0, 3100.0], [196.0, 3130.0], [194.0, 3331.0], [193.0, 3120.6666666666665], [195.0, 2869.0], [1.0, 900.2222222222222]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[56.161627906976726, 1888.0441860465132]], "isOverall": false, "label": "/api/statistics/neighbourhoods-Aggregated", "isController": false}, {"data": [[2.0, 20.475409836065577], [3.0, 20.936507936507937], [4.0, 46.0], [5.0, 22.862068965517242], [6.0, 24.057971014492765], [7.0, 25.57142857142857], [8.0, 28.25], [9.0, 28.333333333333332], [10.0, 25.5], [11.0, 33.75], [12.0, 33.0], [13.0, 33.0], [14.0, 31.333333333333332], [15.0, 68.66666666666667], [16.0, 37.0], [17.0, 97.25], [18.0, 116.4], [19.0, 138.33333333333334], [20.0, 135.26666666666668], [21.0, 51.75], [22.0, 167.2], [23.0, 382.0], [26.0, 261.85714285714283], [27.0, 183.61538461538458], [28.0, 48.0], [29.0, 57.0], [30.0, 316.7], [31.0, 1060.375], [32.0, 1098.875], [33.0, 3444.3333333333335], [35.0, 1843.3333333333335], [34.0, 4170.0], [37.0, 4310.166666666667], [36.0, 4069.0], [39.0, 5280.0], [38.0, 5560.0], [41.0, 628.8666666666666], [46.0, 1288.5], [47.0, 1306.0], [48.0, 1830.0], [49.0, 1206.6666666666667], [51.0, 1222.0], [50.0, 2310.0], [57.0, 5089.0], [61.0, 4534.0], [63.0, 4780.0], [62.0, 5589.0], [67.0, 5423.666666666666], [64.0, 5589.25925925926], [66.0, 5010.5], [65.0, 5463.0], [71.0, 1374.0], [70.0, 1439.0], [69.0, 1878.0], [68.0, 1527.0], [75.0, 1639.5], [74.0, 1701.0], [73.0, 1784.0], [72.0, 1479.5], [78.0, 1613.5], [77.0, 1679.0], [87.0, 2012.7142857142856], [84.0, 5263.0], [88.0, 2857.25], [90.0, 1947.0], [89.0, 2049.142857142857], [93.0, 6605.5], [92.0, 5307.0], [99.0, 2523.0], [98.0, 1923.0833333333335], [97.0, 2122.8571428571427], [96.0, 1603.0], [103.0, 3280.0], [102.0, 2624.0], [101.0, 3681.5], [100.0, 2538.0], [107.0, 2996.0], [106.0, 2898.0], [111.0, 2775.0], [110.0, 3127.5], [109.0, 2599.0], [115.0, 3087.6666666666665], [113.0, 2682.0], [112.0, 3337.0], [116.0, 2438.0], [123.0, 5083.0], [126.0, 5902.0], [135.0, 2984.5], [134.0, 4463.0], [132.0, 3946.4285714285716], [131.0, 3608.6666666666665], [130.0, 5596.0], [129.0, 5467.0], [128.0, 6076.0], [141.0, 3241.5], [138.0, 5065.875], [143.0, 6282.0], [140.0, 5375.857142857143], [139.0, 5512.0], [136.0, 5710.266666666666], [151.0, 5565.8], [148.0, 3466.0], [147.0, 4696.666666666667], [146.0, 5377.909090909091], [144.0, 3518.3333333333335], [149.0, 5999.0], [145.0, 5157.0], [159.0, 4163.0], [158.0, 4250.0], [157.0, 4845.5], [156.0, 5364.0], [154.0, 3802.75], [155.0, 6265.0], [153.0, 6711.0], [152.0, 6627.0], [167.0, 4380.0], [166.0, 4351.5], [164.0, 4181.0], [163.0, 4485.0], [160.0, 4042.0], [175.0, 4242.0], [174.0, 4846.8], [172.0, 4635.0], [170.0, 4066.6666666666665], [168.0, 4506.0], [171.0, 5300.0], [183.0, 4949.0], [182.0, 4870.0], [181.0, 4645.0], [180.0, 4737.5], [179.0, 4170.5], [178.0, 3892.0], [177.0, 5248.25], [191.0, 4029.0], [190.0, 5023.0], [189.0, 4346.5], [188.0, 4791.0], [187.0, 5074.0], [186.0, 4530.5], [185.0, 4756.0], [184.0, 5069.0], [199.0, 4403.0], [198.0, 3889.0], [197.0, 4534.5], [196.0, 4901.0], [194.0, 4961.5], [193.0, 4357.666666666667], [192.0, 4216.0], [1.0, 25.28571428571429]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}, {"data": [[54.06627906976742, 1788.2290697674416]], "isOverall": false, "label": "/api/listings?geojson=true-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 199.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 973.3333333333334, "minX": 1.654013823E12, "maxY": 4.1289436E7, "series": [{"data": [[1.6540138305E12, 7512000.0], [1.654013853E12, 2.5446341333333332E7], [1.654013856E12, 4.1289436E7], [1.6540138335E12, 1.0432875333333334E7], [1.6540138245E12, 2504000.0], [1.654013847E12, 1.9611918666666668E7], [1.6540138275E12, 5008000.0], [1.65401385E12, 5434493.333333333], [1.654013862E12, 2.7954463333333332E7], [1.6540138425E12, 1.7528E7], [1.654013823E12, 2086666.6666666667], [1.6540138365E12, 1.252E7], [1.654013859E12, 5023114.0], [1.6540138395E12, 1.5024E7], [1.6540138515E12, 7532610.0], [1.654013832E12, 9181333.333333334], [1.6540138545E12, 16488.0], [1.6540138455E12, 1.9612834666666668E7], [1.654013826E12, 4590208.666666667], [1.6540138485E12, 1.502171E7], [1.654013829E12, 7094208.666666667], [1.654013841E12, 1.7109750666666668E7], [1.6540138635E12, 13740.0], [1.654013844E12, 1.9194127333333332E7], [1.654013835E12, 1.1685333333333334E7], [1.654013838E12, 1.4606208666666666E7], [1.6540138605E12, 3.5872804666666664E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6540138305E12, 3504.0], [1.654013853E12, 9506.666666666666], [1.654013856E12, 13549.333333333334], [1.6540138335E12, 4768.0], [1.6540138245E12, 1168.0], [1.654013847E12, 8557.333333333334], [1.6540138275E12, 2336.0], [1.65401385E12, 4504.0], [1.654013862E12, 11562.666666666666], [1.6540138425E12, 8176.0], [1.654013823E12, 973.3333333333334], [1.6540138365E12, 5840.0], [1.654013859E12, 5592.0], [1.6540138395E12, 7008.0], [1.6540138515E12, 7944.0], [1.654013832E12, 4282.666666666667], [1.6540138545E12, 3552.0], [1.6540138455E12, 8754.666666666666], [1.654013826E12, 2042.6666666666667], [1.6540138485E12, 6514.666666666667], [1.654013829E12, 3210.6666666666665], [1.654013841E12, 7784.0], [1.6540138635E12, 2960.0], [1.654013844E12, 8264.0], [1.654013835E12, 5450.666666666667], [1.654013838E12, 6714.666666666667], [1.6540138605E12, 12893.333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6540138635E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 20.272727272727273, "minX": 1.654013823E12, "maxY": 6084.2333333333345, "series": [{"data": [[1.6540138305E12, 150.88888888888886], [1.654013853E12, 2261.2432432432433], [1.654013856E12, 3185.317073170732], [1.6540138335E12, 160.70833333333331], [1.6540138245E12, 148.16666666666669], [1.654013847E12, 948.731707317073], [1.6540138275E12, 150.66666666666669], [1.65401385E12, 1475.333333333333], [1.654013862E12, 5768.288461538461], [1.6540138425E12, 211.23809523809524], [1.654013823E12, 480.8], [1.6540138365E12, 174.83333333333331], [1.654013859E12, 5091.133333333332], [1.6540138395E12, 208.63888888888886], [1.6540138515E12, 1835.047619047619], [1.654013832E12, 158.6818181818182], [1.6540138545E12, 2803.8055555555547], [1.6540138455E12, 611.7906976744185], [1.654013826E12, 150.9], [1.6540138485E12, 1228.8709677419358], [1.654013829E12, 152.87499999999997], [1.654013841E12, 228.41025641025638], [1.6540138635E12, 6084.2333333333345], [1.654013844E12, 259.07692307692304], [1.654013835E12, 173.25], [1.654013838E12, 189.94117647058823], [1.6540138605E12, 5495.212765957446]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.6540138305E12, 20.555555555555557], [1.654013853E12, 2248.8524590163925], [1.654013856E12, 3930.151515151515], [1.6540138335E12, 20.8], [1.6540138245E12, 27.666666666666668], [1.654013847E12, 284.9361702127659], [1.6540138275E12, 20.416666666666664], [1.65401385E12, 1287.2307692307693], [1.654013862E12, 5352.746268656718], [1.6540138425E12, 23.928571428571434], [1.654013823E12, 326.4], [1.6540138365E12, 20.900000000000002], [1.654013859E12, 5610.416666666667], [1.6540138395E12, 22.91666666666667], [1.6540138515E12, 1616.111111111111], [1.654013832E12, 20.272727272727273], [1.6540138455E12, 103.40425531914896], [1.654013826E12, 21.818181818181817], [1.6540138485E12, 614.2500000000001], [1.654013829E12, 20.41176470588235], [1.654013841E12, 24.46341463414634], [1.654013844E12, 27.19565217391305], [1.654013835E12, 21.285714285714285], [1.654013838E12, 22.771428571428572], [1.6540138605E12, 5690.627906976743]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6540138635E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 19.181818181818183, "minX": 1.654013823E12, "maxY": 6084.2333333333345, "series": [{"data": [[1.6540138305E12, 150.88888888888886], [1.654013853E12, 2261.189189189189], [1.654013856E12, 3185.317073170732], [1.6540138335E12, 160.70833333333331], [1.6540138245E12, 148.0], [1.654013847E12, 948.7073170731705], [1.6540138275E12, 150.66666666666669], [1.65401385E12, 1475.272727272727], [1.654013862E12, 5768.26923076923], [1.6540138425E12, 211.21428571428572], [1.654013823E12, 480.2], [1.6540138365E12, 174.83333333333331], [1.654013859E12, 5091.0888888888885], [1.6540138395E12, 208.6111111111111], [1.6540138515E12, 1835.047619047619], [1.654013832E12, 158.63636363636363], [1.6540138545E12, 2803.8055555555547], [1.6540138455E12, 611.7906976744185], [1.654013826E12, 150.9], [1.6540138485E12, 1228.8709677419358], [1.654013829E12, 152.87499999999997], [1.654013841E12, 228.3589743589744], [1.6540138635E12, 6084.2333333333345], [1.654013844E12, 259.07692307692304], [1.654013835E12, 173.25], [1.654013838E12, 189.94117647058823], [1.6540138605E12, 5495.191489361701]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.6540138305E12, 19.38888888888889], [1.654013853E12, 1340.5901639344263], [1.654013856E12, 2125.888888888889], [1.6540138335E12, 19.759999999999998], [1.6540138245E12, 26.166666666666664], [1.654013847E12, 280.2127659574467], [1.6540138275E12, 19.25], [1.65401385E12, 989.9230769230769], [1.654013862E12, 5326.3432835820895], [1.6540138425E12, 22.690476190476197], [1.654013823E12, 321.0], [1.6540138365E12, 19.733333333333334], [1.654013859E12, 2604.833333333333], [1.6540138395E12, 21.86111111111111], [1.6540138515E12, 597.8888888888889], [1.654013832E12, 19.181818181818183], [1.6540138455E12, 94.23404255319151], [1.654013826E12, 20.818181818181817], [1.6540138485E12, 563.7777777777779], [1.654013829E12, 19.235294117647058], [1.654013841E12, 22.878048780487806], [1.654013844E12, 25.84782608695653], [1.654013835E12, 20.178571428571423], [1.654013838E12, 21.6], [1.6540138605E12, 4798.104651162787]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6540138635E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 5.636363636363636, "minX": 1.654013823E12, "maxY": 3546.7333333333336, "series": [{"data": [[1.6540138305E12, 5.777777777777779], [1.654013853E12, 679.2162162162164], [1.654013856E12, 802.0975609756098], [1.6540138335E12, 6.333333333333334], [1.6540138245E12, 5.833333333333333], [1.654013847E12, 81.56097560975608], [1.6540138275E12, 5.666666666666666], [1.65401385E12, 308.7272727272727], [1.654013862E12, 1930.2692307692312], [1.6540138425E12, 6.690476190476192], [1.654013823E12, 10.8], [1.6540138365E12, 6.3], [1.654013859E12, 1108.0444444444443], [1.6540138395E12, 6.166666666666667], [1.6540138515E12, 410.76190476190476], [1.654013832E12, 5.954545454545455], [1.6540138545E12, 659.2777777777777], [1.6540138455E12, 18.581395348837216], [1.654013826E12, 5.8], [1.6540138485E12, 237.93548387096777], [1.654013829E12, 5.875], [1.654013841E12, 7.230769230769232], [1.6540138635E12, 3546.7333333333336], [1.654013844E12, 7.205128205128205], [1.654013835E12, 6.107142857142858], [1.654013838E12, 6.529411764705883], [1.6540138605E12, 1189.4042553191487]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.6540138305E12, 5.833333333333333], [1.654013853E12, 471.0000000000001], [1.654013856E12, 758.0000000000001], [1.6540138335E12, 6.2], [1.6540138245E12, 6.166666666666667], [1.654013847E12, 174.93617021276594], [1.6540138275E12, 5.75], [1.65401385E12, 160.69230769230768], [1.654013862E12, 2869.507462686567], [1.6540138425E12, 6.928571428571431], [1.654013823E12, 11.0], [1.6540138365E12, 6.133333333333333], [1.654013859E12, 558.1666666666667], [1.6540138395E12, 6.666666666666666], [1.6540138515E12, 407.0555555555556], [1.654013832E12, 5.909090909090909], [1.6540138455E12, 39.12765957446808], [1.654013826E12, 5.636363636363636], [1.6540138485E12, 288.5833333333334], [1.654013829E12, 5.8235294117647065], [1.654013841E12, 7.073170731707318], [1.654013844E12, 7.739130434782608], [1.654013835E12, 6.107142857142857], [1.654013838E12, 7.0285714285714285], [1.6540138605E12, 1226.1627906976748]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6540138635E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 18.0, "minX": 1.654013823E12, "maxY": 7993.0, "series": [{"data": [[1.6540138305E12, 164.0], [1.654013853E12, 3412.0], [1.654013856E12, 5074.0], [1.6540138335E12, 182.0], [1.6540138245E12, 156.0], [1.654013847E12, 1479.0], [1.6540138275E12, 158.0], [1.65401385E12, 2007.0], [1.654013862E12, 7993.0], [1.6540138425E12, 249.0], [1.654013823E12, 944.0], [1.6540138365E12, 204.0], [1.654013859E12, 6387.0], [1.6540138395E12, 241.0], [1.6540138515E12, 3073.0], [1.654013832E12, 173.0], [1.6540138545E12, 3914.0], [1.6540138455E12, 960.0], [1.654013826E12, 161.0], [1.6540138485E12, 1600.0], [1.654013829E12, 160.0], [1.654013841E12, 262.0], [1.6540138635E12, 6919.0], [1.654013844E12, 385.0], [1.654013835E12, 199.0], [1.654013838E12, 218.0], [1.6540138605E12, 6810.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6540138305E12, 154.3], [1.654013853E12, 3029.4], [1.654013856E12, 4813.5], [1.6540138335E12, 168.0], [1.6540138245E12, 154.20000000000002], [1.654013847E12, 1147.1000000000006], [1.6540138275E12, 157.0], [1.65401385E12, 1866.3], [1.654013862E12, 6347.0], [1.6540138425E12, 220.5], [1.654013823E12, 926.9000000000001], [1.6540138365E12, 184.6], [1.654013859E12, 5907.400000000001], [1.6540138395E12, 226.8], [1.6540138515E12, 2268.2], [1.654013832E12, 167.5], [1.6540138545E12, 3632.2000000000003], [1.6540138455E12, 699.0], [1.654013826E12, 158.6], [1.6540138485E12, 1483.6000000000001], [1.654013829E12, 156.0], [1.654013841E12, 245.70000000000002], [1.6540138635E12, 6695.7], [1.654013844E12, 313.80000000000007], [1.654013835E12, 185.10000000000002], [1.654013838E12, 202.0], [1.6540138605E12, 6448.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6540138305E12, 164.0], [1.654013853E12, 3412.0], [1.654013856E12, 5071.95], [1.6540138335E12, 182.0], [1.6540138245E12, 156.0], [1.654013847E12, 1479.0], [1.6540138275E12, 158.0], [1.65401385E12, 2007.0], [1.654013862E12, 7954.799999999999], [1.6540138425E12, 249.0], [1.654013823E12, 944.0], [1.6540138365E12, 204.0], [1.654013859E12, 6387.0], [1.6540138395E12, 241.0], [1.6540138515E12, 3073.0], [1.654013832E12, 173.0], [1.6540138545E12, 3914.0], [1.6540138455E12, 960.0], [1.654013826E12, 161.0], [1.6540138485E12, 1600.0], [1.654013829E12, 160.0], [1.654013841E12, 262.0], [1.6540138635E12, 6919.0], [1.654013844E12, 385.0], [1.654013835E12, 199.0], [1.654013838E12, 218.0], [1.6540138605E12, 6781.44]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6540138305E12, 160.6], [1.654013853E12, 3280.9], [1.654013856E12, 4922.9], [1.6540138335E12, 176.5], [1.6540138245E12, 156.0], [1.654013847E12, 1280.6], [1.6540138275E12, 157.75], [1.65401385E12, 1948.3], [1.654013862E12, 6903.0], [1.6540138425E12, 232.0], [1.654013823E12, 944.0], [1.6540138365E12, 200.49999999999994], [1.654013859E12, 6342.9], [1.6540138395E12, 238.7], [1.6540138515E12, 2528.299999999999], [1.654013832E12, 170.25], [1.6540138545E12, 3851.95], [1.6540138455E12, 853.2500000000001], [1.654013826E12, 160.8], [1.6540138485E12, 1535.1999999999998], [1.654013829E12, 159.3], [1.654013841E12, 251.95], [1.6540138635E12, 6820.0], [1.654013844E12, 339.40000000000003], [1.654013835E12, 194.75], [1.654013838E12, 208.5], [1.6540138605E12, 6632.7]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6540138305E12, 19.0], [1.654013853E12, 1125.0], [1.654013856E12, 2300.0], [1.6540138335E12, 18.0], [1.6540138245E12, 21.0], [1.654013847E12, 36.0], [1.6540138275E12, 19.0], [1.65401385E12, 985.0], [1.654013862E12, 4432.0], [1.6540138425E12, 21.0], [1.654013823E12, 33.0], [1.6540138365E12, 19.0], [1.654013859E12, 3510.0], [1.6540138395E12, 20.0], [1.6540138515E12, 1089.0], [1.654013832E12, 19.0], [1.6540138545E12, 2162.0], [1.6540138455E12, 27.0], [1.654013826E12, 20.0], [1.6540138485E12, 35.0], [1.654013829E12, 18.0], [1.654013841E12, 20.0], [1.6540138635E12, 5568.0], [1.654013844E12, 21.0], [1.654013835E12, 19.0], [1.654013838E12, 20.0], [1.6540138605E12, 4445.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6540138305E12, 86.5], [1.654013853E12, 2231.5], [1.654013856E12, 3599.5], [1.6540138335E12, 28.0], [1.6540138245E12, 88.0], [1.654013847E12, 564.5], [1.6540138275E12, 82.0], [1.65401385E12, 1356.0], [1.654013862E12, 5491.0], [1.6540138425E12, 106.0], [1.654013823E12, 358.5], [1.6540138365E12, 93.0], [1.654013859E12, 5209.0], [1.6540138395E12, 101.5], [1.6540138515E12, 1733.0], [1.654013832E12, 85.0], [1.6540138545E12, 2726.0], [1.6540138455E12, 281.0], [1.654013826E12, 31.0], [1.6540138485E12, 914.0], [1.654013829E12, 27.0], [1.654013841E12, 34.0], [1.6540138635E12, 6043.0], [1.654013844E12, 33.0], [1.654013835E12, 90.0], [1.654013838E12, 29.0], [1.6540138605E12, 5584.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6540138635E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27.0, "minX": 7.0, "maxY": 6035.0, "series": [{"data": [[33.0, 28.0], [32.0, 84.5], [36.0, 90.0], [40.0, 93.0], [42.0, 379.5], [45.0, 29.0], [47.0, 32.0], [46.0, 1356.0], [49.0, 171.0], [51.0, 230.0], [52.0, 1680.0], [55.0, 30.0], [57.0, 5209.0], [58.0, 34.0], [62.0, 952.0], [66.0, 265.0], [92.0, 2223.5], [7.0, 3294.0], [118.0, 5499.5], [8.0, 87.0], [133.0, 4799.5], [13.0, 31.0], [14.0, 174.0], [16.0, 82.0], [18.0, 2330.5], [21.0, 27.0], [24.0, 150.0], [28.0, 85.0], [29.0, 2031.0], [31.0, 6035.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 133.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 25.0, "minX": 7.0, "maxY": 6035.0, "series": [{"data": [[33.0, 27.0], [32.0, 84.0], [36.0, 89.5], [40.0, 92.5], [42.0, 345.5], [45.0, 27.0], [47.0, 31.0], [46.0, 1287.5], [49.0, 171.0], [51.0, 230.0], [52.0, 1402.0], [55.0, 28.0], [57.0, 4963.0], [58.0, 31.5], [62.0, 891.5], [66.0, 244.5], [92.0, 1475.0], [7.0, 3294.0], [118.0, 5446.0], [8.0, 86.5], [133.0, 3624.0], [13.0, 30.0], [14.0, 173.0], [16.0, 81.5], [18.0, 2330.5], [21.0, 25.0], [24.0, 150.0], [28.0, 84.5], [29.0, 2031.0], [31.0, 6035.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 133.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6.666666666666667, "minX": 1.654013823E12, "maxY": 81.33333333333333, "series": [{"data": [[1.6540138305E12, 24.0], [1.6540138515E12, 81.33333333333333], [1.654013832E12, 30.666666666666668], [1.654013853E12, 80.0], [1.6540138545E12, 80.0], [1.654013856E12, 80.0], [1.6540138335E12, 32.0], [1.6540138245E12, 8.0], [1.6540138455E12, 64.0], [1.654013826E12, 14.666666666666666], [1.654013847E12, 70.66666666666667], [1.6540138275E12, 16.0], [1.6540138485E12, 72.0], [1.654013829E12, 22.666666666666668], [1.65401385E12, 77.33333333333333], [1.654013841E12, 53.333333333333336], [1.6540138425E12, 56.0], [1.654013844E12, 62.666666666666664], [1.654013823E12, 6.666666666666667], [1.654013835E12, 38.666666666666664], [1.6540138365E12, 40.0], [1.6540138575E12, 41.333333333333336], [1.654013838E12, 46.666666666666664], [1.6540138395E12, 48.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6540138575E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 6.666666666666667, "minX": 1.654013823E12, "maxY": 93.33333333333333, "series": [{"data": [[1.6540138305E12, 24.0], [1.654013853E12, 65.33333333333333], [1.654013856E12, 93.33333333333333], [1.6540138335E12, 32.666666666666664], [1.6540138245E12, 8.0], [1.654013847E12, 58.666666666666664], [1.6540138275E12, 16.0], [1.65401385E12, 30.666666666666668], [1.654013862E12, 79.33333333333333], [1.6540138425E12, 56.0], [1.654013823E12, 6.666666666666667], [1.6540138365E12, 40.0], [1.654013859E12, 38.0], [1.6540138395E12, 48.0], [1.6540138515E12, 54.0], [1.654013832E12, 29.333333333333332], [1.6540138545E12, 24.0], [1.6540138455E12, 60.0], [1.654013826E12, 14.0], [1.6540138485E12, 44.666666666666664], [1.654013829E12, 22.0], [1.654013841E12, 53.333333333333336], [1.6540138635E12, 20.0], [1.654013844E12, 56.666666666666664], [1.654013835E12, 37.333333333333336], [1.654013838E12, 46.0], [1.6540138605E12, 88.66666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6540138635E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.3333333333333335, "minX": 1.654013823E12, "maxY": 66.0, "series": [{"data": [[1.6540138305E12, 12.0], [1.654013853E12, 40.666666666666664], [1.654013856E12, 66.0], [1.6540138335E12, 16.666666666666668], [1.6540138245E12, 4.0], [1.654013847E12, 31.333333333333332], [1.6540138275E12, 8.0], [1.65401385E12, 8.666666666666666], [1.654013862E12, 44.666666666666664], [1.6540138425E12, 28.0], [1.654013823E12, 3.3333333333333335], [1.6540138365E12, 20.0], [1.654013859E12, 8.0], [1.6540138395E12, 24.0], [1.6540138515E12, 12.0], [1.654013832E12, 14.666666666666666], [1.6540138455E12, 31.333333333333332], [1.654013826E12, 7.333333333333333], [1.6540138485E12, 24.0], [1.654013829E12, 11.333333333333334], [1.654013841E12, 27.333333333333332], [1.654013844E12, 30.666666666666668], [1.654013835E12, 18.666666666666668], [1.654013838E12, 23.333333333333332], [1.6540138605E12, 57.333333333333336]], "isOverall": false, "label": "/api/listings?geojson=true-success", "isController": false}, {"data": [[1.6540138305E12, 12.0], [1.654013853E12, 24.666666666666668], [1.654013856E12, 27.333333333333332], [1.6540138335E12, 16.0], [1.6540138245E12, 4.0], [1.654013847E12, 27.333333333333332], [1.6540138275E12, 8.0], [1.65401385E12, 22.0], [1.654013862E12, 34.666666666666664], [1.6540138425E12, 28.0], [1.654013823E12, 3.3333333333333335], [1.6540138365E12, 20.0], [1.654013859E12, 30.0], [1.6540138395E12, 24.0], [1.6540138515E12, 42.0], [1.654013832E12, 14.666666666666666], [1.6540138545E12, 24.0], [1.6540138455E12, 28.666666666666668], [1.654013826E12, 6.666666666666667], [1.6540138485E12, 20.666666666666668], [1.654013829E12, 10.666666666666666], [1.654013841E12, 26.0], [1.6540138635E12, 20.0], [1.654013844E12, 26.0], [1.654013835E12, 18.666666666666668], [1.654013838E12, 22.666666666666668], [1.6540138605E12, 31.333333333333332]], "isOverall": false, "label": "/api/statistics/neighbourhoods-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6540138635E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 6.666666666666667, "minX": 1.654013823E12, "maxY": 93.33333333333333, "series": [{"data": [[1.6540138305E12, 24.0], [1.654013853E12, 65.33333333333333], [1.654013856E12, 93.33333333333333], [1.6540138335E12, 32.666666666666664], [1.6540138245E12, 8.0], [1.654013847E12, 58.666666666666664], [1.6540138275E12, 16.0], [1.65401385E12, 30.666666666666668], [1.654013862E12, 79.33333333333333], [1.6540138425E12, 56.0], [1.654013823E12, 6.666666666666667], [1.6540138365E12, 40.0], [1.654013859E12, 38.0], [1.6540138395E12, 48.0], [1.6540138515E12, 54.0], [1.654013832E12, 29.333333333333332], [1.6540138545E12, 24.0], [1.6540138455E12, 60.0], [1.654013826E12, 14.0], [1.6540138485E12, 44.666666666666664], [1.654013829E12, 22.0], [1.654013841E12, 53.333333333333336], [1.6540138635E12, 20.0], [1.654013844E12, 56.666666666666664], [1.654013835E12, 37.333333333333336], [1.654013838E12, 46.0], [1.6540138605E12, 88.66666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6540138635E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

