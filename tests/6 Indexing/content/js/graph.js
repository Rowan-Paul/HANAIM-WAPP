/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2842.0, "minX": 0.0, "maxY": 13259.0, "series": [{"data": [[0.0, 5031.0], [0.1, 5031.0], [0.2, 5035.0], [0.3, 5042.0], [0.4, 5043.0], [0.5, 5054.0], [0.6, 5061.0], [0.7, 5065.0], [0.8, 5065.0], [0.9, 5070.0], [1.0, 5071.0], [1.1, 5075.0], [1.2, 5081.0], [1.3, 5083.0], [1.4, 5085.0], [1.5, 5085.0], [1.6, 5088.0], [1.7, 5090.0], [1.8, 5095.0], [1.9, 5097.0], [2.0, 5098.0], [2.1, 5098.0], [2.2, 5098.0], [2.3, 5101.0], [2.4, 5105.0], [2.5, 5107.0], [2.6, 5109.0], [2.7, 5112.0], [2.8, 5122.0], [2.9, 5122.0], [3.0, 5124.0], [3.1, 5127.0], [3.2, 5132.0], [3.3, 5133.0], [3.4, 5134.0], [3.5, 5135.0], [3.6, 5135.0], [3.7, 5138.0], [3.8, 5147.0], [3.9, 5152.0], [4.0, 5164.0], [4.1, 5166.0], [4.2, 5167.0], [4.3, 5167.0], [4.4, 5173.0], [4.5, 5178.0], [4.6, 5178.0], [4.7, 5179.0], [4.8, 5180.0], [4.9, 5181.0], [5.0, 5181.0], [5.1, 5187.0], [5.2, 5193.0], [5.3, 5195.0], [5.4, 5202.0], [5.5, 5202.0], [5.6, 5205.0], [5.7, 5207.0], [5.8, 5207.0], [5.9, 5209.0], [6.0, 5209.0], [6.1, 5210.0], [6.2, 5214.0], [6.3, 5215.0], [6.4, 5216.0], [6.5, 5216.0], [6.6, 5217.0], [6.7, 5218.0], [6.8, 5220.0], [6.9, 5221.0], [7.0, 5233.0], [7.1, 5238.0], [7.2, 5238.0], [7.3, 5241.0], [7.4, 5242.0], [7.5, 5243.0], [7.6, 5246.0], [7.7, 5248.0], [7.8, 5249.0], [7.9, 5249.0], [8.0, 5250.0], [8.1, 5251.0], [8.2, 5252.0], [8.3, 5256.0], [8.4, 5256.0], [8.5, 5258.0], [8.6, 5258.0], [8.7, 5258.0], [8.8, 5261.0], [8.9, 5263.0], [9.0, 5264.0], [9.1, 5266.0], [9.2, 5267.0], [9.3, 5267.0], [9.4, 5268.0], [9.5, 5270.0], [9.6, 5270.0], [9.7, 5273.0], [9.8, 5274.0], [9.9, 5275.0], [10.0, 5275.0], [10.1, 5276.0], [10.2, 5276.0], [10.3, 5281.0], [10.4, 5282.0], [10.5, 5289.0], [10.6, 5289.0], [10.7, 5293.0], [10.8, 5293.0], [10.9, 5294.0], [11.0, 5295.0], [11.1, 5296.0], [11.2, 5296.0], [11.3, 5298.0], [11.4, 5299.0], [11.5, 5299.0], [11.6, 5302.0], [11.7, 5303.0], [11.8, 5310.0], [11.9, 5313.0], [12.0, 5313.0], [12.1, 5316.0], [12.2, 5316.0], [12.3, 5317.0], [12.4, 5317.0], [12.5, 5318.0], [12.6, 5320.0], [12.7, 5321.0], [12.8, 5323.0], [12.9, 5323.0], [13.0, 5324.0], [13.1, 5325.0], [13.2, 5326.0], [13.3, 5330.0], [13.4, 5334.0], [13.5, 5335.0], [13.6, 5335.0], [13.7, 5336.0], [13.8, 5336.0], [13.9, 5338.0], [14.0, 5339.0], [14.1, 5339.0], [14.2, 5344.0], [14.3, 5344.0], [14.4, 5345.0], [14.5, 5346.0], [14.6, 5348.0], [14.7, 5348.0], [14.8, 5351.0], [14.9, 5352.0], [15.0, 5352.0], [15.1, 5352.0], [15.2, 5354.0], [15.3, 5354.0], [15.4, 5355.0], [15.5, 5358.0], [15.6, 5360.0], [15.7, 5360.0], [15.8, 5360.0], [15.9, 5361.0], [16.0, 5362.0], [16.1, 5362.0], [16.2, 5363.0], [16.3, 5367.0], [16.4, 5371.0], [16.5, 5371.0], [16.6, 5373.0], [16.7, 5374.0], [16.8, 5376.0], [16.9, 5377.0], [17.0, 5377.0], [17.1, 5377.0], [17.2, 5377.0], [17.3, 5379.0], [17.4, 5380.0], [17.5, 5380.0], [17.6, 5382.0], [17.7, 5383.0], [17.8, 5385.0], [17.9, 5385.0], [18.0, 5386.0], [18.1, 5387.0], [18.2, 5388.0], [18.3, 5390.0], [18.4, 5391.0], [18.5, 5392.0], [18.6, 5392.0], [18.7, 5392.0], [18.8, 5393.0], [18.9, 5393.0], [19.0, 5397.0], [19.1, 5397.0], [19.2, 5398.0], [19.3, 5398.0], [19.4, 5398.0], [19.5, 5401.0], [19.6, 5405.0], [19.7, 5405.0], [19.8, 5405.0], [19.9, 5405.0], [20.0, 5411.0], [20.1, 5411.0], [20.2, 5413.0], [20.3, 5414.0], [20.4, 5415.0], [20.5, 5415.0], [20.6, 5422.0], [20.7, 5422.0], [20.8, 5422.0], [20.9, 5422.0], [21.0, 5423.0], [21.1, 5423.0], [21.2, 5426.0], [21.3, 5427.0], [21.4, 5429.0], [21.5, 5429.0], [21.6, 5429.0], [21.7, 5429.0], [21.8, 5431.0], [21.9, 5432.0], [22.0, 5432.0], [22.1, 5433.0], [22.2, 5433.0], [22.3, 5433.0], [22.4, 5433.0], [22.5, 5433.0], [22.6, 5434.0], [22.7, 5435.0], [22.8, 5437.0], [22.9, 5437.0], [23.0, 5438.0], [23.1, 5438.0], [23.2, 5439.0], [23.3, 5439.0], [23.4, 5440.0], [23.5, 5440.0], [23.6, 5440.0], [23.7, 5444.0], [23.8, 5446.0], [23.9, 5447.0], [24.0, 5449.0], [24.1, 5450.0], [24.2, 5452.0], [24.3, 5452.0], [24.4, 5457.0], [24.5, 5457.0], [24.6, 5458.0], [24.7, 5459.0], [24.8, 5461.0], [24.9, 5463.0], [25.0, 5465.0], [25.1, 5465.0], [25.2, 5468.0], [25.3, 5469.0], [25.4, 5470.0], [25.5, 5471.0], [25.6, 5472.0], [25.7, 5474.0], [25.8, 5474.0], [25.9, 5474.0], [26.0, 5474.0], [26.1, 5477.0], [26.2, 5478.0], [26.3, 5478.0], [26.4, 5479.0], [26.5, 5479.0], [26.6, 5481.0], [26.7, 5481.0], [26.8, 5482.0], [26.9, 5483.0], [27.0, 5484.0], [27.1, 5486.0], [27.2, 5486.0], [27.3, 5486.0], [27.4, 5487.0], [27.5, 5488.0], [27.6, 5488.0], [27.7, 5488.0], [27.8, 5490.0], [27.9, 5490.0], [28.0, 5490.0], [28.1, 5492.0], [28.2, 5493.0], [28.3, 5494.0], [28.4, 5495.0], [28.5, 5496.0], [28.6, 5496.0], [28.7, 5496.0], [28.8, 5496.0], [28.9, 5497.0], [29.0, 5497.0], [29.1, 5498.0], [29.2, 5499.0], [29.3, 5499.0], [29.4, 5501.0], [29.5, 5501.0], [29.6, 5503.0], [29.7, 5503.0], [29.8, 5505.0], [29.9, 5507.0], [30.0, 5507.0], [30.1, 5507.0], [30.2, 5508.0], [30.3, 5508.0], [30.4, 5509.0], [30.5, 5510.0], [30.6, 5512.0], [30.7, 5514.0], [30.8, 5514.0], [30.9, 5517.0], [31.0, 5517.0], [31.1, 5520.0], [31.2, 5520.0], [31.3, 5520.0], [31.4, 5521.0], [31.5, 5521.0], [31.6, 5521.0], [31.7, 5521.0], [31.8, 5522.0], [31.9, 5523.0], [32.0, 5523.0], [32.1, 5523.0], [32.2, 5523.0], [32.3, 5525.0], [32.4, 5527.0], [32.5, 5530.0], [32.6, 5533.0], [32.7, 5533.0], [32.8, 5533.0], [32.9, 5533.0], [33.0, 5534.0], [33.1, 5536.0], [33.2, 5536.0], [33.3, 5536.0], [33.4, 5536.0], [33.5, 5537.0], [33.6, 5537.0], [33.7, 5541.0], [33.8, 5541.0], [33.9, 5541.0], [34.0, 5542.0], [34.1, 5543.0], [34.2, 5544.0], [34.3, 5544.0], [34.4, 5545.0], [34.5, 5545.0], [34.6, 5546.0], [34.7, 5547.0], [34.8, 5548.0], [34.9, 5549.0], [35.0, 5551.0], [35.1, 5551.0], [35.2, 5551.0], [35.3, 5552.0], [35.4, 5552.0], [35.5, 5553.0], [35.6, 5553.0], [35.7, 5554.0], [35.8, 5554.0], [35.9, 5555.0], [36.0, 5555.0], [36.1, 5558.0], [36.2, 5559.0], [36.3, 5561.0], [36.4, 5563.0], [36.5, 5563.0], [36.6, 5564.0], [36.7, 5565.0], [36.8, 5565.0], [36.9, 5566.0], [37.0, 5566.0], [37.1, 5568.0], [37.2, 5568.0], [37.3, 5569.0], [37.4, 5569.0], [37.5, 5573.0], [37.6, 5574.0], [37.7, 5575.0], [37.8, 5575.0], [37.9, 5575.0], [38.0, 5577.0], [38.1, 5578.0], [38.2, 5578.0], [38.3, 5579.0], [38.4, 5580.0], [38.5, 5581.0], [38.6, 5581.0], [38.7, 5581.0], [38.8, 5583.0], [38.9, 5584.0], [39.0, 5585.0], [39.1, 5585.0], [39.2, 5586.0], [39.3, 5586.0], [39.4, 5586.0], [39.5, 5587.0], [39.6, 5587.0], [39.7, 5588.0], [39.8, 5590.0], [39.9, 5591.0], [40.0, 5592.0], [40.1, 5592.0], [40.2, 5593.0], [40.3, 5594.0], [40.4, 5596.0], [40.5, 5596.0], [40.6, 5597.0], [40.7, 5598.0], [40.8, 5598.0], [40.9, 5598.0], [41.0, 5600.0], [41.1, 5601.0], [41.2, 5601.0], [41.3, 5603.0], [41.4, 5605.0], [41.5, 5605.0], [41.6, 5606.0], [41.7, 5606.0], [41.8, 5607.0], [41.9, 5607.0], [42.0, 5608.0], [42.1, 5608.0], [42.2, 5608.0], [42.3, 5608.0], [42.4, 5609.0], [42.5, 5610.0], [42.6, 5611.0], [42.7, 5614.0], [42.8, 5614.0], [42.9, 5614.0], [43.0, 5614.0], [43.1, 5614.0], [43.2, 5615.0], [43.3, 5616.0], [43.4, 5619.0], [43.5, 5619.0], [43.6, 5619.0], [43.7, 5620.0], [43.8, 5620.0], [43.9, 5621.0], [44.0, 5621.0], [44.1, 5623.0], [44.2, 5625.0], [44.3, 5625.0], [44.4, 5626.0], [44.5, 5628.0], [44.6, 5629.0], [44.7, 5629.0], [44.8, 5630.0], [44.9, 5631.0], [45.0, 5631.0], [45.1, 5631.0], [45.2, 5634.0], [45.3, 5636.0], [45.4, 5636.0], [45.5, 5636.0], [45.6, 5637.0], [45.7, 5638.0], [45.8, 5638.0], [45.9, 5638.0], [46.0, 5639.0], [46.1, 5640.0], [46.2, 5641.0], [46.3, 5642.0], [46.4, 5643.0], [46.5, 5643.0], [46.6, 5644.0], [46.7, 5645.0], [46.8, 5646.0], [46.9, 5647.0], [47.0, 5648.0], [47.1, 5648.0], [47.2, 5648.0], [47.3, 5650.0], [47.4, 5651.0], [47.5, 5653.0], [47.6, 5654.0], [47.7, 5655.0], [47.8, 5655.0], [47.9, 5655.0], [48.0, 5656.0], [48.1, 5656.0], [48.2, 5656.0], [48.3, 5657.0], [48.4, 5657.0], [48.5, 5658.0], [48.6, 5658.0], [48.7, 5658.0], [48.8, 5659.0], [48.9, 5659.0], [49.0, 5660.0], [49.1, 5661.0], [49.2, 5661.0], [49.3, 5661.0], [49.4, 5661.0], [49.5, 5662.0], [49.6, 5667.0], [49.7, 5667.0], [49.8, 5671.0], [49.9, 5672.0], [50.0, 5672.0], [50.1, 5672.0], [50.2, 5673.0], [50.3, 5674.0], [50.4, 5675.0], [50.5, 5676.0], [50.6, 5676.0], [50.7, 5676.0], [50.8, 5676.0], [50.9, 5677.0], [51.0, 5677.0], [51.1, 5678.0], [51.2, 5680.0], [51.3, 5681.0], [51.4, 5681.0], [51.5, 5681.0], [51.6, 5683.0], [51.7, 5684.0], [51.8, 5684.0], [51.9, 5685.0], [52.0, 5686.0], [52.1, 5686.0], [52.2, 5686.0], [52.3, 5686.0], [52.4, 5688.0], [52.5, 5688.0], [52.6, 5689.0], [52.7, 5692.0], [52.8, 5692.0], [52.9, 5692.0], [53.0, 5692.0], [53.1, 5693.0], [53.2, 5694.0], [53.3, 5697.0], [53.4, 5699.0], [53.5, 5699.0], [53.6, 5699.0], [53.7, 5699.0], [53.8, 5700.0], [53.9, 5700.0], [54.0, 5701.0], [54.1, 5702.0], [54.2, 5702.0], [54.3, 5702.0], [54.4, 5703.0], [54.5, 5703.0], [54.6, 5704.0], [54.7, 5705.0], [54.8, 5710.0], [54.9, 5710.0], [55.0, 5711.0], [55.1, 5711.0], [55.2, 5711.0], [55.3, 5712.0], [55.4, 5714.0], [55.5, 5715.0], [55.6, 5715.0], [55.7, 5716.0], [55.8, 5716.0], [55.9, 5718.0], [56.0, 5720.0], [56.1, 5721.0], [56.2, 5722.0], [56.3, 5722.0], [56.4, 5723.0], [56.5, 5723.0], [56.6, 5725.0], [56.7, 5725.0], [56.8, 5726.0], [56.9, 5727.0], [57.0, 5728.0], [57.1, 5728.0], [57.2, 5728.0], [57.3, 5728.0], [57.4, 5728.0], [57.5, 5728.0], [57.6, 5729.0], [57.7, 5730.0], [57.8, 5731.0], [57.9, 5731.0], [58.0, 5731.0], [58.1, 5734.0], [58.2, 5734.0], [58.3, 5735.0], [58.4, 5736.0], [58.5, 5737.0], [58.6, 5737.0], [58.7, 5740.0], [58.8, 5740.0], [58.9, 5741.0], [59.0, 5741.0], [59.1, 5743.0], [59.2, 5744.0], [59.3, 5744.0], [59.4, 5746.0], [59.5, 5746.0], [59.6, 5748.0], [59.7, 5749.0], [59.8, 5749.0], [59.9, 5749.0], [60.0, 5750.0], [60.1, 5750.0], [60.2, 5752.0], [60.3, 5753.0], [60.4, 5753.0], [60.5, 5754.0], [60.6, 5754.0], [60.7, 5756.0], [60.8, 5756.0], [60.9, 5757.0], [61.0, 5758.0], [61.1, 5758.0], [61.2, 5759.0], [61.3, 5760.0], [61.4, 5760.0], [61.5, 5760.0], [61.6, 5763.0], [61.7, 5765.0], [61.8, 5765.0], [61.9, 5768.0], [62.0, 5768.0], [62.1, 5768.0], [62.2, 5768.0], [62.3, 5768.0], [62.4, 5769.0], [62.5, 5771.0], [62.6, 5772.0], [62.7, 5772.0], [62.8, 5774.0], [62.9, 5774.0], [63.0, 5775.0], [63.1, 5776.0], [63.2, 5777.0], [63.3, 5777.0], [63.4, 5778.0], [63.5, 5778.0], [63.6, 5778.0], [63.7, 5778.0], [63.8, 5779.0], [63.9, 5779.0], [64.0, 5780.0], [64.1, 5783.0], [64.2, 5784.0], [64.3, 5784.0], [64.4, 5787.0], [64.5, 5787.0], [64.6, 5788.0], [64.7, 5788.0], [64.8, 5788.0], [64.9, 5791.0], [65.0, 5792.0], [65.1, 5792.0], [65.2, 5792.0], [65.3, 5792.0], [65.4, 5793.0], [65.5, 5793.0], [65.6, 5793.0], [65.7, 5793.0], [65.8, 5793.0], [65.9, 5794.0], [66.0, 5795.0], [66.1, 5796.0], [66.2, 5798.0], [66.3, 5799.0], [66.4, 5801.0], [66.5, 5801.0], [66.6, 5802.0], [66.7, 5803.0], [66.8, 5804.0], [66.9, 5804.0], [67.0, 5805.0], [67.1, 5805.0], [67.2, 5805.0], [67.3, 5807.0], [67.4, 5809.0], [67.5, 5811.0], [67.6, 5812.0], [67.7, 5812.0], [67.8, 5812.0], [67.9, 5812.0], [68.0, 5812.0], [68.1, 5813.0], [68.2, 5815.0], [68.3, 5815.0], [68.4, 5816.0], [68.5, 5818.0], [68.6, 5818.0], [68.7, 5818.0], [68.8, 5819.0], [68.9, 5822.0], [69.0, 5822.0], [69.1, 5823.0], [69.2, 5823.0], [69.3, 5823.0], [69.4, 5823.0], [69.5, 5825.0], [69.6, 5825.0], [69.7, 5826.0], [69.8, 5826.0], [69.9, 5826.0], [70.0, 5826.0], [70.1, 5827.0], [70.2, 5829.0], [70.3, 5830.0], [70.4, 5830.0], [70.5, 5834.0], [70.6, 5837.0], [70.7, 5837.0], [70.8, 5837.0], [70.9, 5838.0], [71.0, 5839.0], [71.1, 5839.0], [71.2, 5841.0], [71.3, 5841.0], [71.4, 5841.0], [71.5, 5841.0], [71.6, 5843.0], [71.7, 5846.0], [71.8, 5846.0], [71.9, 5847.0], [72.0, 5848.0], [72.1, 5848.0], [72.2, 5848.0], [72.3, 5849.0], [72.4, 5849.0], [72.5, 5849.0], [72.6, 5849.0], [72.7, 5849.0], [72.8, 5850.0], [72.9, 5850.0], [73.0, 5850.0], [73.1, 5851.0], [73.2, 5852.0], [73.3, 5853.0], [73.4, 5854.0], [73.5, 5854.0], [73.6, 5854.0], [73.7, 5854.0], [73.8, 5855.0], [73.9, 5858.0], [74.0, 5858.0], [74.1, 5859.0], [74.2, 5859.0], [74.3, 5859.0], [74.4, 5860.0], [74.5, 5860.0], [74.6, 5862.0], [74.7, 5863.0], [74.8, 5863.0], [74.9, 5863.0], [75.0, 5863.0], [75.1, 5866.0], [75.2, 5868.0], [75.3, 5869.0], [75.4, 5870.0], [75.5, 5871.0], [75.6, 5871.0], [75.7, 5874.0], [75.8, 5874.0], [75.9, 5876.0], [76.0, 5880.0], [76.1, 5880.0], [76.2, 5880.0], [76.3, 5881.0], [76.4, 5882.0], [76.5, 5882.0], [76.6, 5883.0], [76.7, 5883.0], [76.8, 5883.0], [76.9, 5883.0], [77.0, 5886.0], [77.1, 5887.0], [77.2, 5887.0], [77.3, 5887.0], [77.4, 5888.0], [77.5, 5888.0], [77.6, 5889.0], [77.7, 5890.0], [77.8, 5890.0], [77.9, 5890.0], [78.0, 5891.0], [78.1, 5893.0], [78.2, 5895.0], [78.3, 5896.0], [78.4, 5896.0], [78.5, 5896.0], [78.6, 5896.0], [78.7, 5897.0], [78.8, 5898.0], [78.9, 5900.0], [79.0, 5901.0], [79.1, 5902.0], [79.2, 5903.0], [79.3, 5903.0], [79.4, 5903.0], [79.5, 5903.0], [79.6, 5904.0], [79.7, 5904.0], [79.8, 5906.0], [79.9, 5906.0], [80.0, 5906.0], [80.1, 5906.0], [80.2, 5906.0], [80.3, 5908.0], [80.4, 5909.0], [80.5, 5910.0], [80.6, 5910.0], [80.7, 5910.0], [80.8, 5910.0], [80.9, 5910.0], [81.0, 5911.0], [81.1, 5912.0], [81.2, 5916.0], [81.3, 5918.0], [81.4, 5921.0], [81.5, 5921.0], [81.6, 5922.0], [81.7, 5922.0], [81.8, 5922.0], [81.9, 5927.0], [82.0, 5929.0], [82.1, 5930.0], [82.2, 5930.0], [82.3, 5931.0], [82.4, 5932.0], [82.5, 5933.0], [82.6, 5934.0], [82.7, 5935.0], [82.8, 5935.0], [82.9, 5935.0], [83.0, 5936.0], [83.1, 5938.0], [83.2, 5938.0], [83.3, 5940.0], [83.4, 5940.0], [83.5, 5940.0], [83.6, 5940.0], [83.7, 5940.0], [83.8, 5942.0], [83.9, 5942.0], [84.0, 5942.0], [84.1, 5942.0], [84.2, 5945.0], [84.3, 5945.0], [84.4, 5946.0], [84.5, 5946.0], [84.6, 5947.0], [84.7, 5948.0], [84.8, 5948.0], [84.9, 5949.0], [85.0, 5949.0], [85.1, 5949.0], [85.2, 5950.0], [85.3, 5951.0], [85.4, 5951.0], [85.5, 5951.0], [85.6, 5952.0], [85.7, 5954.0], [85.8, 5954.0], [85.9, 5957.0], [86.0, 5960.0], [86.1, 5961.0], [86.2, 5961.0], [86.3, 5961.0], [86.4, 5962.0], [86.5, 5962.0], [86.6, 5964.0], [86.7, 5965.0], [86.8, 5965.0], [86.9, 5967.0], [87.0, 5968.0], [87.1, 5969.0], [87.2, 5969.0], [87.3, 5969.0], [87.4, 5969.0], [87.5, 5971.0], [87.6, 5971.0], [87.7, 5974.0], [87.8, 5976.0], [87.9, 5976.0], [88.0, 5977.0], [88.1, 5978.0], [88.2, 5979.0], [88.3, 5979.0], [88.4, 5980.0], [88.5, 5981.0], [88.6, 5981.0], [88.7, 5982.0], [88.8, 5982.0], [88.9, 5983.0], [89.0, 5985.0], [89.1, 5985.0], [89.2, 5986.0], [89.3, 5986.0], [89.4, 5986.0], [89.5, 5987.0], [89.6, 5988.0], [89.7, 5989.0], [89.8, 5989.0], [89.9, 5990.0], [90.0, 5990.0], [90.1, 5991.0], [90.2, 5993.0], [90.3, 5996.0], [90.4, 5997.0], [90.5, 5998.0], [90.6, 5999.0], [90.7, 6003.0], [90.8, 6003.0], [90.9, 6003.0], [91.0, 6005.0], [91.1, 6009.0], [91.2, 6012.0], [91.3, 6014.0], [91.4, 6014.0], [91.5, 6014.0], [91.6, 6014.0], [91.7, 6014.0], [91.8, 6015.0], [91.9, 6016.0], [92.0, 6017.0], [92.1, 6020.0], [92.2, 6020.0], [92.3, 6022.0], [92.4, 6025.0], [92.5, 6026.0], [92.6, 6028.0], [92.7, 6029.0], [92.8, 6029.0], [92.9, 6029.0], [93.0, 6034.0], [93.1, 6034.0], [93.2, 6035.0], [93.3, 6043.0], [93.4, 6045.0], [93.5, 6049.0], [93.6, 6049.0], [93.7, 6049.0], [93.8, 6050.0], [93.9, 6056.0], [94.0, 6058.0], [94.1, 6066.0], [94.2, 6067.0], [94.3, 6067.0], [94.4, 6072.0], [94.5, 6074.0], [94.6, 6075.0], [94.7, 6086.0], [94.8, 6091.0], [94.9, 6099.0], [95.0, 6099.0], [95.1, 6103.0], [95.2, 6106.0], [95.3, 6116.0], [95.4, 6124.0], [95.5, 6130.0], [95.6, 6131.0], [95.7, 6136.0], [95.8, 6136.0], [95.9, 6138.0], [96.0, 6142.0], [96.1, 6144.0], [96.2, 6188.0], [96.3, 6228.0], [96.4, 6232.0], [96.5, 6232.0], [96.6, 6253.0], [96.7, 6297.0], [96.8, 6311.0], [96.9, 7098.0], [97.0, 8547.0], [97.1, 8627.0], [97.2, 8627.0], [97.3, 8720.0], [97.4, 9274.0], [97.5, 9349.0], [97.6, 9532.0], [97.7, 9640.0], [97.8, 9768.0], [97.9, 9768.0], [98.0, 9787.0], [98.1, 9856.0], [98.2, 9964.0], [98.3, 10040.0], [98.4, 10081.0], [98.5, 10285.0], [98.6, 10285.0], [98.7, 10289.0], [98.8, 10388.0], [98.9, 10479.0], [99.0, 10532.0], [99.1, 10789.0], [99.2, 10911.0], [99.3, 10911.0], [99.4, 11002.0], [99.5, 11035.0], [99.6, 11557.0], [99.7, 11778.0], [99.8, 12227.0], [99.9, 13259.0], [100.0, 13259.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[0.0, 2842.0], [0.1, 2842.0], [0.2, 2999.0], [0.3, 3059.0], [0.4, 3357.0], [0.5, 3429.0], [0.6, 3554.0], [0.7, 3577.0], [0.8, 3577.0], [0.9, 3644.0], [1.0, 3825.0], [1.1, 3897.0], [1.2, 5030.0], [1.3, 5037.0], [1.4, 5040.0], [1.5, 5040.0], [1.6, 5045.0], [1.7, 5052.0], [1.8, 5052.0], [1.9, 5053.0], [2.0, 5057.0], [2.1, 5059.0], [2.2, 5059.0], [2.3, 5060.0], [2.4, 5061.0], [2.5, 5073.0], [2.6, 5075.0], [2.7, 5077.0], [2.8, 5079.0], [2.9, 5079.0], [3.0, 5081.0], [3.1, 5081.0], [3.2, 5085.0], [3.3, 5091.0], [3.4, 5094.0], [3.5, 5099.0], [3.6, 5099.0], [3.7, 5100.0], [3.8, 5103.0], [3.9, 5105.0], [4.0, 5110.0], [4.1, 5113.0], [4.2, 5114.0], [4.3, 5114.0], [4.4, 5134.0], [4.5, 5134.0], [4.6, 5136.0], [4.7, 5137.0], [4.8, 5145.0], [4.9, 5154.0], [5.0, 5154.0], [5.1, 5165.0], [5.2, 5165.0], [5.3, 5169.0], [5.4, 5169.0], [5.5, 5174.0], [5.6, 5175.0], [5.7, 5175.0], [5.8, 5175.0], [5.9, 5176.0], [6.0, 5178.0], [6.1, 5186.0], [6.2, 5187.0], [6.3, 5193.0], [6.4, 5194.0], [6.5, 5194.0], [6.6, 5194.0], [6.7, 5195.0], [6.8, 5200.0], [6.9, 5204.0], [7.0, 5210.0], [7.1, 5213.0], [7.2, 5213.0], [7.3, 5216.0], [7.4, 5219.0], [7.5, 5222.0], [7.6, 5223.0], [7.7, 5224.0], [7.8, 5225.0], [7.9, 5225.0], [8.0, 5231.0], [8.1, 5232.0], [8.2, 5233.0], [8.3, 5234.0], [8.4, 5237.0], [8.5, 5240.0], [8.6, 5240.0], [8.7, 5241.0], [8.8, 5244.0], [8.9, 5247.0], [9.0, 5249.0], [9.1, 5253.0], [9.2, 5254.0], [9.3, 5254.0], [9.4, 5254.0], [9.5, 5255.0], [9.6, 5256.0], [9.7, 5259.0], [9.8, 5262.0], [9.9, 5264.0], [10.0, 5264.0], [10.1, 5266.0], [10.2, 5270.0], [10.3, 5272.0], [10.4, 5275.0], [10.5, 5276.0], [10.6, 5277.0], [10.7, 5281.0], [10.8, 5281.0], [10.9, 5282.0], [11.0, 5286.0], [11.1, 5290.0], [11.2, 5290.0], [11.3, 5292.0], [11.4, 5293.0], [11.5, 5293.0], [11.6, 5295.0], [11.7, 5295.0], [11.8, 5296.0], [11.9, 5296.0], [12.0, 5298.0], [12.1, 5302.0], [12.2, 5302.0], [12.3, 5304.0], [12.4, 5305.0], [12.5, 5307.0], [12.6, 5307.0], [12.7, 5308.0], [12.8, 5310.0], [12.9, 5310.0], [13.0, 5313.0], [13.1, 5318.0], [13.2, 5319.0], [13.3, 5320.0], [13.4, 5320.0], [13.5, 5324.0], [13.6, 5324.0], [13.7, 5324.0], [13.8, 5325.0], [13.9, 5325.0], [14.0, 5325.0], [14.1, 5327.0], [14.2, 5328.0], [14.3, 5328.0], [14.4, 5330.0], [14.5, 5333.0], [14.6, 5335.0], [14.7, 5336.0], [14.8, 5336.0], [14.9, 5336.0], [15.0, 5336.0], [15.1, 5338.0], [15.2, 5338.0], [15.3, 5339.0], [15.4, 5339.0], [15.5, 5343.0], [15.6, 5344.0], [15.7, 5345.0], [15.8, 5345.0], [15.9, 5347.0], [16.0, 5348.0], [16.1, 5349.0], [16.2, 5352.0], [16.3, 5353.0], [16.4, 5354.0], [16.5, 5354.0], [16.6, 5354.0], [16.7, 5354.0], [16.8, 5356.0], [16.9, 5358.0], [17.0, 5359.0], [17.1, 5359.0], [17.2, 5359.0], [17.3, 5361.0], [17.4, 5361.0], [17.5, 5364.0], [17.6, 5365.0], [17.7, 5365.0], [17.8, 5366.0], [17.9, 5366.0], [18.0, 5366.0], [18.1, 5373.0], [18.2, 5373.0], [18.3, 5375.0], [18.4, 5376.0], [18.5, 5378.0], [18.6, 5378.0], [18.7, 5380.0], [18.8, 5385.0], [18.9, 5388.0], [19.0, 5388.0], [19.1, 5388.0], [19.2, 5389.0], [19.3, 5389.0], [19.4, 5390.0], [19.5, 5391.0], [19.6, 5391.0], [19.7, 5391.0], [19.8, 5392.0], [19.9, 5394.0], [20.0, 5394.0], [20.1, 5394.0], [20.2, 5396.0], [20.3, 5397.0], [20.4, 5397.0], [20.5, 5397.0], [20.6, 5401.0], [20.7, 5403.0], [20.8, 5403.0], [20.9, 5403.0], [21.0, 5404.0], [21.1, 5405.0], [21.2, 5406.0], [21.3, 5409.0], [21.4, 5409.0], [21.5, 5409.0], [21.6, 5412.0], [21.7, 5413.0], [21.8, 5418.0], [21.9, 5418.0], [22.0, 5418.0], [22.1, 5421.0], [22.2, 5421.0], [22.3, 5422.0], [22.4, 5423.0], [22.5, 5423.0], [22.6, 5424.0], [22.7, 5424.0], [22.8, 5425.0], [22.9, 5425.0], [23.0, 5427.0], [23.1, 5427.0], [23.2, 5428.0], [23.3, 5429.0], [23.4, 5430.0], [23.5, 5431.0], [23.6, 5431.0], [23.7, 5431.0], [23.8, 5432.0], [23.9, 5432.0], [24.0, 5432.0], [24.1, 5437.0], [24.2, 5437.0], [24.3, 5437.0], [24.4, 5438.0], [24.5, 5438.0], [24.6, 5440.0], [24.7, 5440.0], [24.8, 5441.0], [24.9, 5442.0], [25.0, 5445.0], [25.1, 5445.0], [25.2, 5445.0], [25.3, 5450.0], [25.4, 5450.0], [25.5, 5453.0], [25.6, 5453.0], [25.7, 5455.0], [25.8, 5455.0], [25.9, 5455.0], [26.0, 5458.0], [26.1, 5459.0], [26.2, 5459.0], [26.3, 5461.0], [26.4, 5462.0], [26.5, 5462.0], [26.6, 5463.0], [26.7, 5467.0], [26.8, 5471.0], [26.9, 5472.0], [27.0, 5473.0], [27.1, 5473.0], [27.2, 5473.0], [27.3, 5475.0], [27.4, 5475.0], [27.5, 5475.0], [27.6, 5475.0], [27.7, 5477.0], [27.8, 5477.0], [27.9, 5477.0], [28.0, 5478.0], [28.1, 5479.0], [28.2, 5480.0], [28.3, 5483.0], [28.4, 5484.0], [28.5, 5484.0], [28.6, 5484.0], [28.7, 5484.0], [28.8, 5485.0], [28.9, 5485.0], [29.0, 5486.0], [29.1, 5487.0], [29.2, 5488.0], [29.3, 5488.0], [29.4, 5490.0], [29.5, 5490.0], [29.6, 5490.0], [29.7, 5490.0], [29.8, 5495.0], [29.9, 5496.0], [30.0, 5498.0], [30.1, 5498.0], [30.2, 5498.0], [30.3, 5499.0], [30.4, 5501.0], [30.5, 5502.0], [30.6, 5503.0], [30.7, 5505.0], [30.8, 5505.0], [30.9, 5506.0], [31.0, 5508.0], [31.1, 5508.0], [31.2, 5509.0], [31.3, 5509.0], [31.4, 5510.0], [31.5, 5510.0], [31.6, 5512.0], [31.7, 5513.0], [31.8, 5513.0], [31.9, 5514.0], [32.0, 5514.0], [32.1, 5516.0], [32.2, 5516.0], [32.3, 5516.0], [32.4, 5517.0], [32.5, 5517.0], [32.6, 5517.0], [32.7, 5518.0], [32.8, 5519.0], [32.9, 5519.0], [33.0, 5521.0], [33.1, 5521.0], [33.2, 5522.0], [33.3, 5524.0], [33.4, 5525.0], [33.5, 5529.0], [33.6, 5529.0], [33.7, 5530.0], [33.8, 5532.0], [33.9, 5532.0], [34.0, 5534.0], [34.1, 5536.0], [34.2, 5536.0], [34.3, 5536.0], [34.4, 5537.0], [34.5, 5537.0], [34.6, 5540.0], [34.7, 5540.0], [34.8, 5540.0], [34.9, 5540.0], [35.0, 5540.0], [35.1, 5540.0], [35.2, 5540.0], [35.3, 5541.0], [35.4, 5544.0], [35.5, 5546.0], [35.6, 5546.0], [35.7, 5546.0], [35.8, 5546.0], [35.9, 5546.0], [36.0, 5547.0], [36.1, 5547.0], [36.2, 5547.0], [36.3, 5548.0], [36.4, 5550.0], [36.5, 5550.0], [36.6, 5550.0], [36.7, 5551.0], [36.8, 5553.0], [36.9, 5553.0], [37.0, 5554.0], [37.1, 5554.0], [37.2, 5554.0], [37.3, 5555.0], [37.4, 5555.0], [37.5, 5556.0], [37.6, 5558.0], [37.7, 5558.0], [37.8, 5560.0], [37.9, 5560.0], [38.0, 5560.0], [38.1, 5561.0], [38.2, 5561.0], [38.3, 5562.0], [38.4, 5563.0], [38.5, 5564.0], [38.6, 5564.0], [38.7, 5564.0], [38.8, 5569.0], [38.9, 5573.0], [39.0, 5573.0], [39.1, 5575.0], [39.2, 5575.0], [39.3, 5575.0], [39.4, 5575.0], [39.5, 5576.0], [39.6, 5579.0], [39.7, 5580.0], [39.8, 5581.0], [39.9, 5582.0], [40.0, 5583.0], [40.1, 5583.0], [40.2, 5584.0], [40.3, 5584.0], [40.4, 5586.0], [40.5, 5587.0], [40.6, 5588.0], [40.7, 5590.0], [40.8, 5590.0], [40.9, 5590.0], [41.0, 5591.0], [41.1, 5591.0], [41.2, 5593.0], [41.3, 5593.0], [41.4, 5594.0], [41.5, 5594.0], [41.6, 5594.0], [41.7, 5594.0], [41.8, 5594.0], [41.9, 5596.0], [42.0, 5597.0], [42.1, 5599.0], [42.2, 5599.0], [42.3, 5601.0], [42.4, 5601.0], [42.5, 5601.0], [42.6, 5602.0], [42.7, 5602.0], [42.8, 5603.0], [42.9, 5603.0], [43.0, 5603.0], [43.1, 5604.0], [43.2, 5606.0], [43.3, 5608.0], [43.4, 5609.0], [43.5, 5609.0], [43.6, 5609.0], [43.7, 5609.0], [43.8, 5610.0], [43.9, 5610.0], [44.0, 5610.0], [44.1, 5611.0], [44.2, 5611.0], [44.3, 5611.0], [44.4, 5612.0], [44.5, 5613.0], [44.6, 5614.0], [44.7, 5616.0], [44.8, 5616.0], [44.9, 5617.0], [45.0, 5618.0], [45.1, 5618.0], [45.2, 5618.0], [45.3, 5619.0], [45.4, 5622.0], [45.5, 5622.0], [45.6, 5623.0], [45.7, 5624.0], [45.8, 5624.0], [45.9, 5625.0], [46.0, 5625.0], [46.1, 5628.0], [46.2, 5630.0], [46.3, 5632.0], [46.4, 5632.0], [46.5, 5632.0], [46.6, 5632.0], [46.7, 5633.0], [46.8, 5638.0], [46.9, 5638.0], [47.0, 5638.0], [47.1, 5640.0], [47.2, 5640.0], [47.3, 5640.0], [47.4, 5640.0], [47.5, 5640.0], [47.6, 5640.0], [47.7, 5640.0], [47.8, 5642.0], [47.9, 5642.0], [48.0, 5647.0], [48.1, 5647.0], [48.2, 5648.0], [48.3, 5649.0], [48.4, 5650.0], [48.5, 5651.0], [48.6, 5651.0], [48.7, 5654.0], [48.8, 5655.0], [48.9, 5655.0], [49.0, 5655.0], [49.1, 5655.0], [49.2, 5656.0], [49.3, 5656.0], [49.4, 5656.0], [49.5, 5657.0], [49.6, 5658.0], [49.7, 5659.0], [49.8, 5660.0], [49.9, 5661.0], [50.0, 5661.0], [50.1, 5661.0], [50.2, 5662.0], [50.3, 5663.0], [50.4, 5663.0], [50.5, 5663.0], [50.6, 5664.0], [50.7, 5665.0], [50.8, 5665.0], [50.9, 5666.0], [51.0, 5666.0], [51.1, 5669.0], [51.2, 5669.0], [51.3, 5673.0], [51.4, 5673.0], [51.5, 5673.0], [51.6, 5674.0], [51.7, 5674.0], [51.8, 5674.0], [51.9, 5675.0], [52.0, 5678.0], [52.1, 5679.0], [52.2, 5679.0], [52.3, 5679.0], [52.4, 5679.0], [52.5, 5681.0], [52.6, 5683.0], [52.7, 5683.0], [52.8, 5684.0], [52.9, 5684.0], [53.0, 5685.0], [53.1, 5686.0], [53.2, 5686.0], [53.3, 5687.0], [53.4, 5688.0], [53.5, 5688.0], [53.6, 5688.0], [53.7, 5688.0], [53.8, 5689.0], [53.9, 5690.0], [54.0, 5691.0], [54.1, 5692.0], [54.2, 5694.0], [54.3, 5694.0], [54.4, 5698.0], [54.5, 5698.0], [54.6, 5699.0], [54.7, 5699.0], [54.8, 5699.0], [54.9, 5700.0], [55.0, 5702.0], [55.1, 5702.0], [55.2, 5702.0], [55.3, 5702.0], [55.4, 5705.0], [55.5, 5705.0], [55.6, 5705.0], [55.7, 5706.0], [55.8, 5706.0], [55.9, 5707.0], [56.0, 5708.0], [56.1, 5709.0], [56.2, 5709.0], [56.3, 5709.0], [56.4, 5711.0], [56.5, 5711.0], [56.6, 5711.0], [56.7, 5714.0], [56.8, 5714.0], [56.9, 5716.0], [57.0, 5716.0], [57.1, 5717.0], [57.2, 5717.0], [57.3, 5718.0], [57.4, 5718.0], [57.5, 5719.0], [57.6, 5721.0], [57.7, 5722.0], [57.8, 5723.0], [57.9, 5723.0], [58.0, 5725.0], [58.1, 5726.0], [58.2, 5726.0], [58.3, 5728.0], [58.4, 5729.0], [58.5, 5729.0], [58.6, 5729.0], [58.7, 5729.0], [58.8, 5730.0], [58.9, 5731.0], [59.0, 5732.0], [59.1, 5734.0], [59.2, 5734.0], [59.3, 5734.0], [59.4, 5734.0], [59.5, 5735.0], [59.6, 5737.0], [59.7, 5737.0], [59.8, 5739.0], [59.9, 5740.0], [60.0, 5742.0], [60.1, 5742.0], [60.2, 5742.0], [60.3, 5744.0], [60.4, 5745.0], [60.5, 5747.0], [60.6, 5748.0], [60.7, 5748.0], [60.8, 5748.0], [60.9, 5749.0], [61.0, 5750.0], [61.1, 5751.0], [61.2, 5752.0], [61.3, 5752.0], [61.4, 5752.0], [61.5, 5752.0], [61.6, 5753.0], [61.7, 5753.0], [61.8, 5754.0], [61.9, 5754.0], [62.0, 5755.0], [62.1, 5755.0], [62.2, 5755.0], [62.3, 5757.0], [62.4, 5758.0], [62.5, 5758.0], [62.6, 5759.0], [62.7, 5760.0], [62.8, 5763.0], [62.9, 5763.0], [63.0, 5763.0], [63.1, 5764.0], [63.2, 5767.0], [63.3, 5767.0], [63.4, 5767.0], [63.5, 5767.0], [63.6, 5767.0], [63.7, 5768.0], [63.8, 5768.0], [63.9, 5769.0], [64.0, 5769.0], [64.1, 5769.0], [64.2, 5774.0], [64.3, 5774.0], [64.4, 5775.0], [64.5, 5776.0], [64.6, 5777.0], [64.7, 5778.0], [64.8, 5779.0], [64.9, 5779.0], [65.0, 5779.0], [65.1, 5779.0], [65.2, 5779.0], [65.3, 5781.0], [65.4, 5782.0], [65.5, 5783.0], [65.6, 5784.0], [65.7, 5785.0], [65.8, 5785.0], [65.9, 5786.0], [66.0, 5786.0], [66.1, 5788.0], [66.2, 5789.0], [66.3, 5791.0], [66.4, 5791.0], [66.5, 5791.0], [66.6, 5791.0], [66.7, 5792.0], [66.8, 5792.0], [66.9, 5793.0], [67.0, 5795.0], [67.1, 5795.0], [67.2, 5795.0], [67.3, 5796.0], [67.4, 5796.0], [67.5, 5797.0], [67.6, 5799.0], [67.7, 5799.0], [67.8, 5800.0], [67.9, 5800.0], [68.0, 5804.0], [68.1, 5805.0], [68.2, 5808.0], [68.3, 5810.0], [68.4, 5811.0], [68.5, 5811.0], [68.6, 5811.0], [68.7, 5813.0], [68.8, 5814.0], [68.9, 5814.0], [69.0, 5815.0], [69.1, 5815.0], [69.2, 5816.0], [69.3, 5816.0], [69.4, 5816.0], [69.5, 5817.0], [69.6, 5818.0], [69.7, 5818.0], [69.8, 5818.0], [69.9, 5818.0], [70.0, 5818.0], [70.1, 5820.0], [70.2, 5820.0], [70.3, 5820.0], [70.4, 5821.0], [70.5, 5822.0], [70.6, 5822.0], [70.7, 5823.0], [70.8, 5823.0], [70.9, 5824.0], [71.0, 5824.0], [71.1, 5827.0], [71.2, 5828.0], [71.3, 5829.0], [71.4, 5831.0], [71.5, 5831.0], [71.6, 5832.0], [71.7, 5833.0], [71.8, 5833.0], [71.9, 5838.0], [72.0, 5839.0], [72.1, 5840.0], [72.2, 5840.0], [72.3, 5840.0], [72.4, 5842.0], [72.5, 5842.0], [72.6, 5843.0], [72.7, 5844.0], [72.8, 5844.0], [72.9, 5844.0], [73.0, 5844.0], [73.1, 5844.0], [73.2, 5845.0], [73.3, 5846.0], [73.4, 5847.0], [73.5, 5847.0], [73.6, 5847.0], [73.7, 5847.0], [73.8, 5847.0], [73.9, 5848.0], [74.0, 5849.0], [74.1, 5849.0], [74.2, 5850.0], [74.3, 5850.0], [74.4, 5852.0], [74.5, 5852.0], [74.6, 5853.0], [74.7, 5853.0], [74.8, 5854.0], [74.9, 5855.0], [75.0, 5855.0], [75.1, 5855.0], [75.2, 5857.0], [75.3, 5857.0], [75.4, 5857.0], [75.5, 5857.0], [75.6, 5858.0], [75.7, 5859.0], [75.8, 5859.0], [75.9, 5859.0], [76.0, 5862.0], [76.1, 5862.0], [76.2, 5864.0], [76.3, 5864.0], [76.4, 5865.0], [76.5, 5865.0], [76.6, 5868.0], [76.7, 5868.0], [76.8, 5868.0], [76.9, 5869.0], [77.0, 5870.0], [77.1, 5871.0], [77.2, 5871.0], [77.3, 5872.0], [77.4, 5872.0], [77.5, 5874.0], [77.6, 5874.0], [77.7, 5875.0], [77.8, 5878.0], [77.9, 5878.0], [78.0, 5880.0], [78.1, 5882.0], [78.2, 5884.0], [78.3, 5885.0], [78.4, 5886.0], [78.5, 5886.0], [78.6, 5886.0], [78.7, 5888.0], [78.8, 5889.0], [78.9, 5889.0], [79.0, 5890.0], [79.1, 5890.0], [79.2, 5891.0], [79.3, 5891.0], [79.4, 5891.0], [79.5, 5891.0], [79.6, 5893.0], [79.7, 5894.0], [79.8, 5894.0], [79.9, 5894.0], [80.0, 5894.0], [80.1, 5895.0], [80.2, 5897.0], [80.3, 5897.0], [80.4, 5898.0], [80.5, 5899.0], [80.6, 5900.0], [80.7, 5900.0], [80.8, 5900.0], [80.9, 5902.0], [81.0, 5904.0], [81.1, 5907.0], [81.2, 5907.0], [81.3, 5908.0], [81.4, 5909.0], [81.5, 5909.0], [81.6, 5911.0], [81.7, 5911.0], [81.8, 5912.0], [81.9, 5912.0], [82.0, 5912.0], [82.1, 5913.0], [82.2, 5913.0], [82.3, 5914.0], [82.4, 5915.0], [82.5, 5915.0], [82.6, 5919.0], [82.7, 5919.0], [82.8, 5922.0], [82.9, 5922.0], [83.0, 5923.0], [83.1, 5924.0], [83.2, 5924.0], [83.3, 5924.0], [83.4, 5925.0], [83.5, 5925.0], [83.6, 5925.0], [83.7, 5926.0], [83.8, 5929.0], [83.9, 5932.0], [84.0, 5932.0], [84.1, 5934.0], [84.2, 5936.0], [84.3, 5936.0], [84.4, 5937.0], [84.5, 5938.0], [84.6, 5938.0], [84.7, 5939.0], [84.8, 5939.0], [84.9, 5940.0], [85.0, 5940.0], [85.1, 5944.0], [85.2, 5944.0], [85.3, 5945.0], [85.4, 5945.0], [85.5, 5946.0], [85.6, 5946.0], [85.7, 5946.0], [85.8, 5946.0], [85.9, 5946.0], [86.0, 5946.0], [86.1, 5947.0], [86.2, 5948.0], [86.3, 5949.0], [86.4, 5951.0], [86.5, 5951.0], [86.6, 5951.0], [86.7, 5951.0], [86.8, 5951.0], [86.9, 5952.0], [87.0, 5952.0], [87.1, 5952.0], [87.2, 5952.0], [87.3, 5953.0], [87.4, 5954.0], [87.5, 5954.0], [87.6, 5955.0], [87.7, 5957.0], [87.8, 5959.0], [87.9, 5959.0], [88.0, 5963.0], [88.1, 5963.0], [88.2, 5963.0], [88.3, 5967.0], [88.4, 5967.0], [88.5, 5967.0], [88.6, 5967.0], [88.7, 5970.0], [88.8, 5970.0], [88.9, 5970.0], [89.0, 5970.0], [89.1, 5970.0], [89.2, 5975.0], [89.3, 5975.0], [89.4, 5975.0], [89.5, 5976.0], [89.6, 5977.0], [89.7, 5977.0], [89.8, 5978.0], [89.9, 5978.0], [90.0, 5978.0], [90.1, 5982.0], [90.2, 5984.0], [90.3, 5986.0], [90.4, 5986.0], [90.5, 5989.0], [90.6, 5991.0], [90.7, 5992.0], [90.8, 5992.0], [90.9, 5992.0], [91.0, 5992.0], [91.1, 5993.0], [91.2, 5993.0], [91.3, 5994.0], [91.4, 5995.0], [91.5, 5995.0], [91.6, 5996.0], [91.7, 5997.0], [91.8, 6000.0], [91.9, 6001.0], [92.0, 6002.0], [92.1, 6003.0], [92.2, 6003.0], [92.3, 6004.0], [92.4, 6004.0], [92.5, 6005.0], [92.6, 6006.0], [92.7, 6006.0], [92.8, 6006.0], [92.9, 6006.0], [93.0, 6007.0], [93.1, 6009.0], [93.2, 6012.0], [93.3, 6012.0], [93.4, 6016.0], [93.5, 6017.0], [93.6, 6017.0], [93.7, 6018.0], [93.8, 6020.0], [93.9, 6021.0], [94.0, 6026.0], [94.1, 6028.0], [94.2, 6030.0], [94.3, 6030.0], [94.4, 6033.0], [94.5, 6034.0], [94.6, 6035.0], [94.7, 6035.0], [94.8, 6041.0], [94.9, 6042.0], [95.0, 6042.0], [95.1, 6042.0], [95.2, 6048.0], [95.3, 6054.0], [95.4, 6059.0], [95.5, 6066.0], [95.6, 6066.0], [95.7, 6067.0], [95.8, 6067.0], [95.9, 6072.0], [96.0, 6075.0], [96.1, 6091.0], [96.2, 6093.0], [96.3, 6094.0], [96.4, 6104.0], [96.5, 6104.0], [96.6, 6107.0], [96.7, 6110.0], [96.8, 6113.0], [96.9, 6141.0], [97.0, 6143.0], [97.1, 6145.0], [97.2, 6145.0], [97.3, 6152.0], [97.4, 6170.0], [97.5, 6183.0], [97.6, 6213.0], [97.7, 6242.0], [97.8, 6257.0], [97.9, 6257.0], [98.0, 6295.0], [98.1, 6313.0], [98.2, 6357.0], [98.3, 7338.0], [98.4, 7983.0], [98.5, 8669.0], [98.6, 8669.0], [98.7, 8781.0], [98.8, 9270.0], [98.9, 9369.0], [99.0, 9472.0], [99.1, 9764.0], [99.2, 9876.0], [99.3, 9876.0], [99.4, 9969.0], [99.5, 10080.0], [99.6, 10408.0], [99.7, 10511.0], [99.8, 10590.0], [99.9, 11032.0], [100.0, 11032.0]], "isOverall": false, "label": "/api/listings", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2800.0, "maxY": 111.0, "series": [{"data": [[8700.0, 1.0], [8600.0, 1.0], [8500.0, 1.0], [9200.0, 1.0], [9700.0, 2.0], [9500.0, 1.0], [9300.0, 1.0], [9600.0, 1.0], [10000.0, 2.0], [10200.0, 2.0], [9900.0, 1.0], [9800.0, 1.0], [10500.0, 1.0], [10700.0, 1.0], [10400.0, 1.0], [10300.0, 1.0], [11000.0, 2.0], [10900.0, 1.0], [11700.0, 1.0], [11500.0, 1.0], [12200.0, 1.0], [13200.0, 1.0], [5100.0, 27.0], [5000.0, 19.0], [5200.0, 53.0], [5300.0, 68.0], [5600.0, 110.0], [5400.0, 85.0], [5500.0, 100.0], [5700.0, 109.0], [5800.0, 107.0], [5900.0, 102.0], [6000.0, 37.0], [6100.0, 11.0], [6200.0, 4.0], [6300.0, 1.0], [7000.0, 1.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[8700.0, 1.0], [8600.0, 1.0], [9200.0, 1.0], [9400.0, 1.0], [9300.0, 1.0], [9700.0, 1.0], [10000.0, 1.0], [9900.0, 1.0], [9800.0, 1.0], [10500.0, 2.0], [10400.0, 1.0], [11000.0, 1.0], [2800.0, 1.0], [2900.0, 1.0], [3000.0, 1.0], [3300.0, 1.0], [3400.0, 1.0], [3500.0, 2.0], [3600.0, 1.0], [3800.0, 2.0], [5100.0, 27.0], [5000.0, 21.0], [5300.0, 73.0], [5200.0, 46.0], [5600.0, 109.0], [5500.0, 102.0], [5400.0, 84.0], [5800.0, 110.0], [5700.0, 111.0], [5900.0, 96.0], [6000.0, 40.0], [6100.0, 10.0], [6300.0, 2.0], [6200.0, 4.0], [7300.0, 1.0], [7900.0, 1.0]], "isOverall": false, "label": "/api/listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 13200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 10.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1710.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 10.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1710.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.4199999999999997, "minX": 1.6545906435E12, "maxY": 2.0, "series": [{"data": [[1.6545906675E12, 1.5], [1.6545906705E12, 1.5154639175257736], [1.6545906735E12, 1.518796992481204], [1.654590651E12, 1.4199999999999997], [1.6545906765E12, 1.5151515151515147], [1.654590654E12, 1.5217391304347825], [1.6545906585E12, 1.5660377358490567], [1.654590678E12, 1.5133333333333323], [1.654590681E12, 1.4999999999999996], [1.6545906615E12, 1.5000000000000002], [1.654590645E12, 2.0], [1.6545906645E12, 1.5], [1.654590669E12, 1.5752212389380527], [1.6545906465E12, 2.0], [1.654590672E12, 1.577319587628866], [1.6545906495E12, 1.8], [1.6545906525E12, 1.482758620689655], [1.6545906555E12, 1.4857142857142858], [1.654590675E12, 1.6043165467625904], [1.6545906795E12, 1.4999999999999998], [1.654590657E12, 1.5263157894736838], [1.65459066E12, 1.5232558139534884], [1.654590663E12, 1.5288461538461535], [1.654590666E12, 1.532608695652174], [1.6545906435E12, 2.0]], "isOverall": false, "label": "parallel bzm - Parallel", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654590681E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2999.0, "minX": 1.0, "maxY": 11557.0, "series": [{"data": [[2.0, 5851.0], [4.0, 5839.5], [5.0, 5837.0], [6.0, 5826.0], [8.0, 5965.0], [10.0, 5977.0], [12.0, 6034.0], [13.0, 6027.5], [14.0, 6311.0], [15.0, 6017.0], [16.0, 6297.0], [19.0, 6228.0], [21.0, 6188.0], [22.0, 6124.0], [23.0, 6131.0], [24.0, 6198.5], [25.0, 5541.0], [26.0, 5522.0], [27.0, 5565.0], [28.0, 5575.0], [30.0, 5539.0], [31.0, 5619.0], [33.0, 5656.0], [32.0, 5631.0], [35.0, 5693.0], [34.0, 5680.0], [37.0, 5725.0], [36.0, 5715.0], [39.0, 5753.0], [41.0, 5788.0], [40.0, 5763.0], [43.0, 5822.0], [42.0, 5599.0], [45.0, 5863.0], [44.0, 5849.0], [47.0, 5886.0], [46.0, 5344.0], [49.0, 5922.0], [48.0, 5895.0], [50.0, 5948.0], [53.0, 5984.666666666667], [55.0, 5377.0], [54.0, 5411.0], [56.0, 5358.0], [63.0, 5334.333333333333], [67.0, 5458.666666666667], [66.0, 5563.0], [64.0, 5472.0], [71.0, 5448.857142857143], [75.0, 5672.0], [74.0, 5645.0], [73.0, 5631.0], [72.0, 5621.0], [79.0, 5758.0], [78.0, 5731.0], [77.0, 5722.0], [76.0, 5699.0], [83.0, 5803.0], [82.0, 5793.0], [80.0, 5771.0], [86.0, 6156.5], [87.0, 5863.0], [85.0, 5855.0], [84.0, 5830.0], [91.0, 5218.0], [89.0, 6281.8], [88.0, 11557.0], [94.0, 5766.0], [93.0, 6707.0], [95.0, 7212.833333333334], [92.0, 5359.5], [98.0, 5449.666666666666], [97.0, 7490.125], [96.0, 8222.666666666666], [99.0, 5403.0], [103.0, 6473.222222222223], [102.0, 6101.666666666667], [101.0, 8789.749999999998], [100.0, 5422.0], [107.0, 5601.142857142857], [105.0, 5963.374999999999], [104.0, 6686.5], [106.0, 6463.4], [108.0, 7079.714285714286], [109.0, 6923.4], [111.0, 6400.6], [110.0, 5399.5], [113.0, 5732.0], [112.0, 5608.833333333333], [114.0, 5696.0], [115.0, 5635.0], [116.0, 5679.2], [119.0, 5662.333333333333], [118.0, 5528.4], [117.0, 5608.0], [122.0, 5633.25], [121.0, 5517.2], [120.0, 5484.5], [123.0, 5534.25], [126.0, 5810.666666666667], [125.0, 5526.5], [124.0, 5671.0], [130.0, 5820.0], [129.0, 5730.0], [128.0, 5630.333333333333], [135.0, 5499.444444444444], [132.0, 5493.833333333334], [134.0, 5250.5], [133.0, 5997.5], [131.0, 5961.0], [137.0, 5533.0], [136.0, 5584.0], [141.0, 5584.5], [140.0, 5293.0], [139.0, 5533.5], [138.0, 5404.75], [143.0, 5378.333333333333], [142.0, 5273.5], [146.0, 5767.4], [145.0, 5576.333333333333], [144.0, 5603.5], [151.0, 5480.285714285715], [150.0, 5689.0], [149.0, 5455.0], [147.0, 5481.0], [148.0, 5497.0], [154.0, 5830.166666666667], [158.0, 5496.25], [157.0, 5591.2], [156.0, 5384.0], [155.0, 5680.5], [153.0, 5644.0], [152.0, 5613.0], [159.0, 5499.2], [162.0, 5703.111111111111], [160.0, 5745.5], [167.0, 5746.4], [166.0, 5594.8], [165.0, 5518.0], [164.0, 5485.666666666667], [163.0, 5489.75], [161.0, 5536.0], [171.0, 5695.4], [172.0, 5301.666666666667], [170.0, 5662.875], [169.0, 5823.4], [168.0, 5590.8], [174.0, 5577.0], [173.0, 5744.75], [175.0, 5607.0], [179.0, 5621.2], [178.0, 5686.4], [177.0, 5553.714285714286], [176.0, 5444.142857142857], [183.0, 5523.5], [182.0, 5624.333333333333], [181.0, 5473.75], [180.0, 5482.25], [185.0, 5728.666666666667], [184.0, 5680.6], [191.0, 5640.0], [190.0, 5563.25], [189.0, 5482.5], [188.0, 5675.5], [187.0, 5635.0], [186.0, 5377.0], [194.0, 5689.25], [193.0, 5786.333333333333], [192.0, 5740.666666666667], [199.0, 5584.2], [198.0, 5617.833333333333], [197.0, 5633.5], [195.0, 5500.25], [196.0, 5699.0], [203.0, 5804.142857142857], [202.0, 5657.076923076923], [201.0, 5589.0], [200.0, 5571.090909090909], [207.0, 5511.333333333333], [205.0, 5529.166666666666], [204.0, 5790.4], [206.0, 5558.714285714285], [210.0, 5617.0], [209.0, 5621.545454545454], [208.0, 5638.6], [214.0, 5588.333333333334], [212.0, 5468.250000000001], [211.0, 5604.666666666667], [215.0, 5526.222222222223], [213.0, 5544.666666666667], [221.0, 5863.25], [220.0, 5692.6], [219.0, 5700.900000000001], [218.0, 5660.0], [216.0, 5647.909090909091], [223.0, 5569.875], [222.0, 5710.727272727272], [217.0, 5533.571428571428], [227.0, 5711.125], [226.0, 5763.399999999999], [225.0, 5753.833333333334], [224.0, 5638.363636363637], [231.0, 5766.333333333333], [230.0, 5786.0], [229.0, 5837.5], [228.0, 5738.625], [232.0, 5856.444444444444], [235.0, 5792.2], [234.0, 5908.666666666667], [233.0, 5886.666666666667], [238.0, 5948.0], [239.0, 5520.0], [237.0, 5954.0], [236.0, 5723.0], [241.0, 5870.5], [242.0, 6066.75], [240.0, 5905.333333333333], [244.0, 6033.5], [243.0, 5630.5], [245.0, 6069.5], [247.0, 6120.0], [246.0, 6120.5]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[160.47093023255823, 5784.333720930238]], "isOverall": false, "label": "/api/statistics/neighbourhoods-Aggregated", "isController": false}, {"data": [[3.0, 5857.0], [6.0, 5851.0], [7.0, 5939.0], [8.0, 5967.0], [9.0, 5975.0], [10.0, 5977.0], [11.0, 6034.0], [13.0, 5043.666666666667], [14.0, 6313.0], [15.0, 4308.0], [16.0, 6295.0], [17.0, 6091.0], [18.0, 4790.5], [20.0, 6177.5], [21.0, 2999.0], [22.0, 6146.0], [23.0, 4905.5], [24.0, 6141.0], [26.0, 5524.0], [27.0, 5550.0], [28.0, 5576.0], [29.0, 4334.666666666667], [31.0, 4489.5], [33.0, 5659.0], [32.0, 5632.0], [34.0, 5011.333333333333], [35.0, 5686.0], [36.0, 4679.0], [39.0, 5752.0], [38.0, 5559.5], [41.0, 5791.0], [40.0, 5764.0], [43.0, 5820.0], [42.0, 5811.0], [44.0, 5852.0], [47.0, 5888.0], [46.0, 5862.0], [49.0, 5924.0], [48.0, 5897.0], [51.0, 5992.0], [50.0, 5638.0], [53.0, 6018.0], [52.0, 5959.0], [55.0, 5375.0], [54.0, 5409.0], [56.0, 5356.0], [63.0, 5383.75], [67.0, 5399.0], [71.0, 5465.4], [68.0, 5539.0], [75.0, 5674.0], [74.0, 5658.0], [73.0, 5633.0], [72.0, 5619.0], [79.0, 5760.0], [78.0, 5734.0], [77.0, 5726.0], [76.0, 5700.0], [83.0, 5808.0], [82.0, 5796.0], [81.0, 5429.5], [86.0, 5941.25], [87.0, 5898.0], [85.0, 5857.0], [84.0, 5828.0], [91.0, 7311.5], [90.0, 5630.0], [89.0, 5907.0], [88.0, 5940.0], [95.0, 5499.5], [94.0, 5479.5], [92.0, 5631.5], [93.0, 5995.0], [99.0, 6066.8], [98.0, 5373.6], [97.0, 5242.166666666667], [96.0, 7410.5], [103.0, 6216.571428571428], [101.0, 6134.4], [102.0, 5928.444444444444], [100.0, 7260.6], [107.0, 6295.857142857142], [105.0, 5618.2], [104.0, 6845.142857142857], [106.0, 5616.75], [108.0, 6213.571428571428], [109.0, 5653.2], [111.0, 7210.333333333333], [110.0, 5334.333333333333], [113.0, 5604.25], [115.0, 5606.0], [114.0, 5698.333333333333], [112.0, 5591.666666666667], [116.0, 5668.25], [119.0, 5565.6], [118.0, 5767.0], [117.0, 5527.0], [122.0, 5774.333333333333], [121.0, 5626.0], [120.0, 5578.4], [123.0, 5413.5], [127.0, 5921.5], [126.0, 5811.5], [125.0, 5606.666666666667], [124.0, 5593.666666666667], [130.0, 5345.0], [129.0, 5722.333333333333], [135.0, 5486.454545454546], [134.0, 5488.0], [132.0, 5655.0], [133.0, 5763.333333333333], [131.0, 5944.0], [128.0, 5886.0], [137.0, 5686.5], [143.0, 5454.75], [142.0, 5608.5], [141.0, 5585.25], [140.0, 5494.333333333333], [138.0, 5355.2], [136.0, 5331.5], [139.0, 5307.5], [146.0, 5772.5], [145.0, 5646.0], [144.0, 5487.333333333334], [151.0, 5576.0], [150.0, 5595.666666666667], [149.0, 5594.0], [148.0, 5429.333333333333], [147.0, 5392.0], [154.0, 5696.0], [153.0, 5583.25], [152.0, 5587.0], [159.0, 5482.8], [158.0, 5621.0], [157.0, 5509.666666666666], [156.0, 5596.75], [155.0, 5649.0], [162.0, 5591.666666666667], [161.0, 5871.666666666667], [167.0, 5837.0], [166.0, 5629.25], [165.0, 5497.833333333334], [164.0, 5641.25], [163.0, 5520.428571428572], [160.0, 5739.0], [172.0, 5849.25], [171.0, 5749.6], [170.0, 5758.749999999999], [169.0, 5561.6], [168.0, 5650.0], [175.0, 5518.6], [174.0, 5587.666666666667], [173.0, 5481.5], [179.0, 5713.4], [178.0, 5717.0], [176.0, 5471.333333333334], [183.0, 5608.333333333333], [182.0, 5716.5], [180.0, 5565.25], [177.0, 5520.0], [181.0, 5433.0], [185.0, 5727.0], [184.0, 5609.285714285715], [191.0, 5628.5], [189.0, 5450.333333333333], [188.0, 5652.5], [187.0, 5495.5], [190.0, 5516.0], [186.0, 5537.0], [194.0, 5633.333333333333], [193.0, 5744.25], [192.0, 5549.333333333334], [199.0, 5665.0], [197.0, 5581.0], [196.0, 5741.0], [198.0, 5565.2], [195.0, 5593.333333333333], [203.0, 5653.083333333334], [201.0, 5589.75], [200.0, 5641.0], [206.0, 5675.875], [205.0, 5827.0], [204.0, 5790.8], [202.0, 5662.0], [207.0, 5359.4], [210.0, 5609.230769230769], [208.0, 5703.428571428572], [209.0, 5607.222222222223], [215.0, 5613.0], [214.0, 5517.428571428572], [212.0, 5614.333333333333], [213.0, 5515.833333333333], [211.0, 5514.0], [221.0, 5849.25], [220.0, 5651.333333333333], [219.0, 5681.166666666667], [218.0, 5601.333333333333], [217.0, 5663.0], [216.0, 5511.625000000001], [223.0, 5698.555555555556], [222.0, 5676.076923076923], [227.0, 5815.428571428572], [226.0, 5821.4], [225.0, 5653.642857142858], [224.0, 5690.4], [230.0, 5875.2], [229.0, 5853.25], [228.0, 5726.0], [231.0, 5746.666666666667], [232.0, 5809.0], [235.0, 5643.0], [234.0, 5775.8], [233.0, 5889.2], [239.0, 5976.75], [238.0, 5967.5], [237.0, 5759.75], [236.0, 5903.0], [240.0, 5346.666666666667], [241.0, 6019.25], [242.0, 5975.6], [244.0, 6018.666666666667], [243.0, 6143.0], [247.0, 6107.0], [246.0, 6139.666666666667], [245.0, 6067.0], [1.0, 5816.0]], "isOverall": false, "label": "/api/listings", "isController": false}, {"data": [[159.6011627906977, 5684.088372093023]], "isOverall": false, "label": "/api/listings-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 247.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 96.0, "minX": 1.6545906435E12, "maxY": 2086180.0, "series": [{"data": [[1.6545906675E12, 50224.0], [1.6545906705E12, 56648.0], [1.6545906735E12, 77672.0], [1.654590651E12, 44860.0], [1.6545906765E12, 57816.0], [1.654590654E12, 43776.0], [1.6545906585E12, 30952.0], [1.654590678E12, 87600.0], [1.654590681E12, 28032.0], [1.6545906615E12, 26864.0], [1.654590645E12, 1668944.0], [1.6545906645E12, 31536.0], [1.654590669E12, 65992.0], [1.6545906465E12, 417236.0], [1.654590672E12, 56648.0], [1.6545906495E12, 2920.0], [1.6545906525E12, 16936.0], [1.6545906555E12, 20440.0], [1.654590675E12, 81176.0], [1.6545906795E12, 39712.0], [1.654590657E12, 33288.0], [1.65459066E12, 50224.0], [1.654590663E12, 60736.0], [1.654590666E12, 53728.0], [1.6545906435E12, 2086180.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6545906675E12, 8743.333333333334], [1.6545906705E12, 9867.333333333334], [1.6545906735E12, 13516.0], [1.654590651E12, 5128.666666666667], [1.6545906765E12, 10070.666666666666], [1.654590654E12, 7032.0], [1.6545906585E12, 5394.0], [1.654590678E12, 15250.0], [1.654590681E12, 4880.0], [1.6545906615E12, 4676.666666666667], [1.654590645E12, 384.0], [1.6545906645E12, 5490.0], [1.654590669E12, 11482.666666666666], [1.6545906465E12, 96.0], [1.654590672E12, 9867.333333333334], [1.6545906495E12, 502.6666666666667], [1.6545906525E12, 2942.6666666666665], [1.6545906555E12, 3564.0], [1.654590675E12, 14126.0], [1.6545906795E12, 6913.333333333333], [1.654590657E12, 5789.333333333333], [1.65459066E12, 8743.333333333334], [1.654590663E12, 10573.333333333334], [1.654590666E12, 9353.333333333334], [1.6545906435E12, 480.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654590681E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3176.6, "minX": 1.6545906435E12, "maxY": 7400.551724137931, "series": [{"data": [[1.654590669E12, 5701.803571428572], [1.6545906675E12, 5598.674418604652], [1.654590672E12, 5687.816326530612], [1.6545906495E12, 6156.5], [1.6545906705E12, 5574.836734693879], [1.6545906525E12, 6089.071428571428], [1.6545906735E12, 5664.666666666665], [1.654590651E12, 7400.551724137931], [1.6545906555E12, 6174.000000000001], [1.6545906765E12, 5557.9], [1.654590654E12, 6934.027777777779], [1.654590675E12, 5788.579710144927], [1.6545906585E12, 5495.481481481482], [1.6545906795E12, 5672.558823529412], [1.654590657E12, 5645.642857142857], [1.654590678E12, 5654.146666666666], [1.65459066E12, 5543.720930232557], [1.654590681E12, 6041.041666666667], [1.654590663E12, 5621.692307692307], [1.6545906615E12, 5580.739130434783], [1.654590666E12, 5674.0], [1.6545906645E12, 5558.0370370370365]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.6545906675E12, 5620.697674418606], [1.6545906705E12, 5574.062500000001], [1.6545906735E12, 5668.955223880597], [1.654590651E12, 5932.238095238095], [1.6545906765E12, 5577.408163265307], [1.654590654E12, 6514.09090909091], [1.6545906585E12, 5505.3076923076915], [1.654590678E12, 5645.373333333333], [1.654590681E12, 6041.916666666667], [1.6545906615E12, 5579.652173913044], [1.654590645E12, 3664.0], [1.6545906645E12, 5561.555555555556], [1.654590669E12, 5694.578947368422], [1.6545906465E12, 3644.0], [1.654590672E12, 5660.25], [1.6545906495E12, 5965.666666666667], [1.6545906525E12, 6315.666666666667], [1.6545906555E12, 5895.64705882353], [1.654590675E12, 5793.571428571429], [1.6545906795E12, 5666.676470588234], [1.654590657E12, 5625.793103448275], [1.65459066E12, 5544.930232558142], [1.654590663E12, 5627.461538461537], [1.654590666E12, 5665.782608695652], [1.6545906435E12, 3176.6]], "isOverall": false, "label": "/api/listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654590681E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3168.6, "minX": 1.6545906435E12, "maxY": 7400.482758620689, "series": [{"data": [[1.654590669E12, 5701.767857142858], [1.6545906675E12, 5598.627906976745], [1.654590672E12, 5687.734693877551], [1.6545906495E12, 6156.5], [1.6545906705E12, 5574.836734693879], [1.6545906525E12, 6089.071428571428], [1.6545906735E12, 5664.60606060606], [1.654590651E12, 7400.482758620689], [1.6545906555E12, 6173.944444444445], [1.6545906765E12, 5557.9], [1.654590654E12, 6934.027777777779], [1.654590675E12, 5788.507246376812], [1.6545906585E12, 5495.481481481482], [1.6545906795E12, 5672.529411764705], [1.654590657E12, 5645.571428571429], [1.654590678E12, 5654.133333333335], [1.65459066E12, 5543.651162790698], [1.654590681E12, 6041.0], [1.654590663E12, 5621.615384615383], [1.6545906615E12, 5580.739130434783], [1.654590666E12, 5673.978260869564], [1.6545906645E12, 5557.999999999999]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.6545906675E12, 5620.6511627906975], [1.6545906705E12, 5574.020833333334], [1.6545906735E12, 5668.89552238806], [1.654590651E12, 5932.190476190476], [1.6545906765E12, 5577.34693877551], [1.654590654E12, 6514.030303030304], [1.6545906585E12, 5505.2692307692305], [1.654590678E12, 5645.333333333334], [1.654590681E12, 6041.916666666667], [1.6545906615E12, 5579.565217391305], [1.654590645E12, 3660.0], [1.6545906645E12, 5561.518518518517], [1.654590669E12, 5694.526315789474], [1.6545906465E12, 3641.0], [1.654590672E12, 5660.208333333331], [1.6545906495E12, 5965.333333333333], [1.6545906525E12, 6315.6], [1.6545906555E12, 5895.64705882353], [1.654590675E12, 5793.514285714285], [1.6545906795E12, 5666.64705882353], [1.654590657E12, 5625.7241379310335], [1.65459066E12, 5544.86046511628], [1.654590663E12, 5627.461538461537], [1.654590666E12, 5665.673913043478], [1.6545906435E12, 3168.6]], "isOverall": false, "label": "/api/listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654590681E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 18.652173913043477, "minX": 1.6545906435E12, "maxY": 175.75, "series": [{"data": [[1.654590669E12, 22.33928571428571], [1.6545906675E12, 25.162790697674417], [1.654590672E12, 25.285714285714285], [1.6545906495E12, 20.5], [1.6545906705E12, 22.632653061224488], [1.6545906525E12, 19.07142857142857], [1.6545906735E12, 24.36363636363636], [1.654590651E12, 45.17241379310344], [1.6545906555E12, 20.5], [1.6545906765E12, 24.48], [1.654590654E12, 20.361111111111118], [1.654590675E12, 28.53623188405797], [1.6545906585E12, 18.962962962962965], [1.6545906795E12, 33.91176470588235], [1.654590657E12, 21.67857142857143], [1.654590678E12, 25.786666666666672], [1.65459066E12, 18.697674418604652], [1.654590681E12, 126.87499999999997], [1.654590663E12, 21.865384615384624], [1.6545906615E12, 19.26086956521739], [1.654590666E12, 19.282608695652172], [1.6545906645E12, 20.222222222222218]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.6545906675E12, 25.813953488372096], [1.6545906705E12, 22.562499999999993], [1.6545906735E12, 25.82089552238806], [1.654590651E12, 19.476190476190478], [1.6545906765E12, 23.653061224489797], [1.654590654E12, 19.18181818181818], [1.6545906585E12, 18.76923076923077], [1.654590678E12, 25.946666666666665], [1.654590681E12, 134.54166666666666], [1.6545906615E12, 18.652173913043477], [1.654590645E12, 175.75], [1.6545906645E12, 20.481481481481477], [1.654590669E12, 23.192982456140353], [1.6545906465E12, 90.0], [1.654590672E12, 25.47916666666667], [1.6545906495E12, 30.0], [1.6545906525E12, 19.0], [1.6545906555E12, 21.235294117647054], [1.654590675E12, 29.314285714285717], [1.6545906795E12, 34.58823529411765], [1.654590657E12, 21.27586206896552], [1.65459066E12, 18.720930232558135], [1.654590663E12, 21.538461538461537], [1.654590666E12, 19.3695652173913], [1.6545906435E12, 27.6]], "isOverall": false, "label": "/api/listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654590681E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2842.0, "minX": 1.6545906435E12, "maxY": 3897.0, "series": [{"data": [[1.6545906465E12, 3644.0], [1.654590645E12, 3897.0], [1.6545906435E12, 3554.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6545906465E12, 3644.0], [1.654590645E12, 3897.0], [1.6545906435E12, 3554.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6545906465E12, 3644.0], [1.654590645E12, 3897.0], [1.6545906435E12, 3554.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6545906465E12, 3644.0], [1.654590645E12, 3897.0], [1.6545906435E12, 3554.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6545906465E12, 3644.0], [1.654590645E12, 3357.0], [1.6545906435E12, 2842.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6545906465E12, 3644.0], [1.654590645E12, 3701.0], [1.6545906435E12, 3059.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6545906465E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3351.5, "minX": 2.0, "maxY": 5896.5, "series": [{"data": [[2.0, 3351.5], [3.0, 3491.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 5570.0], [34.0, 5722.5], [35.0, 5613.0], [36.0, 5789.0], [38.0, 5546.5], [40.0, 5584.0], [46.0, 5551.0], [48.0, 5876.0], [54.0, 5560.0], [56.0, 5591.0], [58.0, 5723.5], [60.0, 5733.5], [62.0, 5614.0], [68.0, 5692.5], [70.0, 5610.0], [71.0, 5648.0], [72.0, 5644.0], [75.0, 5604.0], [77.0, 5685.0], [79.0, 5615.0], [5.0, 5336.0], [82.0, 5713.0], [83.0, 5638.0], [84.0, 5896.5], [14.0, 5504.0], [29.0, 5658.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 84.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 3338.5, "minX": 2.0, "maxY": 5896.5, "series": [{"data": [[2.0, 3338.5], [3.0, 3487.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 5569.5], [34.0, 5722.0], [35.0, 5613.0], [36.0, 5789.0], [38.0, 5546.5], [40.0, 5584.0], [46.0, 5551.0], [48.0, 5876.0], [54.0, 5560.0], [56.0, 5590.5], [58.0, 5723.5], [60.0, 5733.5], [62.0, 5614.0], [68.0, 5692.5], [70.0, 5610.0], [71.0, 5648.0], [72.0, 5644.0], [75.0, 5604.0], [77.0, 5685.0], [79.0, 5615.0], [5.0, 5336.0], [82.0, 5713.0], [83.0, 5638.0], [84.0, 5896.5], [14.0, 5504.0], [29.0, 5658.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 84.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.6545906405E12, "maxY": 80.0, "series": [{"data": [[1.654590648E12, 24.0], [1.654590669E12, 80.0], [1.6545906465E12, 24.0], [1.6545906675E12, 78.66666666666667], [1.654590672E12, 80.0], [1.6545906495E12, 30.666666666666668], [1.6545906705E12, 80.0], [1.6545906525E12, 38.666666666666664], [1.6545906735E12, 80.0], [1.654590651E12, 32.0], [1.6545906555E12, 48.0], [1.654590654E12, 40.0], [1.654590675E12, 34.666666666666664], [1.6545906585E12, 54.666666666666664], [1.654590657E12, 48.0], [1.65459066E12, 56.0], [1.654590642E12, 8.0], [1.654590663E12, 62.666666666666664], [1.6545906405E12, 8.0], [1.6545906615E12, 64.0], [1.654590645E12, 16.0], [1.654590666E12, 72.0], [1.6545906435E12, 14.666666666666666], [1.6545906645E12, 72.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654590675E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.6545906435E12, "maxY": 100.0, "series": [{"data": [[1.6545906465E12, 0.6666666666666666], [1.654590645E12, 2.6666666666666665], [1.6545906435E12, 3.3333333333333335]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.654590651E12, 6.0], [1.654590654E12, 1.3333333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.654590669E12, 75.33333333333333], [1.6545906675E12, 57.333333333333336], [1.654590672E12, 64.66666666666667], [1.6545906495E12, 3.3333333333333335], [1.6545906705E12, 64.66666666666667], [1.6545906525E12, 19.333333333333332], [1.6545906735E12, 88.66666666666667], [1.654590651E12, 27.333333333333332], [1.6545906555E12, 23.333333333333332], [1.6545906765E12, 66.0], [1.654590654E12, 44.666666666666664], [1.654590675E12, 92.66666666666667], [1.6545906585E12, 35.333333333333336], [1.6545906795E12, 45.333333333333336], [1.654590657E12, 38.0], [1.654590678E12, 100.0], [1.65459066E12, 57.333333333333336], [1.654590681E12, 32.0], [1.654590663E12, 69.33333333333333], [1.6545906615E12, 30.666666666666668], [1.654590666E12, 61.333333333333336], [1.6545906645E12, 36.0]], "isOverall": false, "label": "404", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654590681E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.6545906435E12, "maxY": 50.0, "series": [{"data": [[1.654590669E12, 38.0], [1.6545906675E12, 28.666666666666668], [1.654590672E12, 32.0], [1.6545906495E12, 2.0], [1.6545906705E12, 32.0], [1.6545906525E12, 10.0], [1.6545906735E12, 44.666666666666664], [1.654590651E12, 14.0], [1.6545906555E12, 11.333333333333334], [1.6545906765E12, 32.666666666666664], [1.654590654E12, 22.0], [1.654590675E12, 46.666666666666664], [1.6545906585E12, 17.333333333333332], [1.6545906795E12, 22.666666666666668], [1.654590657E12, 19.333333333333332], [1.654590678E12, 50.0], [1.65459066E12, 28.666666666666668], [1.654590681E12, 16.0], [1.654590663E12, 34.666666666666664], [1.6545906615E12, 15.333333333333334], [1.654590666E12, 30.666666666666668], [1.6545906645E12, 18.0]], "isOverall": false, "label": "/api/listings-failure", "isController": false}, {"data": [[1.6545906465E12, 0.6666666666666666], [1.654590645E12, 2.6666666666666665], [1.6545906435E12, 3.3333333333333335]], "isOverall": false, "label": "/api/listings-success", "isController": false}, {"data": [[1.654590669E12, 37.333333333333336], [1.6545906675E12, 28.666666666666668], [1.654590672E12, 32.666666666666664], [1.6545906495E12, 1.3333333333333333], [1.6545906705E12, 32.666666666666664], [1.6545906525E12, 9.333333333333334], [1.6545906735E12, 44.0], [1.654590651E12, 19.333333333333332], [1.6545906555E12, 12.0], [1.6545906765E12, 33.333333333333336], [1.654590654E12, 24.0], [1.654590675E12, 46.0], [1.6545906585E12, 18.0], [1.6545906795E12, 22.666666666666668], [1.654590657E12, 18.666666666666668], [1.654590678E12, 50.0], [1.65459066E12, 28.666666666666668], [1.654590681E12, 16.0], [1.654590663E12, 34.666666666666664], [1.6545906615E12, 15.333333333333334], [1.654590666E12, 30.666666666666668], [1.6545906645E12, 18.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654590681E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.6545906435E12, "maxY": 100.0, "series": [{"data": [[1.6545906465E12, 0.6666666666666666], [1.654590645E12, 2.6666666666666665], [1.6545906435E12, 3.3333333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.654590669E12, 75.33333333333333], [1.6545906675E12, 57.333333333333336], [1.654590672E12, 64.66666666666667], [1.6545906495E12, 3.3333333333333335], [1.6545906705E12, 64.66666666666667], [1.6545906525E12, 19.333333333333332], [1.6545906735E12, 88.66666666666667], [1.654590651E12, 33.333333333333336], [1.6545906555E12, 23.333333333333332], [1.6545906765E12, 66.0], [1.654590654E12, 46.0], [1.654590675E12, 92.66666666666667], [1.6545906585E12, 35.333333333333336], [1.6545906795E12, 45.333333333333336], [1.654590657E12, 38.0], [1.654590678E12, 100.0], [1.65459066E12, 57.333333333333336], [1.654590681E12, 32.0], [1.654590663E12, 69.33333333333333], [1.6545906615E12, 30.666666666666668], [1.654590666E12, 61.333333333333336], [1.6545906645E12, 36.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654590681E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

