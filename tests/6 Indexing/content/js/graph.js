/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 62.0, "minX": 0.0, "maxY": 12492.0, "series": [{"data": [[0.0, 397.0], [0.1, 397.0], [0.2, 397.0], [0.3, 397.0], [0.4, 397.0], [0.5, 405.0], [0.6, 405.0], [0.7, 405.0], [0.8, 405.0], [0.9, 405.0], [1.0, 408.0], [1.1, 408.0], [1.2, 408.0], [1.3, 408.0], [1.4, 410.0], [1.5, 410.0], [1.6, 410.0], [1.7, 410.0], [1.8, 410.0], [1.9, 410.0], [2.0, 410.0], [2.1, 410.0], [2.2, 410.0], [2.3, 410.0], [2.4, 410.0], [2.5, 410.0], [2.6, 410.0], [2.7, 410.0], [2.8, 414.0], [2.9, 414.0], [3.0, 414.0], [3.1, 414.0], [3.2, 414.0], [3.3, 418.0], [3.4, 418.0], [3.5, 418.0], [3.6, 418.0], [3.7, 418.0], [3.8, 419.0], [3.9, 419.0], [4.0, 419.0], [4.1, 419.0], [4.2, 420.0], [4.3, 420.0], [4.4, 420.0], [4.5, 420.0], [4.6, 420.0], [4.7, 421.0], [4.8, 421.0], [4.9, 421.0], [5.0, 421.0], [5.1, 421.0], [5.2, 427.0], [5.3, 427.0], [5.4, 427.0], [5.5, 427.0], [5.6, 428.0], [5.7, 428.0], [5.8, 428.0], [5.9, 428.0], [6.0, 428.0], [6.1, 433.0], [6.2, 433.0], [6.3, 433.0], [6.4, 433.0], [6.5, 433.0], [6.6, 436.0], [6.7, 436.0], [6.8, 436.0], [6.9, 436.0], [7.0, 445.0], [7.1, 445.0], [7.2, 445.0], [7.3, 445.0], [7.4, 445.0], [7.5, 452.0], [7.6, 452.0], [7.7, 452.0], [7.8, 452.0], [7.9, 452.0], [8.0, 455.0], [8.1, 455.0], [8.2, 455.0], [8.3, 455.0], [8.4, 456.0], [8.5, 456.0], [8.6, 456.0], [8.7, 456.0], [8.8, 456.0], [8.9, 462.0], [9.0, 462.0], [9.1, 462.0], [9.2, 462.0], [9.3, 462.0], [9.4, 467.0], [9.5, 467.0], [9.6, 467.0], [9.7, 467.0], [9.8, 468.0], [9.9, 468.0], [10.0, 468.0], [10.1, 468.0], [10.2, 468.0], [10.3, 470.0], [10.4, 470.0], [10.5, 470.0], [10.6, 470.0], [10.7, 472.0], [10.8, 472.0], [10.9, 472.0], [11.0, 472.0], [11.1, 472.0], [11.2, 478.0], [11.3, 478.0], [11.4, 478.0], [11.5, 478.0], [11.6, 478.0], [11.7, 479.0], [11.8, 479.0], [11.9, 479.0], [12.0, 479.0], [12.1, 483.0], [12.2, 483.0], [12.3, 483.0], [12.4, 483.0], [12.5, 483.0], [12.6, 483.0], [12.7, 483.0], [12.8, 483.0], [12.9, 483.0], [13.0, 483.0], [13.1, 491.0], [13.2, 491.0], [13.3, 491.0], [13.4, 491.0], [13.5, 491.0], [13.6, 491.0], [13.7, 491.0], [13.8, 491.0], [13.9, 491.0], [14.0, 498.0], [14.1, 498.0], [14.2, 498.0], [14.3, 498.0], [14.4, 498.0], [14.5, 505.0], [14.6, 505.0], [14.7, 505.0], [14.8, 505.0], [14.9, 507.0], [15.0, 507.0], [15.1, 507.0], [15.2, 507.0], [15.3, 507.0], [15.4, 507.0], [15.5, 507.0], [15.6, 507.0], [15.7, 507.0], [15.8, 507.0], [15.9, 514.0], [16.0, 514.0], [16.1, 514.0], [16.2, 514.0], [16.3, 522.0], [16.4, 522.0], [16.5, 522.0], [16.6, 522.0], [16.7, 522.0], [16.8, 528.0], [16.9, 528.0], [17.0, 528.0], [17.1, 528.0], [17.2, 528.0], [17.3, 531.0], [17.4, 531.0], [17.5, 531.0], [17.6, 531.0], [17.7, 531.0], [17.8, 531.0], [17.9, 531.0], [18.0, 531.0], [18.1, 531.0], [18.2, 533.0], [18.3, 533.0], [18.4, 533.0], [18.5, 533.0], [18.6, 533.0], [18.7, 551.0], [18.8, 551.0], [18.9, 551.0], [19.0, 551.0], [19.1, 630.0], [19.2, 630.0], [19.3, 630.0], [19.4, 630.0], [19.5, 630.0], [19.6, 649.0], [19.7, 649.0], [19.8, 649.0], [19.9, 649.0], [20.0, 649.0], [20.1, 650.0], [20.2, 650.0], [20.3, 650.0], [20.4, 650.0], [20.5, 692.0], [20.6, 692.0], [20.7, 692.0], [20.8, 692.0], [20.9, 692.0], [21.0, 693.0], [21.1, 693.0], [21.2, 693.0], [21.3, 693.0], [21.4, 709.0], [21.5, 709.0], [21.6, 709.0], [21.7, 709.0], [21.8, 709.0], [21.9, 723.0], [22.0, 723.0], [22.1, 723.0], [22.2, 723.0], [22.3, 723.0], [22.4, 738.0], [22.5, 738.0], [22.6, 738.0], [22.7, 738.0], [22.8, 742.0], [22.9, 742.0], [23.0, 742.0], [23.1, 742.0], [23.2, 742.0], [23.3, 748.0], [23.4, 748.0], [23.5, 748.0], [23.6, 748.0], [23.7, 748.0], [23.8, 769.0], [23.9, 769.0], [24.0, 769.0], [24.1, 769.0], [24.2, 790.0], [24.3, 790.0], [24.4, 790.0], [24.5, 790.0], [24.6, 790.0], [24.7, 794.0], [24.8, 794.0], [24.9, 794.0], [25.0, 794.0], [25.1, 794.0], [25.2, 825.0], [25.3, 825.0], [25.4, 825.0], [25.5, 825.0], [25.6, 846.0], [25.7, 846.0], [25.8, 846.0], [25.9, 846.0], [26.0, 846.0], [26.1, 953.0], [26.2, 953.0], [26.3, 953.0], [26.4, 953.0], [26.5, 953.0], [26.6, 1122.0], [26.7, 1122.0], [26.8, 1122.0], [26.9, 1122.0], [27.0, 1139.0], [27.1, 1139.0], [27.2, 1139.0], [27.3, 1139.0], [27.4, 1139.0], [27.5, 1225.0], [27.6, 1225.0], [27.7, 1225.0], [27.8, 1225.0], [27.9, 1225.0], [28.0, 1254.0], [28.1, 1254.0], [28.2, 1254.0], [28.3, 1254.0], [28.4, 1368.0], [28.5, 1368.0], [28.6, 1368.0], [28.7, 1368.0], [28.8, 1368.0], [28.9, 1439.0], [29.0, 1439.0], [29.1, 1439.0], [29.2, 1439.0], [29.3, 1439.0], [29.4, 1459.0], [29.5, 1459.0], [29.6, 1459.0], [29.7, 1459.0], [29.8, 1475.0], [29.9, 1475.0], [30.0, 1475.0], [30.1, 1475.0], [30.2, 1475.0], [30.3, 1517.0], [30.4, 1517.0], [30.5, 1517.0], [30.6, 1517.0], [30.7, 1581.0], [30.8, 1581.0], [30.9, 1581.0], [31.0, 1581.0], [31.1, 1581.0], [31.2, 1746.0], [31.3, 1746.0], [31.4, 1746.0], [31.5, 1746.0], [31.6, 1746.0], [31.7, 1775.0], [31.8, 1775.0], [31.9, 1775.0], [32.0, 1775.0], [32.1, 1776.0], [32.2, 1776.0], [32.3, 1776.0], [32.4, 1776.0], [32.5, 1776.0], [32.6, 1806.0], [32.7, 1806.0], [32.8, 1806.0], [32.9, 1806.0], [33.0, 1806.0], [33.1, 1826.0], [33.2, 1826.0], [33.3, 1826.0], [33.4, 1826.0], [33.5, 1885.0], [33.6, 1885.0], [33.7, 1885.0], [33.8, 1885.0], [33.9, 1885.0], [34.0, 1934.0], [34.1, 1934.0], [34.2, 1934.0], [34.3, 1934.0], [34.4, 1934.0], [34.5, 1956.0], [34.6, 1956.0], [34.7, 1956.0], [34.8, 1956.0], [34.9, 1970.0], [35.0, 1970.0], [35.1, 1970.0], [35.2, 1970.0], [35.3, 1970.0], [35.4, 2082.0], [35.5, 2082.0], [35.6, 2082.0], [35.7, 2082.0], [35.8, 2082.0], [35.9, 2103.0], [36.0, 2103.0], [36.1, 2103.0], [36.2, 2103.0], [36.3, 2179.0], [36.4, 2179.0], [36.5, 2179.0], [36.6, 2179.0], [36.7, 2179.0], [36.8, 2311.0], [36.9, 2311.0], [37.0, 2311.0], [37.1, 2311.0], [37.2, 2311.0], [37.3, 2370.0], [37.4, 2370.0], [37.5, 2370.0], [37.6, 2370.0], [37.7, 2446.0], [37.8, 2446.0], [37.9, 2446.0], [38.0, 2446.0], [38.1, 2446.0], [38.2, 2526.0], [38.3, 2526.0], [38.4, 2526.0], [38.5, 2526.0], [38.6, 2526.0], [38.7, 2527.0], [38.8, 2527.0], [38.9, 2527.0], [39.0, 2527.0], [39.1, 2582.0], [39.2, 2582.0], [39.3, 2582.0], [39.4, 2582.0], [39.5, 2582.0], [39.6, 2604.0], [39.7, 2604.0], [39.8, 2604.0], [39.9, 2604.0], [40.0, 2604.0], [40.1, 2664.0], [40.2, 2664.0], [40.3, 2664.0], [40.4, 2664.0], [40.5, 2704.0], [40.6, 2704.0], [40.7, 2704.0], [40.8, 2704.0], [40.9, 2704.0], [41.0, 2820.0], [41.1, 2820.0], [41.2, 2820.0], [41.3, 2820.0], [41.4, 2957.0], [41.5, 2957.0], [41.6, 2957.0], [41.7, 2957.0], [41.8, 2957.0], [41.9, 2982.0], [42.0, 2982.0], [42.1, 2982.0], [42.2, 2982.0], [42.3, 2982.0], [42.4, 3043.0], [42.5, 3043.0], [42.6, 3043.0], [42.7, 3043.0], [42.8, 3087.0], [42.9, 3087.0], [43.0, 3087.0], [43.1, 3087.0], [43.2, 3087.0], [43.3, 3098.0], [43.4, 3098.0], [43.5, 3098.0], [43.6, 3098.0], [43.7, 3098.0], [43.8, 3162.0], [43.9, 3162.0], [44.0, 3162.0], [44.1, 3162.0], [44.2, 3235.0], [44.3, 3235.0], [44.4, 3235.0], [44.5, 3235.0], [44.6, 3235.0], [44.7, 3372.0], [44.8, 3372.0], [44.9, 3372.0], [45.0, 3372.0], [45.1, 3372.0], [45.2, 3428.0], [45.3, 3428.0], [45.4, 3428.0], [45.5, 3428.0], [45.6, 3470.0], [45.7, 3470.0], [45.8, 3470.0], [45.9, 3470.0], [46.0, 3470.0], [46.1, 3533.0], [46.2, 3533.0], [46.3, 3533.0], [46.4, 3533.0], [46.5, 3533.0], [46.6, 3538.0], [46.7, 3538.0], [46.8, 3538.0], [46.9, 3538.0], [47.0, 3598.0], [47.1, 3598.0], [47.2, 3598.0], [47.3, 3598.0], [47.4, 3598.0], [47.5, 3604.0], [47.6, 3604.0], [47.7, 3604.0], [47.8, 3604.0], [47.9, 3604.0], [48.0, 3606.0], [48.1, 3606.0], [48.2, 3606.0], [48.3, 3606.0], [48.4, 3608.0], [48.5, 3608.0], [48.6, 3608.0], [48.7, 3608.0], [48.8, 3608.0], [48.9, 3706.0], [49.0, 3706.0], [49.1, 3706.0], [49.2, 3706.0], [49.3, 3706.0], [49.4, 3758.0], [49.5, 3758.0], [49.6, 3758.0], [49.7, 3758.0], [49.8, 3870.0], [49.9, 3870.0], [50.0, 3870.0], [50.1, 3870.0], [50.2, 3870.0], [50.3, 3938.0], [50.4, 3938.0], [50.5, 3938.0], [50.6, 3938.0], [50.7, 3962.0], [50.8, 3962.0], [50.9, 3962.0], [51.0, 3962.0], [51.1, 3962.0], [51.2, 3986.0], [51.3, 3986.0], [51.4, 3986.0], [51.5, 3986.0], [51.6, 3986.0], [51.7, 4089.0], [51.8, 4089.0], [51.9, 4089.0], [52.0, 4089.0], [52.1, 4091.0], [52.2, 4091.0], [52.3, 4091.0], [52.4, 4091.0], [52.5, 4091.0], [52.6, 4315.0], [52.7, 4315.0], [52.8, 4315.0], [52.9, 4315.0], [53.0, 4315.0], [53.1, 4411.0], [53.2, 4411.0], [53.3, 4411.0], [53.4, 4411.0], [53.5, 4472.0], [53.6, 4472.0], [53.7, 4472.0], [53.8, 4472.0], [53.9, 4472.0], [54.0, 4528.0], [54.1, 4528.0], [54.2, 4528.0], [54.3, 4528.0], [54.4, 4528.0], [54.5, 4594.0], [54.6, 4594.0], [54.7, 4594.0], [54.8, 4594.0], [54.9, 4619.0], [55.0, 4619.0], [55.1, 4619.0], [55.2, 4619.0], [55.3, 4619.0], [55.4, 4648.0], [55.5, 4648.0], [55.6, 4648.0], [55.7, 4648.0], [55.8, 4648.0], [55.9, 4675.0], [56.0, 4675.0], [56.1, 4675.0], [56.2, 4675.0], [56.3, 4749.0], [56.4, 4749.0], [56.5, 4749.0], [56.6, 4749.0], [56.7, 4749.0], [56.8, 4788.0], [56.9, 4788.0], [57.0, 4788.0], [57.1, 4788.0], [57.2, 4788.0], [57.3, 4803.0], [57.4, 4803.0], [57.5, 4803.0], [57.6, 4803.0], [57.7, 4871.0], [57.8, 4871.0], [57.9, 4871.0], [58.0, 4871.0], [58.1, 4871.0], [58.2, 4967.0], [58.3, 4967.0], [58.4, 4967.0], [58.5, 4967.0], [58.6, 4967.0], [58.7, 5076.0], [58.8, 5076.0], [58.9, 5076.0], [59.0, 5076.0], [59.1, 5121.0], [59.2, 5121.0], [59.3, 5121.0], [59.4, 5121.0], [59.5, 5121.0], [59.6, 5125.0], [59.7, 5125.0], [59.8, 5125.0], [59.9, 5125.0], [60.0, 5125.0], [60.1, 5179.0], [60.2, 5179.0], [60.3, 5179.0], [60.4, 5179.0], [60.5, 5230.0], [60.6, 5230.0], [60.7, 5230.0], [60.8, 5230.0], [60.9, 5230.0], [61.0, 5368.0], [61.1, 5368.0], [61.2, 5368.0], [61.3, 5368.0], [61.4, 5369.0], [61.5, 5369.0], [61.6, 5369.0], [61.7, 5369.0], [61.8, 5369.0], [61.9, 5419.0], [62.0, 5419.0], [62.1, 5419.0], [62.2, 5419.0], [62.3, 5419.0], [62.4, 5428.0], [62.5, 5428.0], [62.6, 5428.0], [62.7, 5428.0], [62.8, 5460.0], [62.9, 5460.0], [63.0, 5460.0], [63.1, 5460.0], [63.2, 5460.0], [63.3, 5577.0], [63.4, 5577.0], [63.5, 5577.0], [63.6, 5577.0], [63.7, 5577.0], [63.8, 5613.0], [63.9, 5613.0], [64.0, 5613.0], [64.1, 5613.0], [64.2, 5620.0], [64.3, 5620.0], [64.4, 5620.0], [64.5, 5620.0], [64.6, 5620.0], [64.7, 5638.0], [64.8, 5638.0], [64.9, 5638.0], [65.0, 5638.0], [65.1, 5638.0], [65.2, 5863.0], [65.3, 5863.0], [65.4, 5863.0], [65.5, 5863.0], [65.6, 5887.0], [65.7, 5887.0], [65.8, 5887.0], [65.9, 5887.0], [66.0, 5887.0], [66.1, 5916.0], [66.2, 5916.0], [66.3, 5916.0], [66.4, 5916.0], [66.5, 5916.0], [66.6, 5986.0], [66.7, 5986.0], [66.8, 5986.0], [66.9, 5986.0], [67.0, 5994.0], [67.1, 5994.0], [67.2, 5994.0], [67.3, 5994.0], [67.4, 5994.0], [67.5, 6178.0], [67.6, 6178.0], [67.7, 6178.0], [67.8, 6178.0], [67.9, 6178.0], [68.0, 6233.0], [68.1, 6233.0], [68.2, 6233.0], [68.3, 6233.0], [68.4, 6293.0], [68.5, 6293.0], [68.6, 6293.0], [68.7, 6293.0], [68.8, 6293.0], [68.9, 6358.0], [69.0, 6358.0], [69.1, 6358.0], [69.2, 6358.0], [69.3, 6358.0], [69.4, 6369.0], [69.5, 6369.0], [69.6, 6369.0], [69.7, 6369.0], [69.8, 6411.0], [69.9, 6411.0], [70.0, 6411.0], [70.1, 6411.0], [70.2, 6411.0], [70.3, 6454.0], [70.4, 6454.0], [70.5, 6454.0], [70.6, 6454.0], [70.7, 6594.0], [70.8, 6594.0], [70.9, 6594.0], [71.0, 6594.0], [71.1, 6594.0], [71.2, 6598.0], [71.3, 6598.0], [71.4, 6598.0], [71.5, 6598.0], [71.6, 6598.0], [71.7, 6614.0], [71.8, 6614.0], [71.9, 6614.0], [72.0, 6614.0], [72.1, 6726.0], [72.2, 6726.0], [72.3, 6726.0], [72.4, 6726.0], [72.5, 6726.0], [72.6, 6781.0], [72.7, 6781.0], [72.8, 6781.0], [72.9, 6781.0], [73.0, 6781.0], [73.1, 6799.0], [73.2, 6799.0], [73.3, 6799.0], [73.4, 6799.0], [73.5, 6810.0], [73.6, 6810.0], [73.7, 6810.0], [73.8, 6810.0], [73.9, 6810.0], [74.0, 6881.0], [74.1, 6881.0], [74.2, 6881.0], [74.3, 6881.0], [74.4, 6881.0], [74.5, 6882.0], [74.6, 6882.0], [74.7, 6882.0], [74.8, 6882.0], [74.9, 7105.0], [75.0, 7105.0], [75.1, 7105.0], [75.2, 7105.0], [75.3, 7105.0], [75.4, 7158.0], [75.5, 7158.0], [75.6, 7158.0], [75.7, 7158.0], [75.8, 7158.0], [75.9, 7199.0], [76.0, 7199.0], [76.1, 7199.0], [76.2, 7199.0], [76.3, 7241.0], [76.4, 7241.0], [76.5, 7241.0], [76.6, 7241.0], [76.7, 7241.0], [76.8, 7277.0], [76.9, 7277.0], [77.0, 7277.0], [77.1, 7277.0], [77.2, 7277.0], [77.3, 7372.0], [77.4, 7372.0], [77.5, 7372.0], [77.6, 7372.0], [77.7, 7397.0], [77.8, 7397.0], [77.9, 7397.0], [78.0, 7397.0], [78.1, 7397.0], [78.2, 7400.0], [78.3, 7400.0], [78.4, 7400.0], [78.5, 7400.0], [78.6, 7400.0], [78.7, 7400.0], [78.8, 7400.0], [78.9, 7400.0], [79.0, 7400.0], [79.1, 7492.0], [79.2, 7492.0], [79.3, 7492.0], [79.4, 7492.0], [79.5, 7492.0], [79.6, 7576.0], [79.7, 7576.0], [79.8, 7576.0], [79.9, 7576.0], [80.0, 7592.0], [80.1, 7592.0], [80.2, 7592.0], [80.3, 7592.0], [80.4, 7592.0], [80.5, 7617.0], [80.6, 7617.0], [80.7, 7617.0], [80.8, 7617.0], [80.9, 7617.0], [81.0, 7678.0], [81.1, 7678.0], [81.2, 7678.0], [81.3, 7678.0], [81.4, 7682.0], [81.5, 7682.0], [81.6, 7682.0], [81.7, 7682.0], [81.8, 7682.0], [81.9, 7702.0], [82.0, 7702.0], [82.1, 7702.0], [82.2, 7702.0], [82.3, 7702.0], [82.4, 7706.0], [82.5, 7706.0], [82.6, 7706.0], [82.7, 7706.0], [82.8, 7706.0], [82.9, 7706.0], [83.0, 7706.0], [83.1, 7706.0], [83.2, 7706.0], [83.3, 7719.0], [83.4, 7719.0], [83.5, 7719.0], [83.6, 7719.0], [83.7, 7719.0], [83.8, 7751.0], [83.9, 7751.0], [84.0, 7751.0], [84.1, 7751.0], [84.2, 7896.0], [84.3, 7896.0], [84.4, 7896.0], [84.5, 7896.0], [84.6, 7896.0], [84.7, 8002.0], [84.8, 8002.0], [84.9, 8002.0], [85.0, 8002.0], [85.1, 8002.0], [85.2, 8041.0], [85.3, 8041.0], [85.4, 8041.0], [85.5, 8041.0], [85.6, 8084.0], [85.7, 8084.0], [85.8, 8084.0], [85.9, 8084.0], [86.0, 8084.0], [86.1, 8110.0], [86.2, 8110.0], [86.3, 8110.0], [86.4, 8110.0], [86.5, 8110.0], [86.6, 8210.0], [86.7, 8210.0], [86.8, 8210.0], [86.9, 8210.0], [87.0, 8212.0], [87.1, 8212.0], [87.2, 8212.0], [87.3, 8212.0], [87.4, 8212.0], [87.5, 8273.0], [87.6, 8273.0], [87.7, 8273.0], [87.8, 8273.0], [87.9, 8273.0], [88.0, 8300.0], [88.1, 8300.0], [88.2, 8300.0], [88.3, 8300.0], [88.4, 8306.0], [88.5, 8306.0], [88.6, 8306.0], [88.7, 8306.0], [88.8, 8306.0], [88.9, 8317.0], [89.0, 8317.0], [89.1, 8317.0], [89.2, 8317.0], [89.3, 8317.0], [89.4, 8387.0], [89.5, 8387.0], [89.6, 8387.0], [89.7, 8387.0], [89.8, 8392.0], [89.9, 8392.0], [90.0, 8392.0], [90.1, 8392.0], [90.2, 8392.0], [90.3, 8426.0], [90.4, 8426.0], [90.5, 8426.0], [90.6, 8426.0], [90.7, 8490.0], [90.8, 8490.0], [90.9, 8490.0], [91.0, 8490.0], [91.1, 8490.0], [91.2, 8625.0], [91.3, 8625.0], [91.4, 8625.0], [91.5, 8625.0], [91.6, 8625.0], [91.7, 8733.0], [91.8, 8733.0], [91.9, 8733.0], [92.0, 8733.0], [92.1, 8944.0], [92.2, 8944.0], [92.3, 8944.0], [92.4, 8944.0], [92.5, 8944.0], [92.6, 8960.0], [92.7, 8960.0], [92.8, 8960.0], [92.9, 8960.0], [93.0, 8960.0], [93.1, 9005.0], [93.2, 9005.0], [93.3, 9005.0], [93.4, 9005.0], [93.5, 9015.0], [93.6, 9015.0], [93.7, 9015.0], [93.8, 9015.0], [93.9, 9015.0], [94.0, 9040.0], [94.1, 9040.0], [94.2, 9040.0], [94.3, 9040.0], [94.4, 9040.0], [94.5, 9104.0], [94.6, 9104.0], [94.7, 9104.0], [94.8, 9104.0], [94.9, 9510.0], [95.0, 9510.0], [95.1, 9510.0], [95.2, 9510.0], [95.3, 9510.0], [95.4, 9793.0], [95.5, 9793.0], [95.6, 9793.0], [95.7, 9793.0], [95.8, 9793.0], [95.9, 9810.0], [96.0, 9810.0], [96.1, 9810.0], [96.2, 9810.0], [96.3, 9951.0], [96.4, 9951.0], [96.5, 9951.0], [96.6, 9951.0], [96.7, 9951.0], [96.8, 10125.0], [96.9, 10125.0], [97.0, 10125.0], [97.1, 10125.0], [97.2, 10125.0], [97.3, 10183.0], [97.4, 10183.0], [97.5, 10183.0], [97.6, 10183.0], [97.7, 10217.0], [97.8, 10217.0], [97.9, 10217.0], [98.0, 10217.0], [98.1, 10217.0], [98.2, 11595.0], [98.3, 11595.0], [98.4, 11595.0], [98.5, 11595.0], [98.6, 11595.0], [98.7, 11822.0], [98.8, 11822.0], [98.9, 11822.0], [99.0, 11822.0], [99.1, 12237.0], [99.2, 12237.0], [99.3, 12237.0], [99.4, 12237.0], [99.5, 12237.0], [99.6, 12492.0], [99.7, 12492.0], [99.8, 12492.0], [99.9, 12492.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[0.0, 62.0], [0.1, 62.0], [0.2, 62.0], [0.3, 62.0], [0.4, 62.0], [0.5, 66.0], [0.6, 66.0], [0.7, 66.0], [0.8, 66.0], [0.9, 66.0], [1.0, 66.0], [1.1, 66.0], [1.2, 66.0], [1.3, 66.0], [1.4, 66.0], [1.5, 66.0], [1.6, 66.0], [1.7, 66.0], [1.8, 66.0], [1.9, 66.0], [2.0, 66.0], [2.1, 66.0], [2.2, 66.0], [2.3, 66.0], [2.4, 68.0], [2.5, 68.0], [2.6, 68.0], [2.7, 68.0], [2.8, 68.0], [2.9, 68.0], [3.0, 68.0], [3.1, 68.0], [3.2, 68.0], [3.3, 70.0], [3.4, 70.0], [3.5, 70.0], [3.6, 70.0], [3.7, 70.0], [3.8, 70.0], [3.9, 70.0], [4.0, 70.0], [4.1, 70.0], [4.2, 72.0], [4.3, 72.0], [4.4, 72.0], [4.5, 72.0], [4.6, 72.0], [4.7, 72.0], [4.8, 72.0], [4.9, 72.0], [5.0, 72.0], [5.1, 72.0], [5.2, 73.0], [5.3, 73.0], [5.4, 73.0], [5.5, 73.0], [5.6, 73.0], [5.7, 73.0], [5.8, 73.0], [5.9, 73.0], [6.0, 73.0], [6.1, 73.0], [6.2, 73.0], [6.3, 73.0], [6.4, 73.0], [6.5, 73.0], [6.6, 74.0], [6.7, 74.0], [6.8, 74.0], [6.9, 74.0], [7.0, 74.0], [7.1, 74.0], [7.2, 74.0], [7.3, 74.0], [7.4, 74.0], [7.5, 75.0], [7.6, 75.0], [7.7, 75.0], [7.8, 75.0], [7.9, 75.0], [8.0, 75.0], [8.1, 75.0], [8.2, 75.0], [8.3, 75.0], [8.4, 75.0], [8.5, 75.0], [8.6, 75.0], [8.7, 75.0], [8.8, 75.0], [8.9, 76.0], [9.0, 76.0], [9.1, 76.0], [9.2, 76.0], [9.3, 76.0], [9.4, 76.0], [9.5, 76.0], [9.6, 76.0], [9.7, 76.0], [9.8, 76.0], [9.9, 76.0], [10.0, 76.0], [10.1, 76.0], [10.2, 76.0], [10.3, 76.0], [10.4, 76.0], [10.5, 76.0], [10.6, 76.0], [10.7, 76.0], [10.8, 76.0], [10.9, 76.0], [11.0, 76.0], [11.1, 76.0], [11.2, 77.0], [11.3, 77.0], [11.4, 77.0], [11.5, 77.0], [11.6, 77.0], [11.7, 78.0], [11.8, 78.0], [11.9, 78.0], [12.0, 78.0], [12.1, 78.0], [12.2, 78.0], [12.3, 78.0], [12.4, 78.0], [12.5, 78.0], [12.6, 78.0], [12.7, 78.0], [12.8, 78.0], [12.9, 78.0], [13.0, 78.0], [13.1, 79.0], [13.2, 79.0], [13.3, 79.0], [13.4, 79.0], [13.5, 80.0], [13.6, 80.0], [13.7, 80.0], [13.8, 80.0], [13.9, 80.0], [14.0, 80.0], [14.1, 80.0], [14.2, 80.0], [14.3, 80.0], [14.4, 80.0], [14.5, 81.0], [14.6, 81.0], [14.7, 81.0], [14.8, 81.0], [14.9, 82.0], [15.0, 82.0], [15.1, 82.0], [15.2, 82.0], [15.3, 82.0], [15.4, 84.0], [15.5, 84.0], [15.6, 84.0], [15.7, 84.0], [15.8, 84.0], [15.9, 84.0], [16.0, 84.0], [16.1, 84.0], [16.2, 84.0], [16.3, 84.0], [16.4, 84.0], [16.5, 84.0], [16.6, 84.0], [16.7, 84.0], [16.8, 86.0], [16.9, 86.0], [17.0, 86.0], [17.1, 86.0], [17.2, 86.0], [17.3, 87.0], [17.4, 87.0], [17.5, 87.0], [17.6, 87.0], [17.7, 88.0], [17.8, 88.0], [17.9, 88.0], [18.0, 88.0], [18.1, 88.0], [18.2, 88.0], [18.3, 88.0], [18.4, 88.0], [18.5, 88.0], [18.6, 88.0], [18.7, 89.0], [18.8, 89.0], [18.9, 89.0], [19.0, 89.0], [19.1, 89.0], [19.2, 89.0], [19.3, 89.0], [19.4, 89.0], [19.5, 89.0], [19.6, 89.0], [19.7, 89.0], [19.8, 89.0], [19.9, 89.0], [20.0, 89.0], [20.1, 89.0], [20.2, 89.0], [20.3, 89.0], [20.4, 89.0], [20.5, 90.0], [20.6, 90.0], [20.7, 90.0], [20.8, 90.0], [20.9, 90.0], [21.0, 92.0], [21.1, 92.0], [21.2, 92.0], [21.3, 92.0], [21.4, 93.0], [21.5, 93.0], [21.6, 93.0], [21.7, 93.0], [21.8, 93.0], [21.9, 94.0], [22.0, 94.0], [22.1, 94.0], [22.2, 94.0], [22.3, 94.0], [22.4, 95.0], [22.5, 95.0], [22.6, 95.0], [22.7, 95.0], [22.8, 98.0], [22.9, 98.0], [23.0, 98.0], [23.1, 98.0], [23.2, 98.0], [23.3, 102.0], [23.4, 102.0], [23.5, 102.0], [23.6, 102.0], [23.7, 102.0], [23.8, 103.0], [23.9, 103.0], [24.0, 103.0], [24.1, 103.0], [24.2, 108.0], [24.3, 108.0], [24.4, 108.0], [24.5, 108.0], [24.6, 108.0], [24.7, 111.0], [24.8, 111.0], [24.9, 111.0], [25.0, 111.0], [25.1, 111.0], [25.2, 114.0], [25.3, 114.0], [25.4, 114.0], [25.5, 114.0], [25.6, 115.0], [25.7, 115.0], [25.8, 115.0], [25.9, 115.0], [26.0, 115.0], [26.1, 123.0], [26.2, 123.0], [26.3, 123.0], [26.4, 123.0], [26.5, 123.0], [26.6, 125.0], [26.7, 125.0], [26.8, 125.0], [26.9, 125.0], [27.0, 125.0], [27.1, 125.0], [27.2, 125.0], [27.3, 125.0], [27.4, 125.0], [27.5, 130.0], [27.6, 130.0], [27.7, 130.0], [27.8, 130.0], [27.9, 130.0], [28.0, 132.0], [28.1, 132.0], [28.2, 132.0], [28.3, 132.0], [28.4, 132.0], [28.5, 132.0], [28.6, 132.0], [28.7, 132.0], [28.8, 132.0], [28.9, 133.0], [29.0, 133.0], [29.1, 133.0], [29.2, 133.0], [29.3, 133.0], [29.4, 134.0], [29.5, 134.0], [29.6, 134.0], [29.7, 134.0], [29.8, 136.0], [29.9, 136.0], [30.0, 136.0], [30.1, 136.0], [30.2, 136.0], [30.3, 142.0], [30.4, 142.0], [30.5, 142.0], [30.6, 142.0], [30.7, 160.0], [30.8, 160.0], [30.9, 160.0], [31.0, 160.0], [31.1, 160.0], [31.2, 173.0], [31.3, 173.0], [31.4, 173.0], [31.5, 173.0], [31.6, 173.0], [31.7, 177.0], [31.8, 177.0], [31.9, 177.0], [32.0, 177.0], [32.1, 193.0], [32.2, 193.0], [32.3, 193.0], [32.4, 193.0], [32.5, 193.0], [32.6, 224.0], [32.7, 224.0], [32.8, 224.0], [32.9, 224.0], [33.0, 224.0], [33.1, 246.0], [33.2, 246.0], [33.3, 246.0], [33.4, 246.0], [33.5, 308.0], [33.6, 308.0], [33.7, 308.0], [33.8, 308.0], [33.9, 308.0], [34.0, 409.0], [34.1, 409.0], [34.2, 409.0], [34.3, 409.0], [34.4, 409.0], [34.5, 456.0], [34.6, 456.0], [34.7, 456.0], [34.8, 456.0], [34.9, 532.0], [35.0, 532.0], [35.1, 532.0], [35.2, 532.0], [35.3, 532.0], [35.4, 536.0], [35.5, 536.0], [35.6, 536.0], [35.7, 536.0], [35.8, 536.0], [35.9, 551.0], [36.0, 551.0], [36.1, 551.0], [36.2, 551.0], [36.3, 628.0], [36.4, 628.0], [36.5, 628.0], [36.6, 628.0], [36.7, 628.0], [36.8, 677.0], [36.9, 677.0], [37.0, 677.0], [37.1, 677.0], [37.2, 677.0], [37.3, 694.0], [37.4, 694.0], [37.5, 694.0], [37.6, 694.0], [37.7, 706.0], [37.8, 706.0], [37.9, 706.0], [38.0, 706.0], [38.1, 706.0], [38.2, 827.0], [38.3, 827.0], [38.4, 827.0], [38.5, 827.0], [38.6, 827.0], [38.7, 844.0], [38.8, 844.0], [38.9, 844.0], [39.0, 844.0], [39.1, 845.0], [39.2, 845.0], [39.3, 845.0], [39.4, 845.0], [39.5, 845.0], [39.6, 934.0], [39.7, 934.0], [39.8, 934.0], [39.9, 934.0], [40.0, 934.0], [40.1, 961.0], [40.2, 961.0], [40.3, 961.0], [40.4, 961.0], [40.5, 1083.0], [40.6, 1083.0], [40.7, 1083.0], [40.8, 1083.0], [40.9, 1083.0], [41.0, 1096.0], [41.1, 1096.0], [41.2, 1096.0], [41.3, 1096.0], [41.4, 1179.0], [41.5, 1179.0], [41.6, 1179.0], [41.7, 1179.0], [41.8, 1179.0], [41.9, 1199.0], [42.0, 1199.0], [42.1, 1199.0], [42.2, 1199.0], [42.3, 1199.0], [42.4, 1267.0], [42.5, 1267.0], [42.6, 1267.0], [42.7, 1267.0], [42.8, 1667.0], [42.9, 1667.0], [43.0, 1667.0], [43.1, 1667.0], [43.2, 1667.0], [43.3, 1766.0], [43.4, 1766.0], [43.5, 1766.0], [43.6, 1766.0], [43.7, 1766.0], [43.8, 1869.0], [43.9, 1869.0], [44.0, 1869.0], [44.1, 1869.0], [44.2, 1886.0], [44.3, 1886.0], [44.4, 1886.0], [44.5, 1886.0], [44.6, 1886.0], [44.7, 1995.0], [44.8, 1995.0], [44.9, 1995.0], [45.0, 1995.0], [45.1, 1995.0], [45.2, 2016.0], [45.3, 2016.0], [45.4, 2016.0], [45.5, 2016.0], [45.6, 2088.0], [45.7, 2088.0], [45.8, 2088.0], [45.9, 2088.0], [46.0, 2088.0], [46.1, 2116.0], [46.2, 2116.0], [46.3, 2116.0], [46.4, 2116.0], [46.5, 2116.0], [46.6, 2121.0], [46.7, 2121.0], [46.8, 2121.0], [46.9, 2121.0], [47.0, 2242.0], [47.1, 2242.0], [47.2, 2242.0], [47.3, 2242.0], [47.4, 2242.0], [47.5, 2370.0], [47.6, 2370.0], [47.7, 2370.0], [47.8, 2370.0], [47.9, 2370.0], [48.0, 2501.0], [48.1, 2501.0], [48.2, 2501.0], [48.3, 2501.0], [48.4, 2648.0], [48.5, 2648.0], [48.6, 2648.0], [48.7, 2648.0], [48.8, 2648.0], [48.9, 2762.0], [49.0, 2762.0], [49.1, 2762.0], [49.2, 2762.0], [49.3, 2762.0], [49.4, 3014.0], [49.5, 3014.0], [49.6, 3014.0], [49.7, 3014.0], [49.8, 3114.0], [49.9, 3114.0], [50.0, 3114.0], [50.1, 3114.0], [50.2, 3114.0], [50.3, 3262.0], [50.4, 3262.0], [50.5, 3262.0], [50.6, 3262.0], [50.7, 3285.0], [50.8, 3285.0], [50.9, 3285.0], [51.0, 3285.0], [51.1, 3285.0], [51.2, 3548.0], [51.3, 3548.0], [51.4, 3548.0], [51.5, 3548.0], [51.6, 3548.0], [51.7, 3633.0], [51.8, 3633.0], [51.9, 3633.0], [52.0, 3633.0], [52.1, 3640.0], [52.2, 3640.0], [52.3, 3640.0], [52.4, 3640.0], [52.5, 3640.0], [52.6, 3650.0], [52.7, 3650.0], [52.8, 3650.0], [52.9, 3650.0], [53.0, 3650.0], [53.1, 3768.0], [53.2, 3768.0], [53.3, 3768.0], [53.4, 3768.0], [53.5, 3983.0], [53.6, 3983.0], [53.7, 3983.0], [53.8, 3983.0], [53.9, 3983.0], [54.0, 4036.0], [54.1, 4036.0], [54.2, 4036.0], [54.3, 4036.0], [54.4, 4036.0], [54.5, 4058.0], [54.6, 4058.0], [54.7, 4058.0], [54.8, 4058.0], [54.9, 4124.0], [55.0, 4124.0], [55.1, 4124.0], [55.2, 4124.0], [55.3, 4124.0], [55.4, 4211.0], [55.5, 4211.0], [55.6, 4211.0], [55.7, 4211.0], [55.8, 4211.0], [55.9, 4235.0], [56.0, 4235.0], [56.1, 4235.0], [56.2, 4235.0], [56.3, 4314.0], [56.4, 4314.0], [56.5, 4314.0], [56.6, 4314.0], [56.7, 4314.0], [56.8, 4336.0], [56.9, 4336.0], [57.0, 4336.0], [57.1, 4336.0], [57.2, 4336.0], [57.3, 4371.0], [57.4, 4371.0], [57.5, 4371.0], [57.6, 4371.0], [57.7, 4430.0], [57.8, 4430.0], [57.9, 4430.0], [58.0, 4430.0], [58.1, 4430.0], [58.2, 4458.0], [58.3, 4458.0], [58.4, 4458.0], [58.5, 4458.0], [58.6, 4458.0], [58.7, 4465.0], [58.8, 4465.0], [58.9, 4465.0], [59.0, 4465.0], [59.1, 4535.0], [59.2, 4535.0], [59.3, 4535.0], [59.4, 4535.0], [59.5, 4535.0], [59.6, 4537.0], [59.7, 4537.0], [59.8, 4537.0], [59.9, 4537.0], [60.0, 4537.0], [60.1, 4568.0], [60.2, 4568.0], [60.3, 4568.0], [60.4, 4568.0], [60.5, 4596.0], [60.6, 4596.0], [60.7, 4596.0], [60.8, 4596.0], [60.9, 4596.0], [61.0, 4606.0], [61.1, 4606.0], [61.2, 4606.0], [61.3, 4606.0], [61.4, 4638.0], [61.5, 4638.0], [61.6, 4638.0], [61.7, 4638.0], [61.8, 4638.0], [61.9, 4689.0], [62.0, 4689.0], [62.1, 4689.0], [62.2, 4689.0], [62.3, 4689.0], [62.4, 4706.0], [62.5, 4706.0], [62.6, 4706.0], [62.7, 4706.0], [62.8, 4755.0], [62.9, 4755.0], [63.0, 4755.0], [63.1, 4755.0], [63.2, 4755.0], [63.3, 4764.0], [63.4, 4764.0], [63.5, 4764.0], [63.6, 4764.0], [63.7, 4764.0], [63.8, 4767.0], [63.9, 4767.0], [64.0, 4767.0], [64.1, 4767.0], [64.2, 4841.0], [64.3, 4841.0], [64.4, 4841.0], [64.5, 4841.0], [64.6, 4841.0], [64.7, 4855.0], [64.8, 4855.0], [64.9, 4855.0], [65.0, 4855.0], [65.1, 4855.0], [65.2, 4865.0], [65.3, 4865.0], [65.4, 4865.0], [65.5, 4865.0], [65.6, 4887.0], [65.7, 4887.0], [65.8, 4887.0], [65.9, 4887.0], [66.0, 4887.0], [66.1, 4952.0], [66.2, 4952.0], [66.3, 4952.0], [66.4, 4952.0], [66.5, 4952.0], [66.6, 4977.0], [66.7, 4977.0], [66.8, 4977.0], [66.9, 4977.0], [67.0, 4979.0], [67.1, 4979.0], [67.2, 4979.0], [67.3, 4979.0], [67.4, 4979.0], [67.5, 5000.0], [67.6, 5000.0], [67.7, 5000.0], [67.8, 5000.0], [67.9, 5000.0], [68.0, 5035.0], [68.1, 5035.0], [68.2, 5035.0], [68.3, 5035.0], [68.4, 5061.0], [68.5, 5061.0], [68.6, 5061.0], [68.7, 5061.0], [68.8, 5061.0], [68.9, 5104.0], [69.0, 5104.0], [69.1, 5104.0], [69.2, 5104.0], [69.3, 5104.0], [69.4, 5171.0], [69.5, 5171.0], [69.6, 5171.0], [69.7, 5171.0], [69.8, 5172.0], [69.9, 5172.0], [70.0, 5172.0], [70.1, 5172.0], [70.2, 5172.0], [70.3, 5258.0], [70.4, 5258.0], [70.5, 5258.0], [70.6, 5258.0], [70.7, 5274.0], [70.8, 5274.0], [70.9, 5274.0], [71.0, 5274.0], [71.1, 5274.0], [71.2, 5317.0], [71.3, 5317.0], [71.4, 5317.0], [71.5, 5317.0], [71.6, 5317.0], [71.7, 5328.0], [71.8, 5328.0], [71.9, 5328.0], [72.0, 5328.0], [72.1, 5372.0], [72.2, 5372.0], [72.3, 5372.0], [72.4, 5372.0], [72.5, 5372.0], [72.6, 5408.0], [72.7, 5408.0], [72.8, 5408.0], [72.9, 5408.0], [73.0, 5408.0], [73.1, 5456.0], [73.2, 5456.0], [73.3, 5456.0], [73.4, 5456.0], [73.5, 5458.0], [73.6, 5458.0], [73.7, 5458.0], [73.8, 5458.0], [73.9, 5458.0], [74.0, 5488.0], [74.1, 5488.0], [74.2, 5488.0], [74.3, 5488.0], [74.4, 5488.0], [74.5, 5556.0], [74.6, 5556.0], [74.7, 5556.0], [74.8, 5556.0], [74.9, 5575.0], [75.0, 5575.0], [75.1, 5575.0], [75.2, 5575.0], [75.3, 5575.0], [75.4, 5580.0], [75.5, 5580.0], [75.6, 5580.0], [75.7, 5580.0], [75.8, 5580.0], [75.9, 5630.0], [76.0, 5630.0], [76.1, 5630.0], [76.2, 5630.0], [76.3, 5655.0], [76.4, 5655.0], [76.5, 5655.0], [76.6, 5655.0], [76.7, 5655.0], [76.8, 5659.0], [76.9, 5659.0], [77.0, 5659.0], [77.1, 5659.0], [77.2, 5659.0], [77.3, 5727.0], [77.4, 5727.0], [77.5, 5727.0], [77.6, 5727.0], [77.7, 5768.0], [77.8, 5768.0], [77.9, 5768.0], [78.0, 5768.0], [78.1, 5768.0], [78.2, 5778.0], [78.3, 5778.0], [78.4, 5778.0], [78.5, 5778.0], [78.6, 5778.0], [78.7, 5787.0], [78.8, 5787.0], [78.9, 5787.0], [79.0, 5787.0], [79.1, 5817.0], [79.2, 5817.0], [79.3, 5817.0], [79.4, 5817.0], [79.5, 5817.0], [79.6, 5854.0], [79.7, 5854.0], [79.8, 5854.0], [79.9, 5854.0], [80.0, 5980.0], [80.1, 5980.0], [80.2, 5980.0], [80.3, 5980.0], [80.4, 5980.0], [80.5, 5983.0], [80.6, 5983.0], [80.7, 5983.0], [80.8, 5983.0], [80.9, 5983.0], [81.0, 6023.0], [81.1, 6023.0], [81.2, 6023.0], [81.3, 6023.0], [81.4, 6059.0], [81.5, 6059.0], [81.6, 6059.0], [81.7, 6059.0], [81.8, 6059.0], [81.9, 6066.0], [82.0, 6066.0], [82.1, 6066.0], [82.2, 6066.0], [82.3, 6066.0], [82.4, 6106.0], [82.5, 6106.0], [82.6, 6106.0], [82.7, 6106.0], [82.8, 6137.0], [82.9, 6137.0], [83.0, 6137.0], [83.1, 6137.0], [83.2, 6137.0], [83.3, 6172.0], [83.4, 6172.0], [83.5, 6172.0], [83.6, 6172.0], [83.7, 6172.0], [83.8, 6249.0], [83.9, 6249.0], [84.0, 6249.0], [84.1, 6249.0], [84.2, 6310.0], [84.3, 6310.0], [84.4, 6310.0], [84.5, 6310.0], [84.6, 6310.0], [84.7, 6353.0], [84.8, 6353.0], [84.9, 6353.0], [85.0, 6353.0], [85.1, 6353.0], [85.2, 6394.0], [85.3, 6394.0], [85.4, 6394.0], [85.5, 6394.0], [85.6, 6494.0], [85.7, 6494.0], [85.8, 6494.0], [85.9, 6494.0], [86.0, 6494.0], [86.1, 6508.0], [86.2, 6508.0], [86.3, 6508.0], [86.4, 6508.0], [86.5, 6508.0], [86.6, 6514.0], [86.7, 6514.0], [86.8, 6514.0], [86.9, 6514.0], [87.0, 6567.0], [87.1, 6567.0], [87.2, 6567.0], [87.3, 6567.0], [87.4, 6567.0], [87.5, 6671.0], [87.6, 6671.0], [87.7, 6671.0], [87.8, 6671.0], [87.9, 6671.0], [88.0, 6744.0], [88.1, 6744.0], [88.2, 6744.0], [88.3, 6744.0], [88.4, 6758.0], [88.5, 6758.0], [88.6, 6758.0], [88.7, 6758.0], [88.8, 6758.0], [88.9, 6823.0], [89.0, 6823.0], [89.1, 6823.0], [89.2, 6823.0], [89.3, 6823.0], [89.4, 6874.0], [89.5, 6874.0], [89.6, 6874.0], [89.7, 6874.0], [89.8, 6943.0], [89.9, 6943.0], [90.0, 6943.0], [90.1, 6943.0], [90.2, 6943.0], [90.3, 7052.0], [90.4, 7052.0], [90.5, 7052.0], [90.6, 7052.0], [90.7, 7070.0], [90.8, 7070.0], [90.9, 7070.0], [91.0, 7070.0], [91.1, 7070.0], [91.2, 7148.0], [91.3, 7148.0], [91.4, 7148.0], [91.5, 7148.0], [91.6, 7148.0], [91.7, 7177.0], [91.8, 7177.0], [91.9, 7177.0], [92.0, 7177.0], [92.1, 7180.0], [92.2, 7180.0], [92.3, 7180.0], [92.4, 7180.0], [92.5, 7180.0], [92.6, 7279.0], [92.7, 7279.0], [92.8, 7279.0], [92.9, 7279.0], [93.0, 7279.0], [93.1, 7292.0], [93.2, 7292.0], [93.3, 7292.0], [93.4, 7292.0], [93.5, 7341.0], [93.6, 7341.0], [93.7, 7341.0], [93.8, 7341.0], [93.9, 7341.0], [94.0, 7343.0], [94.1, 7343.0], [94.2, 7343.0], [94.3, 7343.0], [94.4, 7343.0], [94.5, 7405.0], [94.6, 7405.0], [94.7, 7405.0], [94.8, 7405.0], [94.9, 7513.0], [95.0, 7513.0], [95.1, 7513.0], [95.2, 7513.0], [95.3, 7513.0], [95.4, 7546.0], [95.5, 7546.0], [95.6, 7546.0], [95.7, 7546.0], [95.8, 7546.0], [95.9, 7662.0], [96.0, 7662.0], [96.1, 7662.0], [96.2, 7662.0], [96.3, 7715.0], [96.4, 7715.0], [96.5, 7715.0], [96.6, 7715.0], [96.7, 7715.0], [96.8, 7727.0], [96.9, 7727.0], [97.0, 7727.0], [97.1, 7727.0], [97.2, 7727.0], [97.3, 7798.0], [97.4, 7798.0], [97.5, 7798.0], [97.6, 7798.0], [97.7, 8133.0], [97.8, 8133.0], [97.9, 8133.0], [98.0, 8133.0], [98.1, 8133.0], [98.2, 8151.0], [98.3, 8151.0], [98.4, 8151.0], [98.5, 8151.0], [98.6, 8151.0], [98.7, 8346.0], [98.8, 8346.0], [98.9, 8346.0], [99.0, 8346.0], [99.1, 8807.0], [99.2, 8807.0], [99.3, 8807.0], [99.4, 8807.0], [99.5, 8807.0], [99.6, 10456.0], [99.7, 10456.0], [99.8, 10456.0], [99.9, 10456.0]], "isOverall": false, "label": "/api/listings", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 50.0, "series": [{"data": [[600.0, 5.0], [700.0, 8.0], [800.0, 2.0], [900.0, 1.0], [1100.0, 2.0], [1200.0, 2.0], [1300.0, 1.0], [1400.0, 3.0], [1500.0, 2.0], [1700.0, 3.0], [1800.0, 3.0], [1900.0, 3.0], [2000.0, 1.0], [2100.0, 2.0], [2300.0, 2.0], [2400.0, 1.0], [2500.0, 3.0], [2600.0, 2.0], [2800.0, 1.0], [2700.0, 1.0], [2900.0, 2.0], [3000.0, 3.0], [3100.0, 1.0], [3300.0, 1.0], [3200.0, 1.0], [3400.0, 2.0], [3500.0, 3.0], [3700.0, 2.0], [3600.0, 3.0], [3800.0, 1.0], [3900.0, 3.0], [4000.0, 2.0], [4300.0, 1.0], [4400.0, 2.0], [4500.0, 2.0], [4600.0, 3.0], [4700.0, 2.0], [4800.0, 2.0], [5100.0, 3.0], [4900.0, 1.0], [5000.0, 1.0], [5200.0, 1.0], [5300.0, 2.0], [5400.0, 3.0], [5600.0, 3.0], [5500.0, 1.0], [5800.0, 2.0], [5900.0, 3.0], [6100.0, 1.0], [6300.0, 2.0], [6200.0, 2.0], [6400.0, 2.0], [6500.0, 2.0], [6600.0, 1.0], [6800.0, 3.0], [6700.0, 3.0], [7100.0, 3.0], [7200.0, 2.0], [7300.0, 2.0], [7400.0, 3.0], [7600.0, 3.0], [7500.0, 2.0], [7700.0, 5.0], [7800.0, 1.0], [8000.0, 3.0], [8100.0, 1.0], [8200.0, 3.0], [8400.0, 2.0], [8300.0, 5.0], [8700.0, 1.0], [8600.0, 1.0], [9000.0, 3.0], [9100.0, 1.0], [8900.0, 2.0], [9700.0, 1.0], [9500.0, 1.0], [9800.0, 1.0], [10100.0, 2.0], [10200.0, 1.0], [9900.0, 1.0], [11500.0, 1.0], [11800.0, 1.0], [12200.0, 1.0], [12400.0, 1.0], [300.0, 1.0], [400.0, 30.0], [500.0, 10.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[0.0, 50.0], [600.0, 3.0], [700.0, 1.0], [800.0, 3.0], [900.0, 2.0], [1000.0, 2.0], [1100.0, 2.0], [1200.0, 1.0], [1600.0, 1.0], [1700.0, 1.0], [1800.0, 2.0], [1900.0, 1.0], [2000.0, 2.0], [2100.0, 2.0], [2300.0, 1.0], [2200.0, 1.0], [2500.0, 1.0], [2600.0, 1.0], [2700.0, 1.0], [3000.0, 1.0], [3100.0, 1.0], [3200.0, 2.0], [3500.0, 1.0], [3600.0, 3.0], [3700.0, 1.0], [3900.0, 1.0], [4000.0, 2.0], [4300.0, 3.0], [4200.0, 2.0], [4100.0, 1.0], [4500.0, 4.0], [4400.0, 3.0], [4600.0, 3.0], [4700.0, 4.0], [4800.0, 4.0], [5000.0, 3.0], [4900.0, 3.0], [5100.0, 3.0], [5300.0, 3.0], [5200.0, 2.0], [5600.0, 3.0], [5400.0, 4.0], [5500.0, 3.0], [5700.0, 4.0], [5800.0, 2.0], [6100.0, 3.0], [5900.0, 2.0], [6000.0, 3.0], [6300.0, 3.0], [6200.0, 1.0], [6500.0, 3.0], [6600.0, 1.0], [6400.0, 1.0], [6800.0, 2.0], [6700.0, 2.0], [6900.0, 1.0], [7000.0, 2.0], [7100.0, 3.0], [7300.0, 2.0], [7200.0, 2.0], [7400.0, 1.0], [7500.0, 2.0], [7600.0, 1.0], [7700.0, 3.0], [8100.0, 2.0], [8300.0, 1.0], [8800.0, 1.0], [10400.0, 1.0], [100.0, 20.0], [200.0, 2.0], [300.0, 1.0], [400.0, 2.0], [500.0, 3.0]], "isOverall": false, "label": "/api/listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 12400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 51.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 273.0, "series": [{"data": [[0.0, 106.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 51.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 273.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.6545914775E12, "maxY": 2.0, "series": [{"data": [[1.6545914775E12, 1.5], [1.6545915E12, 1.4444444444444444], [1.654591503E12, 1.6], [1.6545914805E12, 1.6666666666666667], [1.6545914835E12, 1.5], [1.654591509E12, 1.770833333333333], [1.6545914865E12, 1.5], [1.654591491E12, 1.5625], [1.6545915165E12, 1.0], [1.654591494E12, 1.5714285714285716], [1.654591497E12, 1.5333333333333334], [1.654591479E12, 1.5], [1.654591482E12, 1.4444444444444444], [1.6545915015E12, 1.6363636363636365], [1.654591485E12, 1.5454545454545454], [1.6545915045E12, 1.4], [1.654591488E12, 1.5], [1.6545915075E12, 2.0], [1.6545914895E12, 1.5], [1.654591512E12, 1.7017543859649125], [1.6545914925E12, 1.5294117647058822], [1.6545914955E12, 1.611111111111111], [1.654591515E12, 1.4390243902439024], [1.6545914985E12, 1.3529411764705885], [1.654591518E12, 1.0]], "isOverall": false, "label": "parallel bzm - Parallel", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654591518E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 77.71428571428571, "minX": 1.0, "maxY": 11595.0, "series": [{"data": [[2.0, 894.8], [32.0, 3457.3333333333335], [35.0, 3606.0], [43.0, 8781.5], [44.0, 7772.416666666666], [47.0, 5990.555555555556], [46.0, 3151.0], [3.0, 1071.5625], [48.0, 4198.5], [51.0, 4944.714285714285], [53.0, 4676.25], [52.0, 4364.25], [61.0, 6081.0], [63.0, 6870.5], [62.0, 5520.5], [4.0, 1502.0], [65.0, 5830.5], [64.0, 7313.25], [73.0, 5902.045454545455], [5.0, 2027.4444444444443], [6.0, 2910.25], [7.0, 9015.0], [8.0, 4517.5], [9.0, 8944.0], [10.0, 1283.6666666666667], [11.0, 7496.333333333334], [12.0, 1464.8], [13.0, 10223.5], [14.0, 7706.0], [15.0, 3529.0], [1.0, 1810.5], [16.0, 3662.25], [17.0, 4927.0], [18.0, 11595.0], [19.0, 3635.5], [20.0, 8273.0], [21.0, 8733.0], [22.0, 8317.0], [23.0, 8387.0], [24.0, 3288.8750000000005], [25.0, 9951.0], [26.0, 10217.0], [27.0, 10125.0], [28.0, 3351.571428571429], [29.0, 2784.0], [31.0, 3971.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[29.674418604651155, 4235.093023255814]], "isOverall": false, "label": "/api/statistics/neighbourhoods-Aggregated", "isController": false}, {"data": [[2.0, 77.71428571428571], [37.0, 4124.0], [36.0, 5035.0], [38.0, 4887.0], [40.0, 3768.0], [42.0, 3548.0], [45.0, 3816.5], [47.0, 4437.571428571428], [46.0, 4638.0], [3.0, 259.1666666666667], [48.0, 5852.749999999999], [51.0, 5555.4], [50.0, 5258.0], [53.0, 5642.6], [55.0, 7341.0], [56.0, 4414.5], [57.0, 5983.5], [59.0, 8807.0], [58.0, 5727.0], [61.0, 7798.0], [60.0, 6649.0], [62.0, 7148.0], [4.0, 85.77777777777777], [67.0, 6514.0], [64.0, 5768.0], [71.0, 5362.5], [73.0, 6133.0], [72.0, 7509.5], [5.0, 105.28571428571428], [6.0, 128.5], [8.0, 167.66666666666666], [9.0, 266.6666666666667], [10.0, 373.8], [11.0, 641.5], [12.0, 582.0], [13.0, 409.0], [14.0, 1022.0], [1.0, 105.11111111111111], [16.0, 899.3333333333334], [19.0, 1841.5], [20.0, 1267.0], [21.0, 1922.6666666666667], [27.0, 2966.5], [28.0, 3954.222222222222], [29.0, 4773.833333333333]], "isOverall": false, "label": "/api/listings", "isController": false}, {"data": [[30.320930232558148, 3118.4930232558136]], "isOverall": false, "label": "/api/listings-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 73.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 536.6666666666666, "minX": 1.6545914775E12, "maxY": 1.7952404E7, "series": [{"data": [[1.6545914775E12, 1672160.0], [1.6545915E12, 7236.0], [1.654591503E12, 4020.0], [1.6545914805E12, 1670552.0], [1.6545914835E12, 2090200.0], [1.654591509E12, 1.0449392E7], [1.6545914865E12, 2508240.0], [1.654591491E12, 3760752.0], [1.6545915165E12, 6432.0], [1.654591494E12, 3342712.0], [1.654591497E12, 3343516.0], [1.654591479E12, 1254120.0], [1.654591482E12, 1672964.0], [1.6545915015E12, 4589596.0], [1.654591485E12, 2507436.0], [1.6545915045E12, 5858188.0], [1.654591488E12, 2926280.0], [1.6545915075E12, 2507436.0], [1.6545914895E12, 3344320.0], [1.654591512E12, 1.7952404E7], [1.6545914925E12, 3761556.0], [1.6545914955E12, 4595224.0], [1.654591515E12, 7528740.0], [1.6545914985E12, 2512260.0], [1.654591518E12, 12864.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6545914775E12, 813.3333333333334], [1.6545915E12, 966.0], [1.654591503E12, 536.6666666666666], [1.6545914805E12, 598.6666666666666], [1.6545914835E12, 1016.6666666666666], [1.654591509E12, 4868.666666666667], [1.6545914865E12, 1220.0], [1.654591491E12, 1615.3333333333333], [1.6545915165E12, 858.6666666666666], [1.654591494E12, 1412.0], [1.654591497E12, 1519.3333333333333], [1.654591479E12, 610.0], [1.654591482E12, 920.6666666666666], [1.6545915015E12, 1056.0], [1.654591485E12, 1112.6666666666667], [1.6545915045E12, 3598.0], [1.654591488E12, 1423.3333333333333], [1.6545915075E12, 1112.6666666666667], [1.6545914895E12, 1626.6666666666667], [1.654591512E12, 5630.666666666667], [1.6545914925E12, 1722.6666666666667], [1.6545914955E12, 1807.3333333333333], [1.654591515E12, 4196.666666666667], [1.6545914985E12, 1756.6666666666667], [1.654591518E12, 1717.3333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654591518E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 71.66666666666666, "minX": 1.6545914775E12, "maxY": 9202.8125, "series": [{"data": [[1.654591479E12, 430.0], [1.6545914775E12, 1367.0], [1.6545915E12, 3287.1111111111113], [1.654591482E12, 464.2], [1.654591503E12, 4462.6], [1.6545914805E12, 403.5], [1.654591485E12, 603.2], [1.6545915045E12, 4446.666666666666], [1.6545914835E12, 439.4], [1.654591488E12, 596.4285714285714], [1.654591509E12, 6088.347826086957], [1.6545914865E12, 417.5], [1.6545915075E12, 5791.2], [1.6545914895E12, 485.0], [1.654591512E12, 6447.214285714285], [1.6545914925E12, 784.125], [1.654591491E12, 642.1428571428571], [1.6545915165E12, 8519.375], [1.6545914955E12, 1636.857142857143], [1.654591494E12, 1468.6666666666667], [1.654591515E12, 8197.86956521739], [1.6545914985E12, 2714.8181818181815], [1.654591518E12, 9202.8125], [1.654591497E12, 2215.428571428571]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.654591479E12, 124.33333333333333], [1.6545914775E12, 906.75], [1.654591482E12, 89.0], [1.6545914805E12, 83.25], [1.6545915015E12, 2538.2727272727275], [1.654591485E12, 72.33333333333334], [1.6545915045E12, 4224.285714285714], [1.6545914835E12, 89.6], [1.654591488E12, 81.42857142857143], [1.654591509E12, 6109.0], [1.6545914865E12, 71.66666666666666], [1.6545915075E12, 6034.0], [1.6545914895E12, 76.125], [1.654591512E12, 6060.418604651161], [1.6545914925E12, 103.44444444444444], [1.654591491E12, 84.0], [1.6545914955E12, 470.0909090909091], [1.654591494E12, 270.375], [1.654591515E12, 5529.38888888889], [1.6545914985E12, 1786.3333333333335], [1.654591497E12, 930.0]], "isOverall": false, "label": "/api/listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654591518E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 66.66666666666666, "minX": 1.6545914775E12, "maxY": 9202.75, "series": [{"data": [[1.654591479E12, 429.3333333333333], [1.6545914775E12, 1366.5], [1.6545915E12, 3287.1111111111113], [1.654591482E12, 463.6], [1.654591503E12, 4462.6], [1.6545914805E12, 403.5], [1.654591485E12, 602.8], [1.6545915045E12, 4446.285714285714], [1.6545914835E12, 439.4], [1.654591488E12, 596.1428571428571], [1.654591509E12, 6087.130434782608], [1.6545914865E12, 417.5], [1.6545915075E12, 5791.2], [1.6545914895E12, 484.75], [1.654591512E12, 6447.142857142858], [1.6545914925E12, 784.125], [1.654591491E12, 642.0], [1.6545915165E12, 8519.375], [1.6545914955E12, 1636.857142857143], [1.654591494E12, 1468.5], [1.654591515E12, 8197.826086956522], [1.6545914985E12, 2714.727272727273], [1.654591518E12, 9202.75], [1.654591497E12, 2215.428571428571]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.654591479E12, 104.0], [1.6545914775E12, 866.25], [1.654591482E12, 83.75], [1.6545914805E12, 73.0], [1.6545915015E12, 2449.909090909091], [1.654591485E12, 67.66666666666667], [1.6545915045E12, 3839.5714285714284], [1.6545914835E12, 84.6], [1.654591488E12, 76.42857142857143], [1.654591509E12, 5945.599999999999], [1.6545914865E12, 66.66666666666666], [1.6545915075E12, 5998.833333333334], [1.6545914895E12, 71.875], [1.654591512E12, 4833.976744186048], [1.6545914925E12, 99.33333333333333], [1.654591491E12, 80.1111111111111], [1.6545914955E12, 455.90909090909093], [1.654591494E12, 262.125], [1.654591515E12, 5449.5], [1.6545914985E12, 1666.3333333333333], [1.654591497E12, 797.25]], "isOverall": false, "label": "/api/listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654591518E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 17.833333333333336, "minX": 1.6545914775E12, "maxY": 2346.95652173913, "series": [{"data": [[1.654591479E12, 23.333333333333332], [1.6545914775E12, 46.75], [1.6545915E12, 610.8888888888889], [1.654591482E12, 22.2], [1.654591503E12, 783.2], [1.6545914805E12, 19.5], [1.654591485E12, 21.0], [1.6545915045E12, 676.0], [1.6545914835E12, 21.0], [1.654591488E12, 20.428571428571427], [1.654591509E12, 1498.6521739130435], [1.6545914865E12, 17.833333333333336], [1.6545915075E12, 1700.6], [1.6545914895E12, 20.5], [1.654591512E12, 1401.7142857142856], [1.6545914925E12, 23.75], [1.654591491E12, 21.428571428571427], [1.6545915165E12, 1644.5000000000002], [1.6545914955E12, 85.42857142857143], [1.654591494E12, 26.833333333333332], [1.654591515E12, 2346.95652173913], [1.6545914985E12, 275.0], [1.654591518E12, 2211.125], [1.654591497E12, 179.28571428571428]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.654591479E12, 22.0], [1.6545914775E12, 47.25], [1.654591482E12, 20.75], [1.6545914805E12, 18.75], [1.6545915015E12, 731.4545454545454], [1.654591485E12, 18.833333333333332], [1.6545915045E12, 839.4999999999999], [1.6545914835E12, 21.4], [1.654591488E12, 21.428571428571427], [1.654591509E12, 1312.3200000000002], [1.6545914865E12, 18.333333333333332], [1.6545915075E12, 1791.1666666666665], [1.6545914895E12, 20.374999999999996], [1.654591512E12, 2098.46511627907], [1.6545914925E12, 24.0], [1.654591491E12, 22.77777777777778], [1.6545914955E12, 217.0909090909091], [1.654591494E12, 88.0], [1.654591515E12, 1468.2777777777776], [1.6545914985E12, 275.3333333333333], [1.654591497E12, 368.0]], "isOverall": false, "label": "/api/listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654591518E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 62.0, "minX": 1.6545914775E12, "maxY": 12492.0, "series": [{"data": [[1.6545914775E12, 2526.0], [1.6545915E12, 4472.0], [1.654591503E12, 5994.0], [1.6545914805E12, 410.0], [1.6545914835E12, 491.0], [1.654591509E12, 8151.0], [1.6545914865E12, 436.0], [1.654591491E12, 748.0], [1.6545915165E12, 11595.0], [1.654591494E12, 1775.0], [1.654591497E12, 2664.0], [1.654591479E12, 455.0], [1.654591482E12, 505.0], [1.6545915015E12, 3285.0], [1.654591485E12, 846.0], [1.6545915045E12, 6358.0], [1.654591488E12, 825.0], [1.6545915075E12, 7343.0], [1.6545914895E12, 514.0], [1.654591512E12, 10456.0], [1.6545914925E12, 1139.0], [1.6545914955E12, 2179.0], [1.654591515E12, 10217.0], [1.6545914985E12, 3538.0], [1.654591518E12, 12492.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6545914775E12, 2526.0], [1.6545915E12, 4472.0], [1.654591503E12, 5994.0], [1.6545914805E12, 410.0], [1.6545914835E12, 486.40000000000003], [1.654591509E12, 7386.1], [1.6545914865E12, 431.5], [1.654591491E12, 743.8], [1.6545915165E12, 11595.0], [1.654591494E12, 1646.0], [1.654591497E12, 2581.8], [1.654591479E12, 455.0], [1.654591482E12, 505.0], [1.6545915015E12, 3250.8], [1.654591485E12, 821.4000000000001], [1.6545915045E12, 5469.4], [1.654591488E12, 809.5], [1.6545915075E12, 7250.8], [1.6545914895E12, 502.8], [1.654591512E12, 7865.000000000001], [1.6545914925E12, 990.1999999999998], [1.6545914955E12, 1914.4000000000003], [1.654591515E12, 9736.400000000001], [1.6545914985E12, 3405.2], [1.654591518E12, 12313.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6545914775E12, 2526.0], [1.6545915E12, 4472.0], [1.654591503E12, 5994.0], [1.6545914805E12, 410.0], [1.6545914835E12, 491.0], [1.654591509E12, 8151.0], [1.6545914865E12, 436.0], [1.654591491E12, 748.0], [1.6545915165E12, 11595.0], [1.654591494E12, 1775.0], [1.654591497E12, 2664.0], [1.654591479E12, 455.0], [1.654591482E12, 505.0], [1.6545915015E12, 3285.0], [1.654591485E12, 846.0], [1.6545915045E12, 6358.0], [1.654591488E12, 825.0], [1.6545915075E12, 7343.0], [1.6545914895E12, 514.0], [1.654591512E12, 10456.0], [1.6545914925E12, 1139.0], [1.6545914955E12, 2179.0], [1.654591515E12, 10217.0], [1.6545914985E12, 3538.0], [1.654591518E12, 12492.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6545914775E12, 2526.0], [1.6545915E12, 4472.0], [1.654591503E12, 5994.0], [1.6545914805E12, 410.0], [1.6545914835E12, 491.0], [1.654591509E12, 7899.699999999999], [1.6545914865E12, 436.0], [1.654591491E12, 748.0], [1.6545915165E12, 11595.0], [1.654591494E12, 1775.0], [1.654591497E12, 2664.0], [1.654591479E12, 455.0], [1.654591482E12, 505.0], [1.6545915015E12, 3285.0], [1.654591485E12, 846.0], [1.6545915045E12, 5961.999999999998], [1.654591488E12, 825.0], [1.6545915075E12, 7343.0], [1.6545914895E12, 514.0], [1.654591512E12, 8907.299999999994], [1.6545914925E12, 1139.0], [1.6545914955E12, 2179.0], [1.654591515E12, 10107.6], [1.6545914985E12, 3538.0], [1.654591518E12, 12492.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6545914775E12, 136.0], [1.6545915E12, 1970.0], [1.654591503E12, 3162.0], [1.6545914805E12, 74.0], [1.6545914835E12, 77.0], [1.654591509E12, 4371.0], [1.6545914865E12, 66.0], [1.654591491E12, 74.0], [1.6545915165E12, 7397.0], [1.654591494E12, 130.0], [1.654591497E12, 628.0], [1.654591479E12, 123.0], [1.654591482E12, 75.0], [1.6545915015E12, 1869.0], [1.654591485E12, 62.0], [1.6545915045E12, 2982.0], [1.654591488E12, 70.0], [1.6545915075E12, 4803.0], [1.6545914895E12, 68.0], [1.654591512E12, 3604.0], [1.6545914925E12, 78.0], [1.6545914955E12, 134.0], [1.654591515E12, 4568.0], [1.6545914985E12, 1267.0], [1.654591518E12, 7576.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6545914775E12, 958.5], [1.6545915E12, 3470.0], [1.654591503E12, 4089.0], [1.6545914805E12, 92.0], [1.6545914835E12, 256.5], [1.654591509E12, 6139.0], [1.6545914865E12, 246.0], [1.654591491E12, 92.5], [1.6545915165E12, 8295.0], [1.654591494E12, 614.0], [1.654591497E12, 1199.0], [1.654591479E12, 266.5], [1.654591482E12, 420.0], [1.6545915015E12, 2501.0], [1.654591485E12, 82.0], [1.6545915045E12, 4315.0], [1.654591488E12, 290.0], [1.6545915075E12, 5638.0], [1.6545914895E12, 275.5], [1.654591512E12, 6137.0], [1.6545914925E12, 132.0], [1.6545914955E12, 766.5], [1.654591515E12, 6881.0], [1.6545914985E12, 2311.0], [1.654591518E12, 8784.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654591518E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 125.0, "minX": 3.0, "maxY": 8784.5, "series": [{"data": [[8.0, 1168.5], [9.0, 256.0], [10.0, 487.0], [40.0, 4314.5], [41.0, 6881.0], [42.0, 6046.0], [11.0, 630.0], [3.0, 1179.0], [12.0, 382.0], [14.0, 899.5], [57.0, 6137.0], [4.0, 125.0], [16.0, 8784.5], [17.0, 2311.0], [5.0, 738.0], [20.0, 2733.0], [6.0, 426.5], [7.0, 550.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 57.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 104.5, "minX": 3.0, "maxY": 8784.5, "series": [{"data": [[8.0, 1039.5], [9.0, 253.5], [10.0, 486.5], [40.0, 4109.0], [41.0, 6881.0], [42.0, 6011.0], [11.0, 630.0], [3.0, 1127.0], [12.0, 380.0], [14.0, 894.5], [57.0, 5161.0], [4.0, 104.5], [16.0, 8784.5], [17.0, 2311.0], [5.0, 737.0], [20.0, 2729.5], [6.0, 426.0], [7.0, 546.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 57.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.6545914745E12, "maxY": 24.0, "series": [{"data": [[1.6545914775E12, 2.6666666666666665], [1.6545915E12, 17.333333333333332], [1.654591503E12, 20.0], [1.6545914805E12, 5.333333333333333], [1.654591506E12, 20.0], [1.6545914835E12, 6.666666666666667], [1.654591509E12, 24.0], [1.6545914865E12, 8.0], [1.6545915105E12, 1.3333333333333333], [1.654591491E12, 12.0], [1.6545914745E12, 1.3333333333333333], [1.654591494E12, 13.333333333333334], [1.654591497E12, 16.0], [1.654591479E12, 4.0], [1.654591482E12, 5.333333333333333], [1.6545915015E12, 18.666666666666668], [1.654591485E12, 8.0], [1.6545915045E12, 20.0], [1.654591488E12, 10.666666666666666], [1.6545915075E12, 16.0], [1.6545914895E12, 10.666666666666666], [1.6545914925E12, 12.0], [1.6545914955E12, 14.666666666666666], [1.6545914985E12, 17.333333333333332], [1.654591476E12, 1.3333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6545915105E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.3333333333333335, "minX": 1.6545914775E12, "maxY": 38.0, "series": [{"data": [[1.6545914775E12, 5.333333333333333], [1.6545915E12, 6.0], [1.654591503E12, 3.3333333333333335], [1.6545914805E12, 4.0], [1.6545914835E12, 6.666666666666667], [1.654591509E12, 32.0], [1.6545914865E12, 8.0], [1.654591491E12, 10.666666666666666], [1.6545915165E12, 5.333333333333333], [1.654591494E12, 9.333333333333334], [1.654591497E12, 10.0], [1.654591479E12, 4.0], [1.654591482E12, 6.0], [1.6545915015E12, 7.333333333333333], [1.654591485E12, 7.333333333333333], [1.6545915045E12, 23.333333333333332], [1.654591488E12, 9.333333333333334], [1.6545915075E12, 7.333333333333333], [1.6545914895E12, 10.666666666666666], [1.654591512E12, 38.0], [1.6545914925E12, 11.333333333333334], [1.6545914955E12, 12.0], [1.654591515E12, 27.333333333333332], [1.6545914985E12, 11.333333333333334], [1.654591518E12, 10.666666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654591518E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.6545914775E12, "maxY": 28.666666666666668, "series": [{"data": [[1.654591479E12, 2.0], [1.6545914775E12, 2.6666666666666665], [1.6545915E12, 6.0], [1.654591482E12, 3.3333333333333335], [1.654591503E12, 3.3333333333333335], [1.6545914805E12, 1.3333333333333333], [1.654591485E12, 3.3333333333333335], [1.6545915045E12, 14.0], [1.6545914835E12, 3.3333333333333335], [1.654591488E12, 4.666666666666667], [1.654591509E12, 15.333333333333334], [1.6545914865E12, 4.0], [1.6545915075E12, 3.3333333333333335], [1.6545914895E12, 5.333333333333333], [1.654591512E12, 9.333333333333334], [1.6545914925E12, 5.333333333333333], [1.654591491E12, 4.666666666666667], [1.6545915165E12, 5.333333333333333], [1.6545914955E12, 4.666666666666667], [1.654591494E12, 4.0], [1.654591515E12, 15.333333333333334], [1.6545914985E12, 7.333333333333333], [1.654591518E12, 10.666666666666666], [1.654591497E12, 4.666666666666667]], "isOverall": false, "label": "/api/statistics/neighbourhoods-success", "isController": false}, {"data": [[1.654591479E12, 2.0], [1.6545914775E12, 2.6666666666666665], [1.654591482E12, 2.6666666666666665], [1.6545914805E12, 2.6666666666666665], [1.6545915015E12, 7.333333333333333], [1.654591485E12, 4.0], [1.6545915045E12, 9.333333333333334], [1.6545914835E12, 3.3333333333333335], [1.654591488E12, 4.666666666666667], [1.654591509E12, 16.666666666666668], [1.6545914865E12, 4.0], [1.6545915075E12, 4.0], [1.6545914895E12, 5.333333333333333], [1.654591512E12, 28.666666666666668], [1.6545914925E12, 6.0], [1.654591491E12, 6.0], [1.6545914955E12, 7.333333333333333], [1.654591494E12, 5.333333333333333], [1.654591515E12, 12.0], [1.6545914985E12, 4.0], [1.654591497E12, 5.333333333333333]], "isOverall": false, "label": "/api/listings-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654591518E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.3333333333333335, "minX": 1.6545914775E12, "maxY": 38.0, "series": [{"data": [[1.6545914775E12, 5.333333333333333], [1.6545915E12, 6.0], [1.654591503E12, 3.3333333333333335], [1.6545914805E12, 4.0], [1.6545914835E12, 6.666666666666667], [1.654591509E12, 32.0], [1.6545914865E12, 8.0], [1.654591491E12, 10.666666666666666], [1.6545915165E12, 5.333333333333333], [1.654591494E12, 9.333333333333334], [1.654591497E12, 10.0], [1.654591479E12, 4.0], [1.654591482E12, 6.0], [1.6545915015E12, 7.333333333333333], [1.654591485E12, 7.333333333333333], [1.6545915045E12, 23.333333333333332], [1.654591488E12, 9.333333333333334], [1.6545915075E12, 7.333333333333333], [1.6545914895E12, 10.666666666666666], [1.654591512E12, 38.0], [1.6545914925E12, 11.333333333333334], [1.6545914955E12, 12.0], [1.654591515E12, 27.333333333333332], [1.6545914985E12, 11.333333333333334], [1.654591518E12, 10.666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654591518E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

