/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4372.0, "minX": 0.0, "maxY": 11059.0, "series": [{"data": [[0.0, 4372.0], [0.1, 4372.0], [0.2, 4582.0], [0.3, 5024.0], [0.4, 5033.0], [0.5, 5033.0], [0.6, 5034.0], [0.7, 5039.0], [0.8, 5039.0], [0.9, 5041.0], [1.0, 5042.0], [1.1, 5045.0], [1.2, 5046.0], [1.3, 5052.0], [1.4, 5053.0], [1.5, 5053.0], [1.6, 5054.0], [1.7, 5064.0], [1.8, 5067.0], [1.9, 5067.0], [2.0, 5070.0], [2.1, 5075.0], [2.2, 5075.0], [2.3, 5075.0], [2.4, 5080.0], [2.5, 5081.0], [2.6, 5082.0], [2.7, 5082.0], [2.8, 5084.0], [2.9, 5084.0], [3.0, 5085.0], [3.1, 5090.0], [3.2, 5106.0], [3.3, 5113.0], [3.4, 5114.0], [3.5, 5114.0], [3.6, 5114.0], [3.7, 5115.0], [3.8, 5117.0], [3.9, 5117.0], [4.0, 5123.0], [4.1, 5124.0], [4.2, 5125.0], [4.3, 5125.0], [4.4, 5125.0], [4.5, 5128.0], [4.6, 5136.0], [4.7, 5140.0], [4.8, 5142.0], [4.9, 5143.0], [5.0, 5143.0], [5.1, 5145.0], [5.2, 5148.0], [5.3, 5150.0], [5.4, 5150.0], [5.5, 5152.0], [5.6, 5152.0], [5.7, 5154.0], [5.8, 5154.0], [5.9, 5155.0], [6.0, 5156.0], [6.1, 5157.0], [6.2, 5163.0], [6.3, 5164.0], [6.4, 5166.0], [6.5, 5166.0], [6.6, 5166.0], [6.7, 5166.0], [6.8, 5168.0], [6.9, 5168.0], [7.0, 5169.0], [7.1, 5169.0], [7.2, 5169.0], [7.3, 5170.0], [7.4, 5175.0], [7.5, 5175.0], [7.6, 5178.0], [7.7, 5180.0], [7.8, 5180.0], [7.9, 5180.0], [8.0, 5181.0], [8.1, 5181.0], [8.2, 5188.0], [8.3, 5189.0], [8.4, 5190.0], [8.5, 5194.0], [8.6, 5194.0], [8.7, 5194.0], [8.8, 5195.0], [8.9, 5196.0], [9.0, 5197.0], [9.1, 5197.0], [9.2, 5199.0], [9.3, 5199.0], [9.4, 5200.0], [9.5, 5203.0], [9.6, 5204.0], [9.7, 5205.0], [9.8, 5206.0], [9.9, 5207.0], [10.0, 5207.0], [10.1, 5208.0], [10.2, 5209.0], [10.3, 5210.0], [10.4, 5213.0], [10.5, 5214.0], [10.6, 5216.0], [10.7, 5218.0], [10.8, 5218.0], [10.9, 5218.0], [11.0, 5219.0], [11.1, 5220.0], [11.2, 5224.0], [11.3, 5225.0], [11.4, 5226.0], [11.5, 5226.0], [11.6, 5230.0], [11.7, 5231.0], [11.8, 5232.0], [11.9, 5234.0], [12.0, 5235.0], [12.1, 5235.0], [12.2, 5235.0], [12.3, 5236.0], [12.4, 5237.0], [12.5, 5238.0], [12.6, 5239.0], [12.7, 5240.0], [12.8, 5241.0], [12.9, 5241.0], [13.0, 5241.0], [13.1, 5244.0], [13.2, 5245.0], [13.3, 5246.0], [13.4, 5249.0], [13.5, 5250.0], [13.6, 5250.0], [13.7, 5250.0], [13.8, 5251.0], [13.9, 5253.0], [14.0, 5254.0], [14.1, 5260.0], [14.2, 5261.0], [14.3, 5261.0], [14.4, 5262.0], [14.5, 5262.0], [14.6, 5263.0], [14.7, 5264.0], [14.8, 5265.0], [14.9, 5266.0], [15.0, 5266.0], [15.1, 5269.0], [15.2, 5270.0], [15.3, 5273.0], [15.4, 5274.0], [15.5, 5276.0], [15.6, 5277.0], [15.7, 5277.0], [15.8, 5277.0], [15.9, 5280.0], [16.0, 5284.0], [16.1, 5285.0], [16.2, 5286.0], [16.3, 5288.0], [16.4, 5288.0], [16.5, 5288.0], [16.6, 5288.0], [16.7, 5288.0], [16.8, 5289.0], [16.9, 5290.0], [17.0, 5292.0], [17.1, 5294.0], [17.2, 5294.0], [17.3, 5295.0], [17.4, 5296.0], [17.5, 5297.0], [17.6, 5298.0], [17.7, 5299.0], [17.8, 5300.0], [17.9, 5300.0], [18.0, 5301.0], [18.1, 5302.0], [18.2, 5302.0], [18.3, 5303.0], [18.4, 5303.0], [18.5, 5304.0], [18.6, 5304.0], [18.7, 5304.0], [18.8, 5304.0], [18.9, 5305.0], [19.0, 5305.0], [19.1, 5307.0], [19.2, 5308.0], [19.3, 5308.0], [19.4, 5309.0], [19.5, 5313.0], [19.6, 5316.0], [19.7, 5319.0], [19.8, 5322.0], [19.9, 5324.0], [20.0, 5326.0], [20.1, 5326.0], [20.2, 5328.0], [20.3, 5329.0], [20.4, 5330.0], [20.5, 5332.0], [20.6, 5333.0], [20.7, 5334.0], [20.8, 5334.0], [20.9, 5336.0], [21.0, 5337.0], [21.1, 5339.0], [21.2, 5339.0], [21.3, 5340.0], [21.4, 5340.0], [21.5, 5340.0], [21.6, 5340.0], [21.7, 5340.0], [21.8, 5343.0], [21.9, 5348.0], [22.0, 5349.0], [22.1, 5350.0], [22.2, 5350.0], [22.3, 5351.0], [22.4, 5351.0], [22.5, 5352.0], [22.6, 5353.0], [22.7, 5355.0], [22.8, 5357.0], [22.9, 5357.0], [23.0, 5357.0], [23.1, 5359.0], [23.2, 5359.0], [23.3, 5361.0], [23.4, 5363.0], [23.5, 5367.0], [23.6, 5367.0], [23.7, 5368.0], [23.8, 5368.0], [23.9, 5372.0], [24.0, 5376.0], [24.1, 5379.0], [24.2, 5379.0], [24.3, 5379.0], [24.4, 5381.0], [24.5, 5381.0], [24.6, 5383.0], [24.7, 5383.0], [24.8, 5384.0], [24.9, 5385.0], [25.0, 5386.0], [25.1, 5386.0], [25.2, 5386.0], [25.3, 5387.0], [25.4, 5387.0], [25.5, 5387.0], [25.6, 5387.0], [25.7, 5388.0], [25.8, 5388.0], [25.9, 5389.0], [26.0, 5391.0], [26.1, 5393.0], [26.2, 5394.0], [26.3, 5398.0], [26.4, 5400.0], [26.5, 5400.0], [26.6, 5400.0], [26.7, 5403.0], [26.8, 5405.0], [26.9, 5405.0], [27.0, 5406.0], [27.1, 5406.0], [27.2, 5406.0], [27.3, 5407.0], [27.4, 5407.0], [27.5, 5407.0], [27.6, 5407.0], [27.7, 5408.0], [27.8, 5408.0], [27.9, 5408.0], [28.0, 5410.0], [28.1, 5412.0], [28.2, 5413.0], [28.3, 5415.0], [28.4, 5416.0], [28.5, 5417.0], [28.6, 5417.0], [28.7, 5417.0], [28.8, 5418.0], [28.9, 5419.0], [29.0, 5422.0], [29.1, 5424.0], [29.2, 5431.0], [29.3, 5431.0], [29.4, 5431.0], [29.5, 5433.0], [29.6, 5435.0], [29.7, 5435.0], [29.8, 5435.0], [29.9, 5435.0], [30.0, 5436.0], [30.1, 5436.0], [30.2, 5439.0], [30.3, 5441.0], [30.4, 5441.0], [30.5, 5441.0], [30.6, 5442.0], [30.7, 5446.0], [30.8, 5446.0], [30.9, 5446.0], [31.0, 5448.0], [31.1, 5449.0], [31.2, 5451.0], [31.3, 5452.0], [31.4, 5452.0], [31.5, 5452.0], [31.6, 5453.0], [31.7, 5453.0], [31.8, 5458.0], [31.9, 5459.0], [32.0, 5460.0], [32.1, 5461.0], [32.2, 5461.0], [32.3, 5461.0], [32.4, 5464.0], [32.5, 5468.0], [32.6, 5474.0], [32.7, 5475.0], [32.8, 5475.0], [32.9, 5475.0], [33.0, 5477.0], [33.1, 5479.0], [33.2, 5479.0], [33.3, 5479.0], [33.4, 5480.0], [33.5, 5482.0], [33.6, 5482.0], [33.7, 5484.0], [33.8, 5484.0], [33.9, 5485.0], [34.0, 5485.0], [34.1, 5486.0], [34.2, 5487.0], [34.3, 5487.0], [34.4, 5488.0], [34.5, 5489.0], [34.6, 5491.0], [34.7, 5491.0], [34.8, 5492.0], [34.9, 5493.0], [35.0, 5495.0], [35.1, 5495.0], [35.2, 5496.0], [35.3, 5500.0], [35.4, 5500.0], [35.5, 5501.0], [35.6, 5505.0], [35.7, 5505.0], [35.8, 5505.0], [35.9, 5507.0], [36.0, 5507.0], [36.1, 5511.0], [36.2, 5512.0], [36.3, 5514.0], [36.4, 5514.0], [36.5, 5514.0], [36.6, 5514.0], [36.7, 5517.0], [36.8, 5518.0], [36.9, 5519.0], [37.0, 5521.0], [37.1, 5522.0], [37.2, 5522.0], [37.3, 5522.0], [37.4, 5523.0], [37.5, 5523.0], [37.6, 5526.0], [37.7, 5526.0], [37.8, 5529.0], [37.9, 5529.0], [38.0, 5530.0], [38.1, 5531.0], [38.2, 5533.0], [38.3, 5535.0], [38.4, 5538.0], [38.5, 5541.0], [38.6, 5541.0], [38.7, 5543.0], [38.8, 5546.0], [38.9, 5547.0], [39.0, 5547.0], [39.1, 5547.0], [39.2, 5548.0], [39.3, 5548.0], [39.4, 5548.0], [39.5, 5548.0], [39.6, 5549.0], [39.7, 5551.0], [39.8, 5551.0], [39.9, 5555.0], [40.0, 5557.0], [40.1, 5557.0], [40.2, 5558.0], [40.3, 5558.0], [40.4, 5558.0], [40.5, 5558.0], [40.6, 5559.0], [40.7, 5559.0], [40.8, 5559.0], [40.9, 5562.0], [41.0, 5564.0], [41.1, 5564.0], [41.2, 5567.0], [41.3, 5567.0], [41.4, 5568.0], [41.5, 5568.0], [41.6, 5569.0], [41.7, 5574.0], [41.8, 5574.0], [41.9, 5578.0], [42.0, 5578.0], [42.1, 5582.0], [42.2, 5582.0], [42.3, 5582.0], [42.4, 5582.0], [42.5, 5585.0], [42.6, 5587.0], [42.7, 5588.0], [42.8, 5588.0], [42.9, 5588.0], [43.0, 5588.0], [43.1, 5588.0], [43.2, 5589.0], [43.3, 5592.0], [43.4, 5592.0], [43.5, 5592.0], [43.6, 5592.0], [43.7, 5594.0], [43.8, 5596.0], [43.9, 5596.0], [44.0, 5599.0], [44.1, 5600.0], [44.2, 5600.0], [44.3, 5600.0], [44.4, 5601.0], [44.5, 5602.0], [44.6, 5602.0], [44.7, 5604.0], [44.8, 5605.0], [44.9, 5610.0], [45.0, 5614.0], [45.1, 5614.0], [45.2, 5615.0], [45.3, 5618.0], [45.4, 5619.0], [45.5, 5619.0], [45.6, 5621.0], [45.7, 5621.0], [45.8, 5621.0], [45.9, 5622.0], [46.0, 5624.0], [46.1, 5626.0], [46.2, 5626.0], [46.3, 5627.0], [46.4, 5629.0], [46.5, 5629.0], [46.6, 5629.0], [46.7, 5630.0], [46.8, 5631.0], [46.9, 5632.0], [47.0, 5632.0], [47.1, 5634.0], [47.2, 5634.0], [47.3, 5634.0], [47.4, 5634.0], [47.5, 5634.0], [47.6, 5634.0], [47.7, 5635.0], [47.8, 5636.0], [47.9, 5636.0], [48.0, 5639.0], [48.1, 5640.0], [48.2, 5640.0], [48.3, 5641.0], [48.4, 5645.0], [48.5, 5646.0], [48.6, 5646.0], [48.7, 5650.0], [48.8, 5652.0], [48.9, 5652.0], [49.0, 5654.0], [49.1, 5655.0], [49.2, 5656.0], [49.3, 5656.0], [49.4, 5656.0], [49.5, 5658.0], [49.6, 5658.0], [49.7, 5660.0], [49.8, 5661.0], [49.9, 5662.0], [50.0, 5663.0], [50.1, 5663.0], [50.2, 5665.0], [50.3, 5667.0], [50.4, 5668.0], [50.5, 5668.0], [50.6, 5670.0], [50.7, 5671.0], [50.8, 5671.0], [50.9, 5672.0], [51.0, 5673.0], [51.1, 5674.0], [51.2, 5674.0], [51.3, 5674.0], [51.4, 5674.0], [51.5, 5674.0], [51.6, 5676.0], [51.7, 5678.0], [51.8, 5679.0], [51.9, 5682.0], [52.0, 5682.0], [52.1, 5683.0], [52.2, 5683.0], [52.3, 5683.0], [52.4, 5683.0], [52.5, 5687.0], [52.6, 5688.0], [52.7, 5689.0], [52.8, 5692.0], [52.9, 5692.0], [53.0, 5692.0], [53.1, 5693.0], [53.2, 5694.0], [53.3, 5695.0], [53.4, 5696.0], [53.5, 5698.0], [53.6, 5698.0], [53.7, 5701.0], [53.8, 5707.0], [53.9, 5708.0], [54.0, 5708.0], [54.1, 5711.0], [54.2, 5711.0], [54.3, 5711.0], [54.4, 5711.0], [54.5, 5712.0], [54.6, 5714.0], [54.7, 5716.0], [54.8, 5719.0], [54.9, 5720.0], [55.0, 5720.0], [55.1, 5720.0], [55.2, 5721.0], [55.3, 5724.0], [55.4, 5725.0], [55.5, 5727.0], [55.6, 5727.0], [55.7, 5729.0], [55.8, 5729.0], [55.9, 5729.0], [56.0, 5729.0], [56.1, 5729.0], [56.2, 5736.0], [56.3, 5736.0], [56.4, 5736.0], [56.5, 5736.0], [56.6, 5737.0], [56.7, 5737.0], [56.8, 5737.0], [56.9, 5737.0], [57.0, 5738.0], [57.1, 5739.0], [57.2, 5739.0], [57.3, 5742.0], [57.4, 5743.0], [57.5, 5743.0], [57.6, 5744.0], [57.7, 5744.0], [57.8, 5745.0], [57.9, 5745.0], [58.0, 5746.0], [58.1, 5747.0], [58.2, 5748.0], [58.3, 5749.0], [58.4, 5749.0], [58.5, 5754.0], [58.6, 5754.0], [58.7, 5755.0], [58.8, 5757.0], [58.9, 5759.0], [59.0, 5762.0], [59.1, 5762.0], [59.2, 5763.0], [59.3, 5763.0], [59.4, 5765.0], [59.5, 5767.0], [59.6, 5769.0], [59.7, 5770.0], [59.8, 5772.0], [59.9, 5773.0], [60.0, 5773.0], [60.1, 5773.0], [60.2, 5774.0], [60.3, 5775.0], [60.4, 5775.0], [60.5, 5778.0], [60.6, 5779.0], [60.7, 5779.0], [60.8, 5779.0], [60.9, 5780.0], [61.0, 5783.0], [61.1, 5783.0], [61.2, 5784.0], [61.3, 5785.0], [61.4, 5786.0], [61.5, 5786.0], [61.6, 5786.0], [61.7, 5787.0], [61.8, 5787.0], [61.9, 5788.0], [62.0, 5790.0], [62.1, 5792.0], [62.2, 5792.0], [62.3, 5795.0], [62.4, 5796.0], [62.5, 5796.0], [62.6, 5799.0], [62.7, 5800.0], [62.8, 5800.0], [62.9, 5800.0], [63.0, 5802.0], [63.1, 5803.0], [63.2, 5804.0], [63.3, 5805.0], [63.4, 5806.0], [63.5, 5807.0], [63.6, 5807.0], [63.7, 5807.0], [63.8, 5809.0], [63.9, 5809.0], [64.0, 5809.0], [64.1, 5810.0], [64.2, 5814.0], [64.3, 5814.0], [64.4, 5814.0], [64.5, 5815.0], [64.6, 5817.0], [64.7, 5819.0], [64.8, 5819.0], [64.9, 5821.0], [65.0, 5821.0], [65.1, 5822.0], [65.2, 5824.0], [65.3, 5827.0], [65.4, 5832.0], [65.5, 5832.0], [65.6, 5833.0], [65.7, 5834.0], [65.8, 5834.0], [65.9, 5835.0], [66.0, 5836.0], [66.1, 5836.0], [66.2, 5837.0], [66.3, 5839.0], [66.4, 5842.0], [66.5, 5842.0], [66.6, 5844.0], [66.7, 5845.0], [66.8, 5851.0], [66.9, 5854.0], [67.0, 5856.0], [67.1, 5856.0], [67.2, 5856.0], [67.3, 5858.0], [67.4, 5860.0], [67.5, 5861.0], [67.6, 5861.0], [67.7, 5862.0], [67.8, 5863.0], [67.9, 5863.0], [68.0, 5863.0], [68.1, 5865.0], [68.2, 5865.0], [68.3, 5866.0], [68.4, 5867.0], [68.5, 5869.0], [68.6, 5869.0], [68.7, 5871.0], [68.8, 5871.0], [68.9, 5872.0], [69.0, 5874.0], [69.1, 5877.0], [69.2, 5881.0], [69.3, 5881.0], [69.4, 5882.0], [69.5, 5883.0], [69.6, 5883.0], [69.7, 5884.0], [69.8, 5887.0], [69.9, 5888.0], [70.0, 5888.0], [70.1, 5888.0], [70.2, 5890.0], [70.3, 5891.0], [70.4, 5893.0], [70.5, 5895.0], [70.6, 5895.0], [70.7, 5897.0], [70.8, 5897.0], [70.9, 5897.0], [71.0, 5899.0], [71.1, 5904.0], [71.2, 5904.0], [71.3, 5905.0], [71.4, 5906.0], [71.5, 5906.0], [71.6, 5908.0], [71.7, 5908.0], [71.8, 5909.0], [71.9, 5909.0], [72.0, 5910.0], [72.1, 5911.0], [72.2, 5911.0], [72.3, 5912.0], [72.4, 5914.0], [72.5, 5918.0], [72.6, 5919.0], [72.7, 5920.0], [72.8, 5920.0], [72.9, 5920.0], [73.0, 5920.0], [73.1, 5921.0], [73.2, 5923.0], [73.3, 5923.0], [73.4, 5923.0], [73.5, 5924.0], [73.6, 5924.0], [73.7, 5926.0], [73.8, 5927.0], [73.9, 5930.0], [74.0, 5931.0], [74.1, 5933.0], [74.2, 5934.0], [74.3, 5934.0], [74.4, 5936.0], [74.5, 5936.0], [74.6, 5937.0], [74.7, 5940.0], [74.8, 5945.0], [74.9, 5946.0], [75.0, 5946.0], [75.1, 5948.0], [75.2, 5951.0], [75.3, 5954.0], [75.4, 5957.0], [75.5, 5958.0], [75.6, 5960.0], [75.7, 5961.0], [75.8, 5961.0], [75.9, 5962.0], [76.0, 5963.0], [76.1, 5965.0], [76.2, 5965.0], [76.3, 5968.0], [76.4, 5968.0], [76.5, 5968.0], [76.6, 5969.0], [76.7, 5970.0], [76.8, 5971.0], [76.9, 5972.0], [77.0, 5973.0], [77.1, 5979.0], [77.2, 5979.0], [77.3, 5980.0], [77.4, 5980.0], [77.5, 5981.0], [77.6, 5982.0], [77.7, 5982.0], [77.8, 5985.0], [77.9, 5985.0], [78.0, 5991.0], [78.1, 5991.0], [78.2, 5994.0], [78.3, 5996.0], [78.4, 5997.0], [78.5, 5998.0], [78.6, 5998.0], [78.7, 5999.0], [78.8, 5999.0], [78.9, 6000.0], [79.0, 6003.0], [79.1, 6004.0], [79.2, 6004.0], [79.3, 6004.0], [79.4, 6004.0], [79.5, 6004.0], [79.6, 6006.0], [79.7, 6006.0], [79.8, 6007.0], [79.9, 6007.0], [80.0, 6007.0], [80.1, 6008.0], [80.2, 6008.0], [80.3, 6011.0], [80.4, 6012.0], [80.5, 6026.0], [80.6, 6027.0], [80.7, 6028.0], [80.8, 6028.0], [80.9, 6031.0], [81.0, 6032.0], [81.1, 6041.0], [81.2, 6042.0], [81.3, 6048.0], [81.4, 6052.0], [81.5, 6052.0], [81.6, 6052.0], [81.7, 6061.0], [81.8, 6069.0], [81.9, 6073.0], [82.0, 6076.0], [82.1, 6076.0], [82.2, 6076.0], [82.3, 6076.0], [82.4, 6082.0], [82.5, 6085.0], [82.6, 6085.0], [82.7, 6094.0], [82.8, 6096.0], [82.9, 6096.0], [83.0, 6107.0], [83.1, 6108.0], [83.2, 6129.0], [83.3, 6132.0], [83.4, 6132.0], [83.5, 6137.0], [83.6, 6137.0], [83.7, 6142.0], [83.8, 6151.0], [83.9, 6154.0], [84.0, 6157.0], [84.1, 6161.0], [84.2, 6162.0], [84.3, 6162.0], [84.4, 6170.0], [84.5, 6187.0], [84.6, 6196.0], [84.7, 6213.0], [84.8, 6224.0], [84.9, 6241.0], [85.0, 6241.0], [85.1, 6247.0], [85.2, 6254.0], [85.3, 6262.0], [85.4, 6264.0], [85.5, 6270.0], [85.6, 6283.0], [85.7, 6286.0], [85.8, 6286.0], [85.9, 6297.0], [86.0, 6303.0], [86.1, 6304.0], [86.2, 6328.0], [86.3, 6348.0], [86.4, 6362.0], [86.5, 6362.0], [86.6, 6367.0], [86.7, 6370.0], [86.8, 6382.0], [86.9, 6393.0], [87.0, 6407.0], [87.1, 6410.0], [87.2, 6410.0], [87.3, 6423.0], [87.4, 6425.0], [87.5, 6436.0], [87.6, 6438.0], [87.7, 6441.0], [87.8, 6443.0], [87.9, 6443.0], [88.0, 6454.0], [88.1, 6467.0], [88.2, 6487.0], [88.3, 6495.0], [88.4, 6507.0], [88.5, 6507.0], [88.6, 6507.0], [88.7, 6507.0], [88.8, 6515.0], [88.9, 6517.0], [89.0, 6536.0], [89.1, 6541.0], [89.2, 6541.0], [89.3, 6541.0], [89.4, 6542.0], [89.5, 6549.0], [89.6, 6555.0], [89.7, 6555.0], [89.8, 6564.0], [89.9, 6579.0], [90.0, 6579.0], [90.1, 6580.0], [90.2, 6589.0], [90.3, 6593.0], [90.4, 6607.0], [90.5, 6607.0], [90.6, 6607.0], [90.7, 6609.0], [90.8, 6609.0], [90.9, 6617.0], [91.0, 6621.0], [91.1, 6633.0], [91.2, 6639.0], [91.3, 6642.0], [91.4, 6643.0], [91.5, 6643.0], [91.6, 6644.0], [91.7, 6644.0], [91.8, 6644.0], [91.9, 6645.0], [92.0, 6651.0], [92.1, 6662.0], [92.2, 6662.0], [92.3, 6665.0], [92.4, 6671.0], [92.5, 6672.0], [92.6, 6678.0], [92.7, 6687.0], [92.8, 6688.0], [92.9, 6688.0], [93.0, 6693.0], [93.1, 6699.0], [93.2, 6717.0], [93.3, 6718.0], [93.4, 6725.0], [93.5, 6729.0], [93.6, 6729.0], [93.7, 6731.0], [93.8, 6746.0], [93.9, 6747.0], [94.0, 6758.0], [94.1, 6786.0], [94.2, 6797.0], [94.3, 6797.0], [94.4, 6799.0], [94.5, 6822.0], [94.6, 6851.0], [94.7, 6857.0], [94.8, 6888.0], [94.9, 6904.0], [95.0, 6904.0], [95.1, 6923.0], [95.2, 6925.0], [95.3, 6933.0], [95.4, 6964.0], [95.5, 6979.0], [95.6, 7000.0], [95.7, 7011.0], [95.8, 7011.0], [95.9, 7059.0], [96.0, 7060.0], [96.1, 7064.0], [96.2, 7072.0], [96.3, 7104.0], [96.4, 7141.0], [96.5, 7141.0], [96.6, 7144.0], [96.7, 7159.0], [96.8, 7180.0], [96.9, 7184.0], [97.0, 7190.0], [97.1, 7199.0], [97.2, 7199.0], [97.3, 7216.0], [97.4, 7221.0], [97.5, 7222.0], [97.6, 7257.0], [97.7, 7257.0], [97.8, 7263.0], [97.9, 7263.0], [98.0, 7288.0], [98.1, 7292.0], [98.2, 7303.0], [98.3, 7333.0], [98.4, 7540.0], [98.5, 7742.0], [98.6, 7742.0], [98.7, 7798.0], [98.8, 7800.0], [98.9, 7851.0], [99.0, 8407.0], [99.1, 8941.0], [99.2, 9303.0], [99.3, 9303.0], [99.4, 9454.0], [99.5, 9545.0], [99.6, 9695.0], [99.7, 10137.0], [99.8, 10359.0], [99.9, 11059.0], [100.0, 11059.0]], "isOverall": false, "label": "https://localhost:7000/api/listings", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 4300.0, "maxY": 82.0, "series": [{"data": [[8400.0, 1.0], [8900.0, 1.0], [9600.0, 1.0], [9400.0, 1.0], [9500.0, 1.0], [9300.0, 1.0], [10100.0, 1.0], [10300.0, 1.0], [11000.0, 1.0], [4300.0, 1.0], [4500.0, 1.0], [5100.0, 53.0], [5000.0, 25.0], [5300.0, 74.0], [5200.0, 73.0], [5600.0, 82.0], [5500.0, 76.0], [5400.0, 76.0], [5700.0, 78.0], [5800.0, 72.0], [6000.0, 35.0], [5900.0, 67.0], [6100.0, 15.0], [6200.0, 11.0], [6300.0, 9.0], [6600.0, 24.0], [6500.0, 17.0], [6400.0, 12.0], [6700.0, 11.0], [6900.0, 6.0], [6800.0, 4.0], [7100.0, 8.0], [7000.0, 6.0], [7200.0, 8.0], [7300.0, 2.0], [7500.0, 1.0], [7700.0, 2.0], [7800.0, 2.0]], "isOverall": false, "label": "https://localhost:7000/api/listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 11000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 14.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 846.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 14.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 846.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.6545896235E12, "maxY": 1.0, "series": [{"data": [[1.654589646E12, 1.0], [1.654589625E12, 1.0], [1.6545896265E12, 1.0], [1.6545896475E12, 1.0], [1.654589643E12, 1.0], [1.6545896445E12, 1.0], [1.6545896235E12, 1.0], [1.6545896295E12, 1.0], [1.654589652E12, 1.0], [1.654589631E12, 1.0], [1.654589628E12, 1.0], [1.654589649E12, 1.0], [1.6545896505E12, 1.0], [1.6545896565E12, 1.0], [1.6545896355E12, 1.0], [1.654589658E12, 1.0], [1.654589637E12, 1.0], [1.6545896325E12, 1.0], [1.6545896535E12, 1.0], [1.654589634E12, 1.0], [1.654589655E12, 1.0], [1.6545896415E12, 1.0], [1.6545896385E12, 1.0], [1.65458964E12, 1.0]], "isOverall": false, "label": "parallel bzm - Parallel", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654589658E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4372.0, "minX": 1.0, "maxY": 7279.4, "series": [{"data": [[2.0, 6436.0], [3.0, 6454.0], [4.0, 6746.0], [5.0, 6507.0], [6.0, 6644.0], [7.0, 6718.0], [8.0, 6747.0], [9.0, 6541.0], [10.0, 6693.0], [11.0, 6729.0], [12.0, 6589.0], [13.0, 6549.0], [14.0, 6644.0], [15.0, 6699.0], [16.0, 6423.0], [17.0, 6607.0], [18.0, 6671.0], [19.0, 6621.0], [20.0, 6643.0], [21.0, 7221.0], [22.0, 6607.0], [23.0, 6651.0], [24.0, 6644.0], [25.0, 6688.0], [26.0, 7257.0], [27.0, 6555.0], [28.0, 6633.0], [29.0, 7263.0], [30.0, 6642.0], [31.0, 6593.0], [33.0, 6609.0], [32.0, 6678.0], [35.0, 6665.0], [34.0, 6580.0], [37.0, 6147.666666666667], [40.0, 4372.0], [41.0, 5458.0], [43.0, 5833.666666666667], [45.0, 5596.0], [44.0, 5491.0], [46.0, 5432.5], [47.0, 5547.0], [48.0, 5791.5], [49.0, 5619.0], [51.0, 5662.0], [50.0, 5632.0], [52.0, 6420.5], [53.0, 5696.0], [54.0, 5724.0], [55.0, 5743.0], [57.0, 5297.0], [56.0, 5755.0], [59.0, 5796.0], [58.0, 5821.0], [61.0, 5865.0], [60.0, 5836.0], [63.0, 5961.0], [62.0, 5979.0], [67.0, 5210.0], [66.0, 5900.5], [64.0, 5906.0], [68.0, 7086.5], [71.0, 5326.0], [70.0, 5254.0], [69.0, 5284.0], [75.0, 5282.5], [74.0, 5168.0], [73.0, 5368.0], [72.0, 5340.0], [79.0, 5548.0], [78.0, 6375.0], [77.0, 5227.333333333333], [76.0, 5340.0], [81.0, 5856.0], [83.0, 5751.75], [82.0, 6295.5], [80.0, 5894.0], [86.0, 6786.0], [85.0, 7123.0], [84.0, 5519.5], [87.0, 5492.0], [89.0, 5981.2], [90.0, 6668.5], [88.0, 5695.333333333333], [91.0, 5471.333333333333], [95.0, 6997.333333333333], [94.0, 6844.666666666667], [93.0, 5720.5], [92.0, 5461.5], [98.0, 6692.0], [97.0, 5494.6], [96.0, 5354.0], [99.0, 5361.0], [103.0, 5858.666666666667], [101.0, 5457.25], [102.0, 5564.0], [100.0, 5497.0], [106.0, 5882.5], [105.0, 5937.0], [104.0, 5729.0], [107.0, 5128.0], [110.0, 5932.799999999999], [111.0, 5378.75], [109.0, 5170.0], [108.0, 5157.0], [112.0, 6134.7], [115.0, 5754.0], [114.0, 5514.333333333333], [113.0, 5327.5], [119.0, 5681.8], [117.0, 5546.6], [116.0, 5430.5], [118.0, 5567.0], [123.0, 5562.75], [122.0, 5582.0], [121.0, 5340.75], [120.0, 5512.0], [125.0, 5645.25], [127.0, 5472.0], [126.0, 5456.5], [124.0, 5392.0], [134.0, 5762.0], [133.0, 5505.142857142857], [132.0, 5497.2], [131.0, 5540.333333333333], [130.0, 5596.666666666667], [129.0, 5274.0], [128.0, 5492.0], [135.0, 5414.0], [141.0, 5709.166666666667], [140.0, 5630.0], [139.0, 5521.2], [138.0, 5740.5], [136.0, 5573.5], [143.0, 5673.0], [142.0, 5644.0], [137.0, 5427.4], [150.0, 5596.5], [149.0, 5436.0], [148.0, 5525.0], [147.0, 5492.0], [146.0, 5687.6], [145.0, 5309.25], [144.0, 5863.5], [151.0, 5436.333333333333], [157.0, 5518.0], [155.0, 5454.2], [154.0, 5450.333333333333], [153.0, 5394.166666666667], [152.0, 5539.2], [159.0, 5692.6], [158.0, 5449.0], [156.0, 5832.5], [165.0, 5526.666666666667], [164.0, 5664.25], [163.0, 5703.75], [162.0, 5536.5], [161.0, 5519.75], [160.0, 5476.5], [167.0, 5498.5], [166.0, 5433.666666666667], [173.0, 5718.333333333333], [172.0, 5770.333333333333], [171.0, 5695.0], [170.0, 5606.8], [169.0, 5533.75], [168.0, 5478.0], [175.0, 5819.5], [174.0, 5722.5], [182.0, 5761.6], [180.0, 5698.75], [179.0, 5610.299999999999], [178.0, 5880.0], [177.0, 5791.0], [176.0, 5824.5], [183.0, 5538.5], [181.0, 5497.0], [190.0, 5906.25], [189.0, 5306.25], [188.0, 5545.75], [187.0, 5477.0], [186.0, 5519.666666666667], [185.0, 5532.857142857143], [191.0, 5539.75], [184.0, 5626.5], [199.0, 5881.666666666666], [198.0, 5739.142857142857], [197.0, 5623.0], [196.0, 5795.166666666666], [194.0, 5631.333333333333], [193.0, 5695.333333333333], [192.0, 5590.5], [195.0, 5633.5], [206.0, 5591.666666666668], [204.0, 5629.3], [203.0, 5505.125], [200.0, 5690.888888888889], [205.0, 5958.857142857142], [202.0, 5709.5], [201.0, 5739.777777777777], [207.0, 5426.5], [212.0, 5652.285714285714], [211.0, 5675.714285714285], [210.0, 5696.538461538462], [209.0, 5666.4], [208.0, 5750.857142857143], [215.0, 5719.666666666666], [214.0, 5793.0], [213.0, 5964.333333333333], [221.0, 5745.5], [220.0, 5597.666666666667], [219.0, 5593.749999999999], [218.0, 5815.333333333333], [217.0, 5858.0], [216.0, 6012.0], [222.0, 5710.6], [223.0, 6022.0], [231.0, 6115.333333333333], [230.0, 5741.5], [228.0, 5834.666666666667], [227.0, 5812.666666666667], [226.0, 6086.25], [229.0, 6048.0], [225.0, 5762.0], [224.0, 5664.0], [234.0, 6095.25], [233.0, 5755.32], [232.0, 5740.857142857143], [237.0, 5974.75], [236.0, 5405.5], [235.0, 6128.0], [239.0, 5887.666666666667], [238.0, 6645.0], [242.0, 6362.5], [241.0, 6364.0], [240.0, 6367.5], [247.0, 6822.0], [246.0, 6115.0], [244.0, 6786.0], [243.0, 6758.0], [248.0, 6851.0], [271.0, 6544.0], [268.0, 7124.25], [267.0, 7032.0], [266.0, 6632.5], [275.0, 5192.0], [273.0, 7279.4], [272.0, 7222.0], [1.0, 6507.0]], "isOverall": false, "label": "https://localhost:7000/api/listings", "isController": false}, {"data": [[159.50465116279065, 5783.76046511628]], "isOverall": false, "label": "https://localhost:7000/api/listings-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 275.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 192.0, "minX": 1.6545896235E12, "maxY": 2097276.0, "series": [{"data": [[1.654589646E12, 18688.0], [1.654589625E12, 1251708.0], [1.6545896265E12, 834472.0], [1.6545896475E12, 42048.0], [1.654589643E12, 5840.0], [1.6545896445E12, 49056.0], [1.6545896235E12, 1668944.0], [1.6545896295E12, 14016.0], [1.654589652E12, 39128.0], [1.654589631E12, 8176.0], [1.654589628E12, 2097276.0], [1.654589649E12, 20440.0], [1.6545896505E12, 24528.0], [1.6545896565E12, 16936.0], [1.6545896355E12, 23360.0], [1.654589658E12, 21608.0], [1.654589637E12, 12264.0], [1.6545896325E12, 20440.0], [1.6545896535E12, 36208.0], [1.654589634E12, 9344.0], [1.654589655E12, 46720.0], [1.6545896415E12, 32120.0], [1.6545896385E12, 25696.0], [1.65458964E12, 16352.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.654589646E12, 3072.0], [1.654589625E12, 288.0], [1.6545896265E12, 192.0], [1.6545896475E12, 6912.0], [1.654589643E12, 960.0], [1.6545896445E12, 8064.0], [1.6545896235E12, 384.0], [1.6545896295E12, 2304.0], [1.654589652E12, 6432.0], [1.654589631E12, 1344.0], [1.654589628E12, 2304.0], [1.654589649E12, 3360.0], [1.6545896505E12, 4032.0], [1.6545896565E12, 2784.0], [1.6545896355E12, 3840.0], [1.654589658E12, 3552.0], [1.654589637E12, 2016.0], [1.6545896325E12, 3360.0], [1.6545896535E12, 5952.0], [1.654589634E12, 1536.0], [1.654589655E12, 7680.0], [1.6545896415E12, 5280.0], [1.6545896385E12, 4224.0], [1.65458964E12, 2688.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654589658E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5223.5, "minX": 1.6545896235E12, "maxY": 7728.0, "series": [{"data": [[1.654589646E12, 5609.625000000001], [1.654589625E12, 6316.333333333333], [1.6545896265E12, 7728.0], [1.6545896475E12, 5599.916666666668], [1.654589643E12, 5475.5], [1.6545896445E12, 5733.249999999998], [1.6545896235E12, 5223.5], [1.6545896295E12, 5527.458333333334], [1.654589652E12, 6522.343283582091], [1.654589631E12, 6084.928571428572], [1.654589628E12, 6838.583333333334], [1.654589649E12, 5543.942857142857], [1.6545896505E12, 5585.119047619047], [1.6545896565E12, 5661.517241379309], [1.6545896355E12, 5554.2], [1.654589658E12, 6684.189189189189], [1.654589637E12, 5539.714285714285], [1.6545896325E12, 5973.314285714286], [1.6545896535E12, 5734.129032258064], [1.654589634E12, 5537.1875], [1.654589655E12, 5551.124999999999], [1.6545896415E12, 5568.381818181819], [1.6545896385E12, 5570.68181818182], [1.65458964E12, 5480.785714285715]], "isOverall": false, "label": "https://localhost:7000/api/listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654589658E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5184.0, "minX": 1.6545896235E12, "maxY": 7721.0, "series": [{"data": [[1.654589646E12, 5609.40625], [1.654589625E12, 6290.333333333333], [1.6545896265E12, 7721.0], [1.6545896475E12, 5599.833333333335], [1.654589643E12, 5473.900000000001], [1.6545896445E12, 5733.083333333335], [1.6545896235E12, 5184.0], [1.6545896295E12, 5527.333333333332], [1.654589652E12, 6521.731343283582], [1.654589631E12, 6084.571428571428], [1.654589628E12, 6836.875], [1.654589649E12, 5543.828571428574], [1.6545896505E12, 5585.0714285714275], [1.6545896565E12, 5661.413793103449], [1.6545896355E12, 5554.05], [1.654589658E12, 6684.135135135134], [1.654589637E12, 5539.52380952381], [1.6545896325E12, 5973.171428571428], [1.6545896535E12, 5734.0806451612925], [1.654589634E12, 5537.125], [1.654589655E12, 5551.0875000000015], [1.6545896415E12, 5568.272727272727], [1.6545896385E12, 5570.52272727273], [1.65458964E12, 5480.607142857142]], "isOverall": false, "label": "https://localhost:7000/api/listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654589658E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 19.42857142857143, "minX": 1.6545896235E12, "maxY": 719.5945945945947, "series": [{"data": [[1.654589646E12, 20.3125], [1.654589625E12, 169.33333333333334], [1.6545896265E12, 24.0], [1.6545896475E12, 20.36111111111111], [1.654589643E12, 20.799999999999997], [1.6545896445E12, 58.35714285714284], [1.6545896235E12, 52.75], [1.6545896295E12, 26.041666666666668], [1.654589652E12, 28.358208955223883], [1.654589631E12, 62.57142857142858], [1.654589628E12, 180.45833333333331], [1.654589649E12, 146.25714285714284], [1.6545896505E12, 21.785714285714285], [1.6545896565E12, 20.24137931034483], [1.6545896355E12, 22.824999999999996], [1.654589658E12, 719.5945945945947], [1.654589637E12, 21.38095238095238], [1.6545896325E12, 32.22857142857142], [1.6545896535E12, 25.306451612903224], [1.654589634E12, 21.687500000000004], [1.654589655E12, 24.437499999999996], [1.6545896415E12, 21.436363636363634], [1.6545896385E12, 21.295454545454543], [1.65458964E12, 19.42857142857143]], "isOverall": false, "label": "https://localhost:7000/api/listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654589658E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4372.0, "minX": 1.6545896235E12, "maxY": 9695.0, "series": [{"data": [[1.654589625E12, 7159.0], [1.6545896265E12, 8941.0], [1.6545896235E12, 6639.0], [1.654589628E12, 9695.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.654589625E12, 7159.0], [1.6545896265E12, 8941.0], [1.6545896235E12, 6639.0], [1.654589628E12, 9695.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.654589625E12, 7159.0], [1.6545896265E12, 8941.0], [1.6545896235E12, 6639.0], [1.654589628E12, 9695.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.654589625E12, 7159.0], [1.6545896265E12, 8941.0], [1.6545896235E12, 6639.0], [1.654589628E12, 9695.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.654589625E12, 5721.0], [1.6545896265E12, 6515.0], [1.6545896235E12, 4372.0], [1.654589628E12, 7742.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.654589625E12, 6069.0], [1.6545896265E12, 7728.0], [1.6545896235E12, 4941.5], [1.654589628E12, 7851.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654589628E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 5142.0, "minX": 1.0, "maxY": 7851.0, "series": [{"data": [[1.0, 6515.0], [3.0, 5895.0], [24.0, 7851.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 5910.0], [37.0, 6507.0], [40.0, 5558.0], [44.0, 5638.5], [12.0, 5533.5], [14.0, 5604.5], [56.0, 5490.5], [16.0, 5531.0], [1.0, 5142.0], [17.0, 5574.0], [18.0, 5590.0], [72.0, 5585.0], [19.0, 5408.0], [20.0, 5583.5], [21.0, 5548.0], [85.0, 6438.0], [24.0, 5588.0], [27.0, 5578.0], [28.0, 5568.5], [29.0, 5662.0], [30.0, 5599.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 85.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 5142.0, "minX": 1.0, "maxY": 7845.0, "series": [{"data": [[1.0, 6508.0], [3.0, 5870.0], [24.0, 7845.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 5909.5], [37.0, 6507.0], [40.0, 5558.0], [44.0, 5638.5], [12.0, 5533.5], [14.0, 5604.5], [56.0, 5490.5], [16.0, 5530.5], [1.0, 5142.0], [17.0, 5574.0], [18.0, 5590.0], [72.0, 5585.0], [19.0, 5408.0], [20.0, 5583.0], [21.0, 5548.0], [85.0, 6438.0], [24.0, 5588.0], [27.0, 5578.0], [28.0, 5568.5], [29.0, 5662.0], [30.0, 5599.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 85.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.3333333333333335, "minX": 1.6545896175E12, "maxY": 40.0, "series": [{"data": [[1.654589646E12, 40.0], [1.654589625E12, 12.0], [1.6545896265E12, 14.666666666666666], [1.6545896475E12, 40.0], [1.654589622E12, 8.0], [1.654589643E12, 35.333333333333336], [1.6545896445E12, 40.0], [1.6545896235E12, 11.333333333333334], [1.6545896295E12, 19.333333333333332], [1.654589652E12, 22.0], [1.654589631E12, 20.0], [1.654589628E12, 16.0], [1.654589649E12, 40.0], [1.6545896505E12, 39.333333333333336], [1.6545896355E12, 27.333333333333332], [1.654589637E12, 28.0], [1.6545896325E12, 22.666666666666668], [1.654589634E12, 24.666666666666668], [1.654589619E12, 4.0], [1.6545896205E12, 7.333333333333333], [1.6545896415E12, 34.666666666666664], [1.6545896385E12, 30.666666666666668], [1.6545896175E12, 3.3333333333333335], [1.65458964E12, 32.666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654589652E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.6545896235E12, "maxY": 56.0, "series": [{"data": [[1.654589625E12, 2.0], [1.6545896265E12, 1.3333333333333333], [1.6545896235E12, 2.6666666666666665], [1.654589628E12, 3.3333333333333335]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.654589646E12, 21.333333333333332], [1.6545896475E12, 48.0], [1.654589643E12, 6.666666666666667], [1.6545896445E12, 56.0], [1.6545896295E12, 16.0], [1.654589652E12, 44.666666666666664], [1.654589631E12, 9.333333333333334], [1.654589628E12, 12.666666666666666], [1.654589649E12, 23.333333333333332], [1.6545896505E12, 28.0], [1.6545896565E12, 19.333333333333332], [1.6545896355E12, 26.666666666666668], [1.654589658E12, 24.666666666666668], [1.654589637E12, 14.0], [1.6545896325E12, 23.333333333333332], [1.6545896535E12, 41.333333333333336], [1.654589634E12, 10.666666666666666], [1.654589655E12, 53.333333333333336], [1.6545896415E12, 36.666666666666664], [1.6545896385E12, 29.333333333333332], [1.65458964E12, 18.666666666666668]], "isOverall": false, "label": "404", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654589658E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.6545896235E12, "maxY": 56.0, "series": [{"data": [[1.654589646E12, 21.333333333333332], [1.6545896475E12, 48.0], [1.654589643E12, 6.666666666666667], [1.6545896445E12, 56.0], [1.6545896295E12, 16.0], [1.654589652E12, 44.666666666666664], [1.654589631E12, 9.333333333333334], [1.654589628E12, 12.666666666666666], [1.654589649E12, 23.333333333333332], [1.6545896505E12, 28.0], [1.6545896565E12, 19.333333333333332], [1.6545896355E12, 26.666666666666668], [1.654589658E12, 24.666666666666668], [1.654589637E12, 14.0], [1.6545896325E12, 23.333333333333332], [1.6545896535E12, 41.333333333333336], [1.654589634E12, 10.666666666666666], [1.654589655E12, 53.333333333333336], [1.6545896415E12, 36.666666666666664], [1.6545896385E12, 29.333333333333332], [1.65458964E12, 18.666666666666668]], "isOverall": false, "label": "https://localhost:7000/api/listings-failure", "isController": false}, {"data": [[1.654589625E12, 2.0], [1.6545896265E12, 1.3333333333333333], [1.6545896235E12, 2.6666666666666665], [1.654589628E12, 3.3333333333333335]], "isOverall": false, "label": "https://localhost:7000/api/listings-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654589658E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.6545896235E12, "maxY": 56.0, "series": [{"data": [[1.654589625E12, 2.0], [1.6545896265E12, 1.3333333333333333], [1.6545896235E12, 2.6666666666666665], [1.654589628E12, 3.3333333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.654589646E12, 21.333333333333332], [1.6545896475E12, 48.0], [1.654589643E12, 6.666666666666667], [1.6545896445E12, 56.0], [1.6545896295E12, 16.0], [1.654589652E12, 44.666666666666664], [1.654589631E12, 9.333333333333334], [1.654589628E12, 12.666666666666666], [1.654589649E12, 23.333333333333332], [1.6545896505E12, 28.0], [1.6545896565E12, 19.333333333333332], [1.6545896355E12, 26.666666666666668], [1.654589658E12, 24.666666666666668], [1.654589637E12, 14.0], [1.6545896325E12, 23.333333333333332], [1.6545896535E12, 41.333333333333336], [1.654589634E12, 10.666666666666666], [1.654589655E12, 53.333333333333336], [1.6545896415E12, 36.666666666666664], [1.6545896385E12, 29.333333333333332], [1.65458964E12, 18.666666666666668]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654589658E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

