/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 109.0, "minX": 0.0, "maxY": 17951.0, "series": [{"data": [[0.0, 109.0], [0.1, 109.0], [0.2, 109.0], [0.3, 110.0], [0.4, 110.0], [0.5, 111.0], [0.6, 111.0], [0.7, 112.0], [0.8, 112.0], [0.9, 112.0], [1.0, 112.0], [1.1, 113.0], [1.2, 113.0], [1.3, 113.0], [1.4, 114.0], [1.5, 114.0], [1.6, 116.0], [1.7, 116.0], [1.8, 117.0], [1.9, 118.0], [2.0, 119.0], [2.1, 120.0], [2.2, 120.0], [2.3, 120.0], [2.4, 121.0], [2.5, 121.0], [2.6, 122.0], [2.7, 122.0], [2.8, 122.0], [2.9, 122.0], [3.0, 123.0], [3.1, 130.0], [3.2, 130.0], [3.3, 213.0], [3.4, 472.0], [3.5, 715.0], [3.6, 715.0], [3.7, 890.0], [3.8, 975.0], [3.9, 1226.0], [4.0, 1461.0], [4.1, 1717.0], [4.2, 1976.0], [4.3, 1976.0], [4.4, 5010.0], [4.5, 5017.0], [4.6, 5017.0], [4.7, 5022.0], [4.8, 5022.0], [4.9, 5026.0], [5.0, 5026.0], [5.1, 5027.0], [5.2, 5028.0], [5.3, 5029.0], [5.4, 5030.0], [5.5, 5031.0], [5.6, 5032.0], [5.7, 5033.0], [5.8, 5033.0], [5.9, 5034.0], [6.0, 5036.0], [6.1, 5039.0], [6.2, 5041.0], [6.3, 5048.0], [6.4, 5050.0], [6.5, 5050.0], [6.6, 5054.0], [6.7, 5059.0], [6.8, 5061.0], [6.9, 5063.0], [7.0, 5065.0], [7.1, 5066.0], [7.2, 5066.0], [7.3, 5068.0], [7.4, 5070.0], [7.5, 5071.0], [7.6, 5071.0], [7.7, 5074.0], [7.8, 5075.0], [7.9, 5075.0], [8.0, 5075.0], [8.1, 5075.0], [8.2, 5076.0], [8.3, 5077.0], [8.4, 5080.0], [8.5, 5081.0], [8.6, 5081.0], [8.7, 5082.0], [8.8, 5082.0], [8.9, 5085.0], [9.0, 5093.0], [9.1, 5096.0], [9.2, 5098.0], [9.3, 5098.0], [9.4, 5101.0], [9.5, 5101.0], [9.6, 5104.0], [9.7, 5107.0], [9.8, 5107.0], [9.9, 5107.0], [10.0, 5107.0], [10.1, 5109.0], [10.2, 5111.0], [10.3, 5112.0], [10.4, 5113.0], [10.5, 5113.0], [10.6, 5114.0], [10.7, 5115.0], [10.8, 5115.0], [10.9, 5115.0], [11.0, 5116.0], [11.1, 5116.0], [11.2, 5117.0], [11.3, 5122.0], [11.4, 5123.0], [11.5, 5123.0], [11.6, 5128.0], [11.7, 5128.0], [11.8, 5130.0], [11.9, 5130.0], [12.0, 5131.0], [12.1, 5131.0], [12.2, 5131.0], [12.3, 5132.0], [12.4, 5137.0], [12.5, 5141.0], [12.6, 5144.0], [12.7, 5145.0], [12.8, 5146.0], [12.9, 5146.0], [13.0, 5150.0], [13.1, 5151.0], [13.2, 5153.0], [13.3, 5154.0], [13.4, 5154.0], [13.5, 5155.0], [13.6, 5155.0], [13.7, 5156.0], [13.8, 5156.0], [13.9, 5157.0], [14.0, 5160.0], [14.1, 5160.0], [14.2, 5162.0], [14.3, 5162.0], [14.4, 5163.0], [14.5, 5164.0], [14.6, 5165.0], [14.7, 5170.0], [14.8, 5173.0], [14.9, 5173.0], [15.0, 5173.0], [15.1, 5175.0], [15.2, 5176.0], [15.3, 5176.0], [15.4, 5178.0], [15.5, 5179.0], [15.6, 5181.0], [15.7, 5184.0], [15.8, 5184.0], [15.9, 5185.0], [16.0, 5185.0], [16.1, 5185.0], [16.2, 5187.0], [16.3, 5192.0], [16.4, 5192.0], [16.5, 5192.0], [16.6, 5192.0], [16.7, 5194.0], [16.8, 5196.0], [16.9, 5200.0], [17.0, 5200.0], [17.1, 5201.0], [17.2, 5201.0], [17.3, 5202.0], [17.4, 5205.0], [17.5, 5207.0], [17.6, 5207.0], [17.7, 5208.0], [17.8, 5208.0], [17.9, 5208.0], [18.0, 5210.0], [18.1, 5217.0], [18.2, 5217.0], [18.3, 5218.0], [18.4, 5219.0], [18.5, 5222.0], [18.6, 5222.0], [18.7, 5225.0], [18.8, 5227.0], [18.9, 5227.0], [19.0, 5228.0], [19.1, 5230.0], [19.2, 5231.0], [19.3, 5231.0], [19.4, 5232.0], [19.5, 5234.0], [19.6, 5236.0], [19.7, 5237.0], [19.8, 5237.0], [19.9, 5237.0], [20.0, 5239.0], [20.1, 5239.0], [20.2, 5240.0], [20.3, 5246.0], [20.4, 5247.0], [20.5, 5247.0], [20.6, 5249.0], [20.7, 5250.0], [20.8, 5250.0], [20.9, 5252.0], [21.0, 5252.0], [21.1, 5253.0], [21.2, 5254.0], [21.3, 5255.0], [21.4, 5257.0], [21.5, 5257.0], [21.6, 5262.0], [21.7, 5262.0], [21.8, 5264.0], [21.9, 5265.0], [22.0, 5265.0], [22.1, 5267.0], [22.2, 5267.0], [22.3, 5268.0], [22.4, 5268.0], [22.5, 5272.0], [22.6, 5273.0], [22.7, 5275.0], [22.8, 5278.0], [22.9, 5278.0], [23.0, 5280.0], [23.1, 5281.0], [23.2, 5283.0], [23.3, 5284.0], [23.4, 5284.0], [23.5, 5289.0], [23.6, 5289.0], [23.7, 5295.0], [23.8, 5295.0], [23.9, 5295.0], [24.0, 5296.0], [24.1, 5297.0], [24.2, 5298.0], [24.3, 5298.0], [24.4, 5299.0], [24.5, 5301.0], [24.6, 5302.0], [24.7, 5302.0], [24.8, 5304.0], [24.9, 5304.0], [25.0, 5306.0], [25.1, 5306.0], [25.2, 5309.0], [25.3, 5311.0], [25.4, 5311.0], [25.5, 5312.0], [25.6, 5314.0], [25.7, 5317.0], [25.8, 5317.0], [25.9, 5322.0], [26.0, 5323.0], [26.1, 5324.0], [26.2, 5327.0], [26.3, 5328.0], [26.4, 5328.0], [26.5, 5328.0], [26.6, 5329.0], [26.7, 5330.0], [26.8, 5331.0], [26.9, 5331.0], [27.0, 5333.0], [27.1, 5335.0], [27.2, 5335.0], [27.3, 5336.0], [27.4, 5340.0], [27.5, 5341.0], [27.6, 5341.0], [27.7, 5342.0], [27.8, 5343.0], [27.9, 5343.0], [28.0, 5343.0], [28.1, 5351.0], [28.2, 5353.0], [28.3, 5355.0], [28.4, 5356.0], [28.5, 5356.0], [28.6, 5356.0], [28.7, 5359.0], [28.8, 5359.0], [28.9, 5360.0], [29.0, 5360.0], [29.1, 5361.0], [29.2, 5362.0], [29.3, 5362.0], [29.4, 5364.0], [29.5, 5369.0], [29.6, 5369.0], [29.7, 5371.0], [29.8, 5371.0], [29.9, 5372.0], [30.0, 5372.0], [30.1, 5372.0], [30.2, 5373.0], [30.3, 5374.0], [30.4, 5374.0], [30.5, 5376.0], [30.6, 5377.0], [30.7, 5382.0], [30.8, 5382.0], [30.9, 5384.0], [31.0, 5386.0], [31.1, 5387.0], [31.2, 5388.0], [31.3, 5391.0], [31.4, 5391.0], [31.5, 5391.0], [31.6, 5392.0], [31.7, 5394.0], [31.8, 5396.0], [31.9, 5401.0], [32.0, 5401.0], [32.1, 5401.0], [32.2, 5401.0], [32.3, 5405.0], [32.4, 5405.0], [32.5, 5406.0], [32.6, 5408.0], [32.7, 5408.0], [32.8, 5408.0], [32.9, 5408.0], [33.0, 5410.0], [33.1, 5414.0], [33.2, 5417.0], [33.3, 5418.0], [33.4, 5420.0], [33.5, 5420.0], [33.6, 5420.0], [33.7, 5422.0], [33.8, 5423.0], [33.9, 5424.0], [34.0, 5428.0], [34.1, 5429.0], [34.2, 5430.0], [34.3, 5430.0], [34.4, 5432.0], [34.5, 5432.0], [34.6, 5434.0], [34.7, 5434.0], [34.8, 5435.0], [34.9, 5437.0], [35.0, 5437.0], [35.1, 5437.0], [35.2, 5438.0], [35.3, 5439.0], [35.4, 5439.0], [35.5, 5447.0], [35.6, 5450.0], [35.7, 5454.0], [35.8, 5454.0], [35.9, 5454.0], [36.0, 5454.0], [36.1, 5454.0], [36.2, 5457.0], [36.3, 5462.0], [36.4, 5462.0], [36.5, 5462.0], [36.6, 5464.0], [36.7, 5464.0], [36.8, 5468.0], [36.9, 5468.0], [37.0, 5468.0], [37.1, 5468.0], [37.2, 5468.0], [37.3, 5471.0], [37.4, 5474.0], [37.5, 5476.0], [37.6, 5478.0], [37.7, 5478.0], [37.8, 5479.0], [37.9, 5479.0], [38.0, 5483.0], [38.1, 5483.0], [38.2, 5484.0], [38.3, 5486.0], [38.4, 5488.0], [38.5, 5493.0], [38.6, 5493.0], [38.7, 5494.0], [38.8, 5494.0], [38.9, 5497.0], [39.0, 5497.0], [39.1, 5498.0], [39.2, 5499.0], [39.3, 5499.0], [39.4, 5499.0], [39.5, 5499.0], [39.6, 5504.0], [39.7, 5506.0], [39.8, 5508.0], [39.9, 5508.0], [40.0, 5509.0], [40.1, 5509.0], [40.2, 5509.0], [40.3, 5512.0], [40.4, 5514.0], [40.5, 5514.0], [40.6, 5514.0], [40.7, 5515.0], [40.8, 5515.0], [40.9, 5516.0], [41.0, 5517.0], [41.1, 5524.0], [41.2, 5525.0], [41.3, 5526.0], [41.4, 5526.0], [41.5, 5526.0], [41.6, 5530.0], [41.7, 5530.0], [41.8, 5530.0], [41.9, 5535.0], [42.0, 5537.0], [42.1, 5538.0], [42.2, 5538.0], [42.3, 5538.0], [42.4, 5538.0], [42.5, 5539.0], [42.6, 5540.0], [42.7, 5541.0], [42.8, 5542.0], [42.9, 5542.0], [43.0, 5543.0], [43.1, 5544.0], [43.2, 5545.0], [43.3, 5547.0], [43.4, 5553.0], [43.5, 5555.0], [43.6, 5555.0], [43.7, 5556.0], [43.8, 5560.0], [43.9, 5561.0], [44.0, 5561.0], [44.1, 5561.0], [44.2, 5566.0], [44.3, 5566.0], [44.4, 5568.0], [44.5, 5569.0], [44.6, 5570.0], [44.7, 5570.0], [44.8, 5570.0], [44.9, 5572.0], [45.0, 5574.0], [45.1, 5574.0], [45.2, 5575.0], [45.3, 5575.0], [45.4, 5576.0], [45.5, 5578.0], [45.6, 5583.0], [45.7, 5587.0], [45.8, 5587.0], [45.9, 5588.0], [46.0, 5589.0], [46.1, 5590.0], [46.2, 5591.0], [46.3, 5592.0], [46.4, 5597.0], [46.5, 5597.0], [46.6, 5599.0], [46.7, 5600.0], [46.8, 5601.0], [46.9, 5604.0], [47.0, 5605.0], [47.1, 5606.0], [47.2, 5606.0], [47.3, 5606.0], [47.4, 5607.0], [47.5, 5608.0], [47.6, 5609.0], [47.7, 5612.0], [47.8, 5614.0], [47.9, 5614.0], [48.0, 5614.0], [48.1, 5615.0], [48.2, 5617.0], [48.3, 5617.0], [48.4, 5618.0], [48.5, 5618.0], [48.6, 5618.0], [48.7, 5619.0], [48.8, 5619.0], [48.9, 5621.0], [49.0, 5622.0], [49.1, 5623.0], [49.2, 5630.0], [49.3, 5630.0], [49.4, 5632.0], [49.5, 5635.0], [49.6, 5635.0], [49.7, 5635.0], [49.8, 5638.0], [49.9, 5640.0], [50.0, 5644.0], [50.1, 5644.0], [50.2, 5644.0], [50.3, 5645.0], [50.4, 5647.0], [50.5, 5648.0], [50.6, 5649.0], [50.7, 5649.0], [50.8, 5649.0], [50.9, 5650.0], [51.0, 5650.0], [51.1, 5652.0], [51.2, 5653.0], [51.3, 5659.0], [51.4, 5660.0], [51.5, 5660.0], [51.6, 5663.0], [51.7, 5664.0], [51.8, 5666.0], [51.9, 5666.0], [52.0, 5667.0], [52.1, 5668.0], [52.2, 5668.0], [52.3, 5668.0], [52.4, 5668.0], [52.5, 5669.0], [52.6, 5671.0], [52.7, 5675.0], [52.8, 5677.0], [52.9, 5677.0], [53.0, 5678.0], [53.1, 5680.0], [53.2, 5680.0], [53.3, 5681.0], [53.4, 5682.0], [53.5, 5684.0], [53.6, 5684.0], [53.7, 5685.0], [53.8, 5689.0], [53.9, 5689.0], [54.0, 5695.0], [54.1, 5698.0], [54.2, 5699.0], [54.3, 5699.0], [54.4, 5699.0], [54.5, 5700.0], [54.6, 5701.0], [54.7, 5705.0], [54.8, 5705.0], [54.9, 5708.0], [55.0, 5708.0], [55.1, 5711.0], [55.2, 5711.0], [55.3, 5711.0], [55.4, 5713.0], [55.5, 5714.0], [55.6, 5715.0], [55.7, 5716.0], [55.8, 5716.0], [55.9, 5716.0], [56.0, 5720.0], [56.1, 5721.0], [56.2, 5723.0], [56.3, 5723.0], [56.4, 5725.0], [56.5, 5725.0], [56.6, 5726.0], [56.7, 5728.0], [56.8, 5729.0], [56.9, 5732.0], [57.0, 5735.0], [57.1, 5735.0], [57.2, 5735.0], [57.3, 5736.0], [57.4, 5741.0], [57.5, 5742.0], [57.6, 5743.0], [57.7, 5744.0], [57.8, 5745.0], [57.9, 5745.0], [58.0, 5746.0], [58.1, 5746.0], [58.2, 5748.0], [58.3, 5751.0], [58.4, 5752.0], [58.5, 5753.0], [58.6, 5753.0], [58.7, 5753.0], [58.8, 5755.0], [58.9, 5757.0], [59.0, 5757.0], [59.1, 5759.0], [59.2, 5760.0], [59.3, 5760.0], [59.4, 5761.0], [59.5, 5764.0], [59.6, 5764.0], [59.7, 5772.0], [59.8, 5773.0], [59.9, 5773.0], [60.0, 5773.0], [60.1, 5777.0], [60.2, 5780.0], [60.3, 5781.0], [60.4, 5783.0], [60.5, 5783.0], [60.6, 5784.0], [60.7, 5784.0], [60.8, 5784.0], [60.9, 5785.0], [61.0, 5787.0], [61.1, 5787.0], [61.2, 5788.0], [61.3, 5788.0], [61.4, 5791.0], [61.5, 5791.0], [61.6, 5793.0], [61.7, 5793.0], [61.8, 5794.0], [61.9, 5795.0], [62.0, 5800.0], [62.1, 5802.0], [62.2, 5802.0], [62.3, 5802.0], [62.4, 5804.0], [62.5, 5806.0], [62.6, 5807.0], [62.7, 5810.0], [62.8, 5810.0], [62.9, 5810.0], [63.0, 5812.0], [63.1, 5814.0], [63.2, 5815.0], [63.3, 5815.0], [63.4, 5818.0], [63.5, 5818.0], [63.6, 5818.0], [63.7, 5819.0], [63.8, 5822.0], [63.9, 5822.0], [64.0, 5822.0], [64.1, 5823.0], [64.2, 5832.0], [64.3, 5832.0], [64.4, 5834.0], [64.5, 5835.0], [64.6, 5837.0], [64.7, 5837.0], [64.8, 5838.0], [64.9, 5839.0], [65.0, 5839.0], [65.1, 5840.0], [65.2, 5843.0], [65.3, 5845.0], [65.4, 5846.0], [65.5, 5847.0], [65.6, 5850.0], [65.7, 5850.0], [65.8, 5850.0], [65.9, 5851.0], [66.0, 5854.0], [66.1, 5855.0], [66.2, 5860.0], [66.3, 5861.0], [66.4, 5863.0], [66.5, 5863.0], [66.6, 5863.0], [66.7, 5865.0], [66.8, 5865.0], [66.9, 5866.0], [67.0, 5867.0], [67.1, 5868.0], [67.2, 5868.0], [67.3, 5876.0], [67.4, 5876.0], [67.5, 5878.0], [67.6, 5878.0], [67.7, 5881.0], [67.8, 5883.0], [67.9, 5883.0], [68.0, 5883.0], [68.1, 5884.0], [68.2, 5885.0], [68.3, 5886.0], [68.4, 5889.0], [68.5, 5890.0], [68.6, 5890.0], [68.7, 5892.0], [68.8, 5892.0], [68.9, 5894.0], [69.0, 5897.0], [69.1, 5898.0], [69.2, 5900.0], [69.3, 5900.0], [69.4, 5902.0], [69.5, 5902.0], [69.6, 5902.0], [69.7, 5902.0], [69.8, 5907.0], [69.9, 5908.0], [70.0, 5908.0], [70.1, 5912.0], [70.2, 5912.0], [70.3, 5912.0], [70.4, 5913.0], [70.5, 5916.0], [70.6, 5916.0], [70.7, 5918.0], [70.8, 5918.0], [70.9, 5925.0], [71.0, 5926.0], [71.1, 5927.0], [71.2, 5928.0], [71.3, 5928.0], [71.4, 5928.0], [71.5, 5928.0], [71.6, 5929.0], [71.7, 5930.0], [71.8, 5930.0], [71.9, 5934.0], [72.0, 5938.0], [72.1, 5940.0], [72.2, 5940.0], [72.3, 5943.0], [72.4, 5945.0], [72.5, 5946.0], [72.6, 5948.0], [72.7, 5949.0], [72.8, 5949.0], [72.9, 5949.0], [73.0, 5953.0], [73.1, 5954.0], [73.2, 5955.0], [73.3, 5957.0], [73.4, 5958.0], [73.5, 5959.0], [73.6, 5959.0], [73.7, 5960.0], [73.8, 5961.0], [73.9, 5963.0], [74.0, 5964.0], [74.1, 5964.0], [74.2, 5966.0], [74.3, 5966.0], [74.4, 5970.0], [74.5, 5972.0], [74.6, 5975.0], [74.7, 5976.0], [74.8, 5976.0], [74.9, 5983.0], [75.0, 5983.0], [75.1, 5983.0], [75.2, 5985.0], [75.3, 5985.0], [75.4, 5989.0], [75.5, 5989.0], [75.6, 5990.0], [75.7, 5990.0], [75.8, 5990.0], [75.9, 5993.0], [76.0, 5993.0], [76.1, 5993.0], [76.2, 5997.0], [76.3, 5997.0], [76.4, 6000.0], [76.5, 6000.0], [76.6, 6003.0], [76.7, 6004.0], [76.8, 6007.0], [76.9, 6009.0], [77.0, 6015.0], [77.1, 6021.0], [77.2, 6021.0], [77.3, 7102.0], [77.4, 7951.0], [77.5, 7995.0], [77.6, 8043.0], [77.7, 8321.0], [77.8, 8349.0], [77.9, 8349.0], [78.0, 8412.0], [78.1, 8457.0], [78.2, 8501.0], [78.3, 8540.0], [78.4, 8582.0], [78.5, 8646.0], [78.6, 8646.0], [78.7, 8689.0], [78.8, 8732.0], [78.9, 8765.0], [79.0, 8820.0], [79.1, 8879.0], [79.2, 8910.0], [79.3, 8910.0], [79.4, 8955.0], [79.5, 8995.0], [79.6, 9029.0], [79.7, 9074.0], [79.8, 9104.0], [79.9, 9148.0], [80.0, 9148.0], [80.1, 9192.0], [80.2, 9223.0], [80.3, 9254.0], [80.4, 9324.0], [80.5, 9354.0], [80.6, 9399.0], [80.7, 9448.0], [80.8, 9448.0], [80.9, 9470.0], [81.0, 9515.0], [81.1, 9562.0], [81.2, 9588.0], [81.3, 9590.0], [81.4, 9637.0], [81.5, 9637.0], [81.6, 9650.0], [81.7, 9678.0], [81.8, 9724.0], [81.9, 9773.0], [82.0, 9821.0], [82.1, 9868.0], [82.2, 9868.0], [82.3, 9898.0], [82.4, 9946.0], [82.5, 9994.0], [82.6, 10024.0], [82.7, 10076.0], [82.8, 10104.0], [82.9, 10104.0], [83.0, 10152.0], [83.1, 10165.0], [83.2, 10188.0], [83.3, 10210.0], [83.4, 10230.0], [83.5, 10257.0], [83.6, 10257.0], [83.7, 10258.0], [83.8, 10293.0], [83.9, 10350.0], [84.0, 10374.0], [84.1, 10387.0], [84.2, 10406.0], [84.3, 10406.0], [84.4, 10447.0], [84.5, 10451.0], [84.6, 10494.0], [84.7, 10519.0], [84.8, 10566.0], [84.9, 10580.0], [85.0, 10580.0], [85.1, 10611.0], [85.2, 10637.0], [85.3, 10641.0], [85.4, 10681.0], [85.5, 10726.0], [85.6, 10845.0], [85.7, 10855.0], [85.8, 10855.0], [85.9, 10886.0], [86.0, 10917.0], [86.1, 10932.0], [86.2, 10973.0], [86.3, 10981.0], [86.4, 11017.0], [86.5, 11017.0], [86.6, 11018.0], [86.7, 11058.0], [86.8, 11102.0], [86.9, 11352.0], [87.0, 11398.0], [87.1, 11464.0], [87.2, 11464.0], [87.3, 11559.0], [87.4, 11609.0], [87.5, 11649.0], [87.6, 11709.0], [87.7, 11752.0], [87.8, 11807.0], [87.9, 11807.0], [88.0, 12111.0], [88.1, 12153.0], [88.2, 12161.0], [88.3, 12175.0], [88.4, 12223.0], [88.5, 12229.0], [88.6, 12229.0], [88.7, 12246.0], [88.8, 12254.0], [88.9, 12262.0], [89.0, 12278.0], [89.1, 12298.0], [89.2, 12311.0], [89.3, 12311.0], [89.4, 12356.0], [89.5, 12419.0], [89.6, 12472.0], [89.7, 12496.0], [89.8, 12668.0], [89.9, 12719.0], [90.0, 12719.0], [90.1, 12779.0], [90.2, 12850.0], [90.3, 13002.0], [90.4, 13047.0], [90.5, 13049.0], [90.6, 13066.0], [90.7, 13097.0], [90.8, 13097.0], [90.9, 13101.0], [91.0, 13107.0], [91.1, 13145.0], [91.2, 13159.0], [91.3, 13205.0], [91.4, 13472.0], [91.5, 13472.0], [91.6, 13541.0], [91.7, 13721.0], [91.8, 13793.0], [91.9, 13808.0], [92.0, 13856.0], [92.1, 13856.0], [92.2, 13856.0], [92.3, 13867.0], [92.4, 13917.0], [92.5, 13928.0], [92.6, 13963.0], [92.7, 13972.0], [92.8, 13988.0], [92.9, 13988.0], [93.0, 14032.0], [93.1, 14109.0], [93.2, 14173.0], [93.3, 14358.0], [93.4, 14411.0], [93.5, 14488.0], [93.6, 14488.0], [93.7, 14550.0], [93.8, 14605.0], [93.9, 14611.0], [94.0, 14662.0], [94.1, 14670.0], [94.2, 14701.0], [94.3, 14701.0], [94.4, 14739.0], [94.5, 14748.0], [94.6, 14779.0], [94.7, 14791.0], [94.8, 14842.0], [94.9, 14904.0], [95.0, 14904.0], [95.1, 14978.0], [95.2, 15047.0], [95.3, 15217.0], [95.4, 15276.0], [95.5, 15367.0], [95.6, 15451.0], [95.7, 15480.0], [95.8, 15480.0], [95.9, 15526.0], [96.0, 15624.0], [96.1, 15660.0], [96.2, 15697.0], [96.3, 15777.0], [96.4, 15866.0], [96.5, 15866.0], [96.6, 15949.0], [96.7, 16023.0], [96.8, 16118.0], [96.9, 16206.0], [97.0, 16280.0], [97.1, 16303.0], [97.2, 16303.0], [97.3, 16355.0], [97.4, 16376.0], [97.5, 16416.0], [97.6, 16451.0], [97.7, 16554.0], [97.8, 16616.0], [97.9, 16616.0], [98.0, 16695.0], [98.1, 16782.0], [98.2, 16881.0], [98.3, 16919.0], [98.4, 16953.0], [98.5, 17037.0], [98.6, 17037.0], [98.7, 17118.0], [98.8, 17201.0], [98.9, 17219.0], [99.0, 17280.0], [99.1, 17384.0], [99.2, 17452.0], [99.3, 17452.0], [99.4, 17538.0], [99.5, 17636.0], [99.6, 17696.0], [99.7, 17790.0], [99.8, 17881.0], [99.9, 17951.0], [100.0, 17951.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[0.0, 146.0], [0.1, 146.0], [0.2, 147.0], [0.3, 148.0], [0.4, 151.0], [0.5, 152.0], [0.6, 153.0], [0.7, 153.0], [0.8, 153.0], [0.9, 155.0], [1.0, 157.0], [1.1, 160.0], [1.2, 162.0], [1.3, 163.0], [1.4, 164.0], [1.5, 164.0], [1.6, 167.0], [1.7, 167.0], [1.8, 167.0], [1.9, 167.0], [2.0, 170.0], [2.1, 171.0], [2.2, 171.0], [2.3, 171.0], [2.4, 171.0], [2.5, 174.0], [2.6, 176.0], [2.7, 179.0], [2.8, 180.0], [2.9, 180.0], [3.0, 181.0], [3.1, 184.0], [3.2, 188.0], [3.3, 230.0], [3.4, 239.0], [3.5, 244.0], [3.6, 244.0], [3.7, 245.0], [3.8, 251.0], [3.9, 251.0], [4.0, 253.0], [4.1, 254.0], [4.2, 255.0], [4.3, 255.0], [4.4, 259.0], [4.5, 262.0], [4.6, 263.0], [4.7, 264.0], [4.8, 264.0], [4.9, 264.0], [5.0, 264.0], [5.1, 265.0], [5.2, 266.0], [5.3, 266.0], [5.4, 267.0], [5.5, 269.0], [5.6, 271.0], [5.7, 273.0], [5.8, 273.0], [5.9, 274.0], [6.0, 274.0], [6.1, 274.0], [6.2, 276.0], [6.3, 277.0], [6.4, 278.0], [6.5, 278.0], [6.6, 279.0], [6.7, 279.0], [6.8, 280.0], [6.9, 281.0], [7.0, 281.0], [7.1, 283.0], [7.2, 283.0], [7.3, 286.0], [7.4, 290.0], [7.5, 291.0], [7.6, 344.0], [7.7, 364.0], [7.8, 364.0], [7.9, 364.0], [8.0, 373.0], [8.1, 390.0], [8.2, 405.0], [8.3, 408.0], [8.4, 414.0], [8.5, 509.0], [8.6, 509.0], [8.7, 526.0], [8.8, 593.0], [8.9, 604.0], [9.0, 637.0], [9.1, 663.0], [9.2, 684.0], [9.3, 684.0], [9.4, 703.0], [9.5, 719.0], [9.6, 822.0], [9.7, 840.0], [9.8, 862.0], [9.9, 962.0], [10.0, 962.0], [10.1, 980.0], [10.2, 1000.0], [10.3, 1069.0], [10.4, 1091.0], [10.5, 1092.0], [10.6, 1141.0], [10.7, 1225.0], [10.8, 1225.0], [10.9, 1249.0], [11.0, 1277.0], [11.1, 1277.0], [11.2, 1398.0], [11.3, 1420.0], [11.4, 1438.0], [11.5, 1438.0], [11.6, 1478.0], [11.7, 1647.0], [11.8, 1691.0], [11.9, 1692.0], [12.0, 1775.0], [12.1, 1796.0], [12.2, 1796.0], [12.3, 1911.0], [12.4, 1932.0], [12.5, 1955.0], [12.6, 2058.0], [12.7, 2159.0], [12.8, 2257.0], [12.9, 2257.0], [13.0, 2357.0], [13.1, 2461.0], [13.2, 2464.0], [13.3, 2564.0], [13.4, 2690.0], [13.5, 2793.0], [13.6, 2793.0], [13.7, 2897.0], [13.8, 2913.0], [13.9, 3017.0], [14.0, 3116.0], [14.1, 3174.0], [14.2, 3274.0], [14.3, 3274.0], [14.4, 3398.0], [14.5, 3442.0], [14.6, 3563.0], [14.7, 3666.0], [14.8, 3704.0], [14.9, 3822.0], [15.0, 3822.0], [15.1, 3859.0], [15.2, 3963.0], [15.3, 4081.0], [15.4, 4125.0], [15.5, 4265.0], [15.6, 4385.0], [15.7, 4417.0], [15.8, 4417.0], [15.9, 4538.0], [16.0, 4645.0], [16.1, 4768.0], [16.2, 4814.0], [16.3, 4932.0], [16.4, 5007.0], [16.5, 5007.0], [16.6, 5014.0], [16.7, 5015.0], [16.8, 5016.0], [16.9, 5020.0], [17.0, 5022.0], [17.1, 5024.0], [17.2, 5024.0], [17.3, 5026.0], [17.4, 5028.0], [17.5, 5028.0], [17.6, 5031.0], [17.7, 5033.0], [17.8, 5035.0], [17.9, 5035.0], [18.0, 5038.0], [18.1, 5038.0], [18.2, 5042.0], [18.3, 5044.0], [18.4, 5047.0], [18.5, 5055.0], [18.6, 5055.0], [18.7, 5055.0], [18.8, 5057.0], [18.9, 5060.0], [19.0, 5063.0], [19.1, 5064.0], [19.2, 5065.0], [19.3, 5065.0], [19.4, 5067.0], [19.5, 5067.0], [19.6, 5068.0], [19.7, 5071.0], [19.8, 5072.0], [19.9, 5072.0], [20.0, 5075.0], [20.1, 5075.0], [20.2, 5076.0], [20.3, 5078.0], [20.4, 5078.0], [20.5, 5079.0], [20.6, 5081.0], [20.7, 5081.0], [20.8, 5081.0], [20.9, 5084.0], [21.0, 5085.0], [21.1, 5093.0], [21.2, 5095.0], [21.3, 5097.0], [21.4, 5101.0], [21.5, 5101.0], [21.6, 5105.0], [21.7, 5106.0], [21.8, 5106.0], [21.9, 5108.0], [22.0, 5109.0], [22.1, 5110.0], [22.2, 5110.0], [22.3, 5110.0], [22.4, 5111.0], [22.5, 5112.0], [22.6, 5112.0], [22.7, 5113.0], [22.8, 5114.0], [22.9, 5114.0], [23.0, 5115.0], [23.1, 5116.0], [23.2, 5117.0], [23.3, 5118.0], [23.4, 5122.0], [23.5, 5123.0], [23.6, 5123.0], [23.7, 5123.0], [23.8, 5127.0], [23.9, 5129.0], [24.0, 5129.0], [24.1, 5129.0], [24.2, 5131.0], [24.3, 5131.0], [24.4, 5132.0], [24.5, 5132.0], [24.6, 5137.0], [24.7, 5141.0], [24.8, 5145.0], [24.9, 5146.0], [25.0, 5147.0], [25.1, 5147.0], [25.2, 5148.0], [25.3, 5148.0], [25.4, 5153.0], [25.5, 5154.0], [25.6, 5155.0], [25.7, 5155.0], [25.8, 5155.0], [25.9, 5156.0], [26.0, 5156.0], [26.1, 5158.0], [26.2, 5160.0], [26.3, 5160.0], [26.4, 5162.0], [26.5, 5162.0], [26.6, 5163.0], [26.7, 5164.0], [26.8, 5166.0], [26.9, 5170.0], [27.0, 5172.0], [27.1, 5176.0], [27.2, 5176.0], [27.3, 5177.0], [27.4, 5178.0], [27.5, 5178.0], [27.6, 5179.0], [27.7, 5184.0], [27.8, 5185.0], [27.9, 5185.0], [28.0, 5185.0], [28.1, 5185.0], [28.2, 5187.0], [28.3, 5188.0], [28.4, 5191.0], [28.5, 5192.0], [28.6, 5192.0], [28.7, 5194.0], [28.8, 5195.0], [28.9, 5195.0], [29.0, 5199.0], [29.1, 5200.0], [29.2, 5201.0], [29.3, 5201.0], [29.4, 5202.0], [29.5, 5203.0], [29.6, 5207.0], [29.7, 5207.0], [29.8, 5207.0], [29.9, 5209.0], [30.0, 5209.0], [30.1, 5209.0], [30.2, 5209.0], [30.3, 5216.0], [30.4, 5217.0], [30.5, 5218.0], [30.6, 5219.0], [30.7, 5219.0], [30.8, 5219.0], [30.9, 5222.0], [31.0, 5226.0], [31.1, 5227.0], [31.2, 5227.0], [31.3, 5231.0], [31.4, 5232.0], [31.5, 5232.0], [31.6, 5232.0], [31.7, 5234.0], [31.8, 5234.0], [31.9, 5237.0], [32.0, 5238.0], [32.1, 5240.0], [32.2, 5240.0], [32.3, 5240.0], [32.4, 5240.0], [32.5, 5247.0], [32.6, 5248.0], [32.7, 5249.0], [32.8, 5250.0], [32.9, 5250.0], [33.0, 5251.0], [33.1, 5251.0], [33.2, 5252.0], [33.3, 5252.0], [33.4, 5253.0], [33.5, 5257.0], [33.6, 5257.0], [33.7, 5257.0], [33.8, 5258.0], [33.9, 5261.0], [34.0, 5263.0], [34.1, 5264.0], [34.2, 5266.0], [34.3, 5266.0], [34.4, 5266.0], [34.5, 5268.0], [34.6, 5270.0], [34.7, 5273.0], [34.8, 5274.0], [34.9, 5274.0], [35.0, 5275.0], [35.1, 5275.0], [35.2, 5278.0], [35.3, 5279.0], [35.4, 5280.0], [35.5, 5283.0], [35.6, 5284.0], [35.7, 5284.0], [35.8, 5284.0], [35.9, 5284.0], [36.0, 5295.0], [36.1, 5295.0], [36.2, 5295.0], [36.3, 5297.0], [36.4, 5298.0], [36.5, 5298.0], [36.6, 5299.0], [36.7, 5300.0], [36.8, 5300.0], [36.9, 5302.0], [37.0, 5303.0], [37.1, 5303.0], [37.2, 5303.0], [37.3, 5304.0], [37.4, 5307.0], [37.5, 5308.0], [37.6, 5310.0], [37.7, 5311.0], [37.8, 5312.0], [37.9, 5312.0], [38.0, 5314.0], [38.1, 5316.0], [38.2, 5322.0], [38.3, 5324.0], [38.4, 5324.0], [38.5, 5325.0], [38.6, 5325.0], [38.7, 5327.0], [38.8, 5327.0], [38.9, 5327.0], [39.0, 5328.0], [39.1, 5330.0], [39.2, 5332.0], [39.3, 5332.0], [39.4, 5332.0], [39.5, 5332.0], [39.6, 5336.0], [39.7, 5336.0], [39.8, 5340.0], [39.9, 5342.0], [40.0, 5342.0], [40.1, 5342.0], [40.2, 5343.0], [40.3, 5343.0], [40.4, 5343.0], [40.5, 5352.0], [40.6, 5352.0], [40.7, 5355.0], [40.8, 5355.0], [40.9, 5358.0], [41.0, 5359.0], [41.1, 5359.0], [41.2, 5360.0], [41.3, 5360.0], [41.4, 5361.0], [41.5, 5361.0], [41.6, 5362.0], [41.7, 5363.0], [41.8, 5363.0], [41.9, 5364.0], [42.0, 5366.0], [42.1, 5370.0], [42.2, 5370.0], [42.3, 5371.0], [42.4, 5371.0], [42.5, 5372.0], [42.6, 5373.0], [42.7, 5374.0], [42.8, 5374.0], [42.9, 5374.0], [43.0, 5376.0], [43.1, 5380.0], [43.2, 5382.0], [43.3, 5384.0], [43.4, 5386.0], [43.5, 5387.0], [43.6, 5387.0], [43.7, 5389.0], [43.8, 5390.0], [43.9, 5391.0], [44.0, 5393.0], [44.1, 5393.0], [44.2, 5396.0], [44.3, 5396.0], [44.4, 5401.0], [44.5, 5402.0], [44.6, 5402.0], [44.7, 5404.0], [44.8, 5404.0], [44.9, 5406.0], [45.0, 5407.0], [45.1, 5407.0], [45.2, 5407.0], [45.3, 5408.0], [45.4, 5415.0], [45.5, 5416.0], [45.6, 5416.0], [45.7, 5417.0], [45.8, 5417.0], [45.9, 5420.0], [46.0, 5423.0], [46.1, 5424.0], [46.2, 5425.0], [46.3, 5427.0], [46.4, 5429.0], [46.5, 5429.0], [46.6, 5430.0], [46.7, 5430.0], [46.8, 5432.0], [46.9, 5432.0], [47.0, 5433.0], [47.1, 5434.0], [47.2, 5434.0], [47.3, 5437.0], [47.4, 5438.0], [47.5, 5438.0], [47.6, 5438.0], [47.7, 5440.0], [47.8, 5446.0], [47.9, 5446.0], [48.0, 5448.0], [48.1, 5449.0], [48.2, 5450.0], [48.3, 5450.0], [48.4, 5451.0], [48.5, 5454.0], [48.6, 5454.0], [48.7, 5455.0], [48.8, 5458.0], [48.9, 5462.0], [49.0, 5462.0], [49.1, 5463.0], [49.2, 5465.0], [49.3, 5465.0], [49.4, 5466.0], [49.5, 5468.0], [49.6, 5468.0], [49.7, 5469.0], [49.8, 5469.0], [49.9, 5472.0], [50.0, 5475.0], [50.1, 5475.0], [50.2, 5477.0], [50.3, 5480.0], [50.4, 5480.0], [50.5, 5482.0], [50.6, 5482.0], [50.7, 5483.0], [50.8, 5483.0], [50.9, 5483.0], [51.0, 5488.0], [51.1, 5493.0], [51.2, 5493.0], [51.3, 5494.0], [51.4, 5495.0], [51.5, 5495.0], [51.6, 5495.0], [51.7, 5498.0], [51.8, 5499.0], [51.9, 5499.0], [52.0, 5500.0], [52.1, 5501.0], [52.2, 5501.0], [52.3, 5507.0], [52.4, 5508.0], [52.5, 5508.0], [52.6, 5509.0], [52.7, 5510.0], [52.8, 5511.0], [52.9, 5511.0], [53.0, 5511.0], [53.1, 5514.0], [53.2, 5516.0], [53.3, 5516.0], [53.4, 5516.0], [53.5, 5517.0], [53.6, 5517.0], [53.7, 5523.0], [53.8, 5524.0], [53.9, 5526.0], [54.0, 5527.0], [54.1, 5527.0], [54.2, 5529.0], [54.3, 5529.0], [54.4, 5530.0], [54.5, 5535.0], [54.6, 5538.0], [54.7, 5538.0], [54.8, 5539.0], [54.9, 5539.0], [55.0, 5539.0], [55.1, 5539.0], [55.2, 5540.0], [55.3, 5541.0], [55.4, 5543.0], [55.5, 5544.0], [55.6, 5545.0], [55.7, 5546.0], [55.8, 5546.0], [55.9, 5547.0], [56.0, 5554.0], [56.1, 5554.0], [56.2, 5556.0], [56.3, 5557.0], [56.4, 5560.0], [56.5, 5560.0], [56.6, 5560.0], [56.7, 5561.0], [56.8, 5561.0], [56.9, 5561.0], [57.0, 5569.0], [57.1, 5570.0], [57.2, 5570.0], [57.3, 5570.0], [57.4, 5571.0], [57.5, 5572.0], [57.6, 5574.0], [57.7, 5574.0], [57.8, 5575.0], [57.9, 5575.0], [58.0, 5575.0], [58.1, 5576.0], [58.2, 5578.0], [58.3, 5584.0], [58.4, 5587.0], [58.5, 5588.0], [58.6, 5588.0], [58.7, 5589.0], [58.8, 5589.0], [58.9, 5592.0], [59.0, 5593.0], [59.1, 5598.0], [59.2, 5599.0], [59.3, 5599.0], [59.4, 5600.0], [59.5, 5601.0], [59.6, 5604.0], [59.7, 5605.0], [59.8, 5606.0], [59.9, 5606.0], [60.0, 5607.0], [60.1, 5607.0], [60.2, 5607.0], [60.3, 5608.0], [60.4, 5610.0], [60.5, 5613.0], [60.6, 5614.0], [60.7, 5615.0], [60.8, 5615.0], [60.9, 5616.0], [61.0, 5617.0], [61.1, 5618.0], [61.2, 5620.0], [61.3, 5620.0], [61.4, 5620.0], [61.5, 5620.0], [61.6, 5622.0], [61.7, 5622.0], [61.8, 5623.0], [61.9, 5633.0], [62.0, 5633.0], [62.1, 5633.0], [62.2, 5633.0], [62.3, 5636.0], [62.4, 5636.0], [62.5, 5637.0], [62.6, 5638.0], [62.7, 5643.0], [62.8, 5644.0], [62.9, 5644.0], [63.0, 5646.0], [63.1, 5648.0], [63.2, 5648.0], [63.3, 5649.0], [63.4, 5649.0], [63.5, 5650.0], [63.6, 5650.0], [63.7, 5651.0], [63.8, 5653.0], [63.9, 5653.0], [64.0, 5657.0], [64.1, 5659.0], [64.2, 5660.0], [64.3, 5660.0], [64.4, 5666.0], [64.5, 5666.0], [64.6, 5668.0], [64.7, 5668.0], [64.8, 5669.0], [64.9, 5669.0], [65.0, 5669.0], [65.1, 5670.0], [65.2, 5671.0], [65.3, 5676.0], [65.4, 5676.0], [65.5, 5677.0], [65.6, 5678.0], [65.7, 5679.0], [65.8, 5679.0], [65.9, 5681.0], [66.0, 5681.0], [66.1, 5682.0], [66.2, 5683.0], [66.3, 5684.0], [66.4, 5685.0], [66.5, 5685.0], [66.6, 5688.0], [66.7, 5693.0], [66.8, 5693.0], [66.9, 5694.0], [67.0, 5699.0], [67.1, 5699.0], [67.2, 5699.0], [67.3, 5700.0], [67.4, 5704.0], [67.5, 5704.0], [67.6, 5706.0], [67.7, 5707.0], [67.8, 5709.0], [67.9, 5709.0], [68.0, 5710.0], [68.1, 5710.0], [68.2, 5712.0], [68.3, 5714.0], [68.4, 5714.0], [68.5, 5716.0], [68.6, 5716.0], [68.7, 5716.0], [68.8, 5720.0], [68.9, 5722.0], [69.0, 5724.0], [69.1, 5725.0], [69.2, 5727.0], [69.3, 5727.0], [69.4, 5729.0], [69.5, 5729.0], [69.6, 5732.0], [69.7, 5736.0], [69.8, 5736.0], [69.9, 5736.0], [70.0, 5736.0], [70.1, 5736.0], [70.2, 5740.0], [70.3, 5742.0], [70.4, 5742.0], [70.5, 5744.0], [70.6, 5744.0], [70.7, 5745.0], [70.8, 5745.0], [70.9, 5746.0], [71.0, 5746.0], [71.1, 5748.0], [71.2, 5752.0], [71.3, 5754.0], [71.4, 5755.0], [71.5, 5755.0], [71.6, 5756.0], [71.7, 5756.0], [71.8, 5757.0], [71.9, 5759.0], [72.0, 5760.0], [72.1, 5761.0], [72.2, 5761.0], [72.3, 5764.0], [72.4, 5764.0], [72.5, 5766.0], [72.6, 5769.0], [72.7, 5774.0], [72.8, 5777.0], [72.9, 5777.0], [73.0, 5779.0], [73.1, 5780.0], [73.2, 5783.0], [73.3, 5784.0], [73.4, 5785.0], [73.5, 5785.0], [73.6, 5785.0], [73.7, 5787.0], [73.8, 5787.0], [73.9, 5788.0], [74.0, 5789.0], [74.1, 5789.0], [74.2, 5790.0], [74.3, 5790.0], [74.4, 5791.0], [74.5, 5792.0], [74.6, 5792.0], [74.7, 5793.0], [74.8, 5794.0], [74.9, 5802.0], [75.0, 5802.0], [75.1, 5803.0], [75.2, 5803.0], [75.3, 5804.0], [75.4, 5804.0], [75.5, 5807.0], [75.6, 5809.0], [75.7, 5810.0], [75.8, 5810.0], [75.9, 5811.0], [76.0, 5813.0], [76.1, 5814.0], [76.2, 5815.0], [76.3, 5816.0], [76.4, 5818.0], [76.5, 5818.0], [76.6, 5820.0], [76.7, 5820.0], [76.8, 5821.0], [76.9, 5821.0], [77.0, 5827.0], [77.1, 5832.0], [77.2, 5832.0], [77.3, 5834.0], [77.4, 5835.0], [77.5, 5836.0], [77.6, 5836.0], [77.7, 5837.0], [77.8, 5839.0], [77.9, 5839.0], [78.0, 5840.0], [78.1, 5840.0], [78.2, 5842.0], [78.3, 5843.0], [78.4, 5846.0], [78.5, 5851.0], [78.6, 5851.0], [78.7, 5851.0], [78.8, 5851.0], [78.9, 5855.0], [79.0, 5856.0], [79.1, 5858.0], [79.2, 5861.0], [79.3, 5861.0], [79.4, 5861.0], [79.5, 5864.0], [79.6, 5865.0], [79.7, 5865.0], [79.8, 5865.0], [79.9, 5866.0], [80.0, 5866.0], [80.1, 5866.0], [80.2, 5867.0], [80.3, 5867.0], [80.4, 5869.0], [80.5, 5877.0], [80.6, 5877.0], [80.7, 5878.0], [80.8, 5878.0], [80.9, 5882.0], [81.0, 5883.0], [81.1, 5884.0], [81.2, 5884.0], [81.3, 5886.0], [81.4, 5889.0], [81.5, 5889.0], [81.6, 5890.0], [81.7, 5891.0], [81.8, 5892.0], [81.9, 5894.0], [82.0, 5897.0], [82.1, 5898.0], [82.2, 5898.0], [82.3, 5900.0], [82.4, 5902.0], [82.5, 5902.0], [82.6, 5904.0], [82.7, 5904.0], [82.8, 5908.0], [82.9, 5908.0], [83.0, 5909.0], [83.1, 5909.0], [83.2, 5912.0], [83.3, 5912.0], [83.4, 5913.0], [83.5, 5913.0], [83.6, 5913.0], [83.7, 5914.0], [83.8, 5914.0], [83.9, 5915.0], [84.0, 5924.0], [84.1, 5925.0], [84.2, 5928.0], [84.3, 5928.0], [84.4, 5928.0], [84.5, 5929.0], [84.6, 5929.0], [84.7, 5930.0], [84.8, 5930.0], [84.9, 5933.0], [85.0, 5933.0], [85.1, 5936.0], [85.2, 5938.0], [85.3, 5939.0], [85.4, 5946.0], [85.5, 5949.0], [85.6, 5951.0], [85.7, 5952.0], [85.8, 5952.0], [85.9, 5952.0], [86.0, 5956.0], [86.1, 5956.0], [86.2, 5956.0], [86.3, 5958.0], [86.4, 5958.0], [86.5, 5958.0], [86.6, 5959.0], [86.7, 5960.0], [86.8, 5960.0], [86.9, 5961.0], [87.0, 5966.0], [87.1, 5969.0], [87.2, 5969.0], [87.3, 5970.0], [87.4, 5973.0], [87.5, 5976.0], [87.6, 5977.0], [87.7, 5979.0], [87.8, 5982.0], [87.9, 5982.0], [88.0, 5983.0], [88.1, 5984.0], [88.2, 5984.0], [88.3, 5985.0], [88.4, 5985.0], [88.5, 5990.0], [88.6, 5990.0], [88.7, 5990.0], [88.8, 5990.0], [88.9, 5991.0], [89.0, 5991.0], [89.1, 5992.0], [89.2, 5995.0], [89.3, 5995.0], [89.4, 5996.0], [89.5, 5997.0], [89.6, 6001.0], [89.7, 6005.0], [89.8, 6005.0], [89.9, 6008.0], [90.0, 6008.0], [90.1, 6008.0], [90.2, 6009.0], [90.3, 6020.0], [90.4, 6116.0], [90.5, 6151.0], [90.6, 6274.0], [90.7, 6391.0], [90.8, 6391.0], [90.9, 6502.0], [91.0, 6627.0], [91.1, 6749.0], [91.2, 6866.0], [91.3, 6987.0], [91.4, 7104.0], [91.5, 7104.0], [91.6, 7207.0], [91.7, 7341.0], [91.8, 7464.0], [91.9, 7589.0], [92.0, 7794.0], [92.1, 7908.0], [92.2, 7908.0], [92.3, 7952.0], [92.4, 7995.0], [92.5, 8035.0], [92.6, 8043.0], [92.7, 8320.0], [92.8, 8354.0], [92.9, 8354.0], [93.0, 8415.0], [93.1, 8458.0], [93.2, 8504.0], [93.3, 8526.0], [93.4, 8546.0], [93.5, 8588.0], [93.6, 8588.0], [93.7, 8640.0], [93.8, 8687.0], [93.9, 8721.0], [94.0, 8732.0], [94.1, 8817.0], [94.2, 8881.0], [94.3, 8881.0], [94.4, 8911.0], [94.5, 8955.0], [94.6, 9000.0], [94.7, 9032.0], [94.8, 9074.0], [94.9, 9105.0], [95.0, 9105.0], [95.1, 9148.0], [95.2, 9194.0], [95.3, 9221.0], [95.4, 9256.0], [95.5, 9326.0], [95.6, 9356.0], [95.7, 9402.0], [95.8, 9402.0], [95.9, 9445.0], [96.0, 9479.0], [96.1, 9516.0], [96.2, 9563.0], [96.3, 9588.0], [96.4, 9634.0], [96.5, 9634.0], [96.6, 9679.0], [96.7, 9722.0], [96.8, 9755.0], [96.9, 9821.0], [97.0, 9867.0], [97.1, 9899.0], [97.2, 9899.0], [97.3, 9942.0], [97.4, 10003.0], [97.5, 10024.0], [97.6, 10074.0], [97.7, 10107.0], [97.8, 10151.0], [97.9, 10151.0], [98.0, 10187.0], [98.1, 10229.0], [98.2, 10277.0], [98.3, 10352.0], [98.4, 10403.0], [98.5, 10451.0], [98.6, 10451.0], [98.7, 10494.0], [98.8, 10520.0], [98.9, 10570.0], [99.0, 10610.0], [99.1, 10641.0], [99.2, 10685.0], [99.3, 10685.0], [99.4, 10724.0], [99.5, 10757.0], [99.6, 10886.0], [99.7, 10932.0], [99.8, 10978.0], [99.9, 11013.0], [100.0, 11013.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 68.0, "series": [{"data": [[100.0, 28.0], [200.0, 1.0], [400.0, 1.0], [700.0, 1.0], [800.0, 1.0], [900.0, 1.0], [1200.0, 1.0], [1400.0, 1.0], [1700.0, 1.0], [1900.0, 1.0], [5100.0, 65.0], [5000.0, 43.0], [5200.0, 65.0], [5300.0, 64.0], [5600.0, 67.0], [5500.0, 61.0], [5400.0, 66.0], [5700.0, 65.0], [5800.0, 62.0], [6000.0, 7.0], [5900.0, 62.0], [7100.0, 1.0], [7900.0, 2.0], [8000.0, 1.0], [8700.0, 2.0], [8600.0, 2.0], [8500.0, 3.0], [8400.0, 2.0], [8300.0, 2.0], [9200.0, 2.0], [9100.0, 3.0], [8800.0, 2.0], [9000.0, 2.0], [8900.0, 3.0], [9500.0, 4.0], [9600.0, 3.0], [9700.0, 2.0], [9400.0, 2.0], [9300.0, 3.0], [10200.0, 5.0], [10100.0, 4.0], [10000.0, 2.0], [9800.0, 3.0], [9900.0, 2.0], [10600.0, 4.0], [10500.0, 3.0], [10300.0, 3.0], [10400.0, 4.0], [10700.0, 1.0], [10800.0, 3.0], [11100.0, 1.0], [11000.0, 3.0], [10900.0, 4.0], [11300.0, 2.0], [11400.0, 1.0], [11700.0, 2.0], [11600.0, 2.0], [11500.0, 1.0], [12100.0, 4.0], [12200.0, 7.0], [11800.0, 1.0], [12700.0, 2.0], [12600.0, 1.0], [12400.0, 3.0], [12300.0, 2.0], [13100.0, 4.0], [12800.0, 1.0], [13000.0, 5.0], [13200.0, 1.0], [13700.0, 2.0], [13400.0, 1.0], [13500.0, 1.0], [13800.0, 4.0], [13900.0, 5.0], [14100.0, 2.0], [14300.0, 1.0], [14000.0, 1.0], [14400.0, 2.0], [14600.0, 4.0], [14800.0, 1.0], [14700.0, 5.0], [14500.0, 1.0], [15200.0, 2.0], [15300.0, 1.0], [14900.0, 2.0], [15000.0, 1.0], [15800.0, 1.0], [15600.0, 3.0], [15500.0, 1.0], [15700.0, 1.0], [15400.0, 2.0], [16000.0, 1.0], [16100.0, 1.0], [15900.0, 1.0], [16200.0, 2.0], [16300.0, 3.0], [17200.0, 3.0], [16600.0, 2.0], [16500.0, 1.0], [16900.0, 2.0], [17400.0, 1.0], [17300.0, 1.0], [16400.0, 2.0], [16700.0, 1.0], [17000.0, 1.0], [17100.0, 1.0], [16800.0, 1.0], [17600.0, 2.0], [17900.0, 1.0], [17800.0, 1.0], [17500.0, 1.0], [17700.0, 1.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[100.0, 28.0], [200.0, 37.0], [300.0, 5.0], [400.0, 3.0], [500.0, 3.0], [600.0, 4.0], [700.0, 2.0], [800.0, 3.0], [900.0, 2.0], [1000.0, 4.0], [1100.0, 1.0], [1200.0, 4.0], [1300.0, 1.0], [1400.0, 3.0], [1600.0, 3.0], [1700.0, 2.0], [1900.0, 3.0], [2000.0, 1.0], [2100.0, 1.0], [2200.0, 1.0], [2300.0, 1.0], [2400.0, 2.0], [2500.0, 1.0], [2600.0, 1.0], [2700.0, 1.0], [2800.0, 1.0], [2900.0, 1.0], [3000.0, 1.0], [3100.0, 2.0], [3200.0, 1.0], [3300.0, 1.0], [3400.0, 1.0], [3500.0, 1.0], [3600.0, 1.0], [3700.0, 1.0], [3800.0, 2.0], [3900.0, 1.0], [4000.0, 1.0], [4100.0, 1.0], [4200.0, 1.0], [4300.0, 1.0], [4400.0, 1.0], [4500.0, 1.0], [4600.0, 1.0], [4700.0, 1.0], [4800.0, 1.0], [4900.0, 1.0], [5000.0, 43.0], [5100.0, 66.0], [5200.0, 65.0], [5300.0, 66.0], [5400.0, 66.0], [5500.0, 63.0], [5600.0, 68.0], [5700.0, 66.0], [5800.0, 63.0], [5900.0, 63.0], [6100.0, 2.0], [6000.0, 7.0], [6200.0, 1.0], [6300.0, 1.0], [6500.0, 1.0], [6600.0, 1.0], [6700.0, 1.0], [6800.0, 1.0], [6900.0, 1.0], [7100.0, 1.0], [7200.0, 1.0], [7300.0, 1.0], [7400.0, 1.0], [7500.0, 1.0], [7700.0, 1.0], [7900.0, 3.0], [8000.0, 2.0], [8500.0, 4.0], [8700.0, 2.0], [8600.0, 2.0], [8400.0, 2.0], [8300.0, 2.0], [9200.0, 2.0], [8800.0, 2.0], [9100.0, 3.0], [9000.0, 3.0], [8900.0, 2.0], [9700.0, 2.0], [9600.0, 2.0], [9500.0, 3.0], [9400.0, 3.0], [9300.0, 2.0], [9900.0, 1.0], [10100.0, 3.0], [9800.0, 3.0], [10200.0, 2.0], [10000.0, 3.0], [10700.0, 2.0], [10600.0, 3.0], [10500.0, 2.0], [10300.0, 1.0], [10400.0, 3.0], [10900.0, 2.0], [10800.0, 1.0], [11000.0, 1.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 17900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 32.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1510.0, "series": [{"data": [[0.0, 103.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 32.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 75.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1510.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.380952380952381, "minX": 1.6540157445E12, "maxY": 2.0, "series": [{"data": [[1.6540157595E12, 2.0], [1.654015779E12, 1.7751937984496127], [1.6540157565E12, 1.8666666666666665], [1.6540157625E12, 1.8181818181818181], [1.654015782E12, 1.7901234567901236], [1.65401577E12, 1.5208333333333328], [1.6540157475E12, 1.5], [1.654015767E12, 1.4473684210526319], [1.6540157445E12, 2.0], [1.654015776E12, 1.5657894736842102], [1.6540157535E12, 2.0], [1.654015773E12, 1.5606060606060606], [1.6540157505E12, 1.833333333333333], [1.6540157805E12, 1.5345911949685536], [1.654015758E12, 2.0], [1.6540157775E12, 1.5855855855855854], [1.654015755E12, 2.0], [1.654015764E12, 2.0], [1.6540157835E12, 1.5454545454545454], [1.654015761E12, 2.0], [1.654015749E12, 1.5], [1.6540157685E12, 1.380952380952381], [1.654015746E12, 1.4761904761904763], [1.6540157655E12, 2.0], [1.6540157745E12, 1.5625000000000002], [1.654015752E12, 2.0], [1.6540157715E12, 1.624277456647399]], "isOverall": false, "label": "parallel bzm - Parallel", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6540157835E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 115.58333333333333, "minX": 1.0, "maxY": 17636.0, "series": [{"data": [[2.0, 123.0], [3.0, 5409.0], [4.0, 2673.6666666666665], [5.0, 975.0], [6.0, 5516.0], [7.0, 5523.0], [8.0, 2072.0], [10.0, 5561.0], [11.0, 3241.0], [12.0, 5622.0], [14.0, 5668.0], [16.0, 5714.0], [18.0, 5768.5], [20.0, 5674.0], [23.0, 5867.25], [25.0, 5883.0], [26.0, 5920.0], [31.0, 5112.5], [33.0, 5104.0], [32.0, 5179.5], [35.0, 5176.0], [34.0, 5192.0], [37.0, 5268.0], [39.0, 5298.0], [38.0, 5324.333333333333], [40.0, 5358.0], [43.0, 5241.5], [42.0, 5420.0], [46.0, 5464.0], [49.0, 5539.0], [51.0, 5629.5], [50.0, 5570.0], [54.0, 5674.0], [57.0, 5720.0], [56.0, 5372.5], [59.0, 5780.0], [58.0, 5764.0], [63.0, 5864.333333333333], [62.0, 5930.0], [66.0, 5883.666666666667], [64.0, 5990.0], [71.0, 5619.5], [70.0, 5542.0], [68.0, 5668.0], [85.0, 6021.0], [86.0, 5588.0], [96.0, 5555.0], [107.0, 5576.259259259258], [106.0, 5581.333333333334], [105.0, 5107.0], [111.0, 5457.0], [109.0, 5496.0], [115.0, 5169.666666666667], [118.0, 5080.0], [117.0, 5174.0], [121.0, 5238.75], [127.0, 5364.0], [126.0, 5271.5], [125.0, 5281.0], [134.0, 5916.0], [130.0, 5800.0], [131.0, 5674.5], [128.0, 5748.0], [143.0, 5833.666666666667], [142.0, 5490.0], [140.0, 5695.0], [137.0, 5526.0], [136.0, 5699.0], [149.0, 5116.0], [146.0, 5838.0], [144.0, 5854.0], [157.0, 5260.5], [156.0, 5207.0], [153.0, 5140.666666666667], [152.0, 5191.5], [167.0, 5578.0], [165.0, 5422.0], [164.0, 5454.0], [163.0, 5030.0], [162.0, 5354.666666666667], [161.0, 5252.0], [160.0, 5410.0], [175.0, 5623.0], [173.0, 5606.0], [171.0, 5607.666666666667], [169.0, 5507.0], [183.0, 5949.0], [182.0, 5902.0], [180.0, 5840.0], [179.0, 5737.0], [177.0, 5795.0], [176.0, 5673.333333333333], [191.0, 13066.0], [188.0, 10406.0], [190.0, 6429.166666666667], [186.0, 5930.0], [185.0, 5940.0], [184.0, 5822.0], [199.0, 9183.0], [198.0, 5210.25], [196.0, 5190.25], [195.0, 5207.0], [192.0, 7736.0], [193.0, 10080.666666666666], [207.0, 6992.75], [205.0, 5256.333333333333], [204.0, 6854.0], [206.0, 6628.833333333333], [203.0, 6812.857142857143], [200.0, 7553.75], [202.0, 5190.833333333334], [201.0, 5237.2], [210.0, 6582.0], [209.0, 5261.9], [215.0, 5460.444444444444], [213.0, 5736.928571428571], [212.0, 6176.714285714286], [211.0, 5303.4], [208.0, 5355.909090909091], [214.0, 5481.0], [222.0, 5692.375], [223.0, 6315.800000000002], [220.0, 5665.375], [218.0, 7045.714285714285], [216.0, 5612.8], [217.0, 5457.875], [221.0, 5679.285714285715], [219.0, 5470.5], [227.0, 7846.6923076923085], [229.0, 5639.6], [226.0, 6165.916666666666], [224.0, 5764.8], [230.0, 8149.300000000001], [231.0, 8352.333333333332], [225.0, 5808.352941176469], [228.0, 5673.916666666667], [239.0, 7585.461538461538], [238.0, 6948.285714285715], [236.0, 9032.0], [234.0, 7939.0], [232.0, 8448.5], [237.0, 6673.5], [235.0, 7367.8], [233.0, 5752.0], [246.0, 5227.0], [245.0, 5326.0], [244.0, 12546.25], [243.0, 5362.333333333333], [247.0, 5250.0], [242.0, 13209.0], [240.0, 7182.166666666667], [255.0, 8980.0], [254.0, 6633.899999999999], [252.0, 8199.5], [249.0, 11447.666666666666], [248.0, 6801.166666666667], [253.0, 10515.333333333334], [251.0, 7527.5], [250.0, 9934.499999999998], [270.0, 5753.25], [269.0, 5767.5], [271.0, 7881.666666666667], [268.0, 5613.5], [265.0, 6564.0], [264.0, 9515.0], [267.0, 9613.5], [263.0, 6448.5], [262.0, 6979.0], [261.0, 10657.0], [259.0, 8631.0], [256.0, 5376.5], [257.0, 5845.0], [286.0, 12580.0], [287.0, 17538.0], [284.0, 12254.0], [283.0, 13491.0], [282.0, 8496.0], [280.0, 5838.0], [278.0, 17636.0], [276.0, 11584.0], [274.0, 7968.25], [273.0, 9701.0], [301.0, 14779.0], [303.0, 15561.0], [300.0, 16244.0], [288.0, 16881.0], [298.0, 12194.5], [297.0, 12298.0], [296.0, 16376.0], [295.0, 16206.0], [294.0, 16101.0], [293.0, 9975.0], [318.0, 10840.0], [317.0, 12682.5], [316.0, 17452.0], [315.0, 10842.333333333332], [313.0, 10210.0], [312.0, 12894.2], [319.0, 11488.5], [311.0, 7670.5], [308.0, 5145.0], [309.0, 12725.0], [307.0, 8361.0], [306.0, 13226.5], [305.0, 15217.0], [332.0, 5517.333333333333], [330.0, 11377.75], [328.0, 10542.666666666666], [327.0, 13619.0], [321.0, 15623.333333333334], [320.0, 14173.0], [335.0, 12021.0], [334.0, 12935.0], [333.0, 11339.0], [329.0, 6441.0], [326.0, 5027.0], [325.0, 7206.0], [324.0, 15390.0], [322.0, 9230.0], [323.0, 12668.0], [340.0, 7435.333333333333], [350.0, 5752.0], [348.0, 11816.0], [346.0, 13472.0], [345.0, 9055.0], [343.0, 8490.5], [338.0, 10695.0], [336.0, 8549.5], [356.0, 10387.0], [355.0, 6701.333333333333], [353.0, 12278.0], [352.0, 10734.0], [1.0, 115.58333333333333]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[203.44534883720922, 6874.322093023254]], "isOverall": false, "label": "/api/statistics/neighbourhoods-Aggregated", "isController": false}, {"data": [[2.0, 162.70833333333337], [3.0, 5432.0], [4.0, 2861.5], [5.0, 279.0], [6.0, 1741.6], [7.0, 624.6666666666666], [8.0, 2451.4], [9.0, 3795.3333333333335], [10.0, 2951.0], [11.0, 2048.666666666667], [12.0, 3759.0], [13.0, 2979.5], [14.0, 280.0], [15.0, 283.0], [16.0, 3889.0], [17.0, 286.0], [18.0, 4390.75], [19.0, 3036.5], [20.0, 274.0], [21.0, 273.0], [22.0, 259.0], [23.0, 264.0], [24.0, 265.0], [25.0, 3109.0], [26.0, 5102.428571428572], [27.0, 264.0], [28.0, 3570.0], [29.0, 267.0], [30.0, 269.0], [31.0, 2679.5], [32.0, 2691.0], [33.0, 1922.3333333333333], [35.0, 2823.5], [34.0, 5138.333333333333], [36.0, 1931.3333333333333], [37.0, 5268.0], [38.0, 2786.0], [41.0, 364.0], [40.0, 5358.5], [43.0, 2904.75], [44.0, 2919.0], [46.0, 3828.3333333333335], [47.0, 408.0], [48.0, 3031.0], [49.0, 5524.0], [51.0, 4176.5], [50.0, 5570.0], [52.0, 3092.5], [55.0, 637.0], [54.0, 5736.0], [56.0, 4023.6666666666665], [57.0, 5811.0], [58.0, 703.0], [59.0, 4087.6666666666665], [60.0, 5855.0], [62.0, 822.0], [63.0, 4400.25], [64.0, 862.0], [67.0, 3315.0], [66.0, 5940.75], [68.0, 980.0], [71.0, 3329.0], [70.0, 5620.0], [72.0, 1091.0], [74.0, 1141.0], [76.0, 1225.0], [78.0, 1249.0], [79.0, 1277.0], [82.0, 1398.0], [83.0, 1420.0], [85.0, 1438.0], [86.0, 1478.0], [91.0, 1691.0], [92.0, 1647.0], [94.0, 1692.0], [97.0, 1775.0], [98.0, 1796.0], [102.0, 1911.0], [103.0, 1932.0], [105.0, 4550.5], [107.0, 5439.2962962962965], [106.0, 5407.000000000001], [111.0, 4336.333333333333], [114.0, 2257.0], [115.0, 5081.0], [117.0, 2357.0], [121.0, 4624.2], [122.0, 4223.5], [123.0, 5374.0], [120.0, 5111.0], [126.0, 3929.5], [127.0, 5529.0], [125.0, 5270.0], [129.0, 2690.0], [132.0, 2793.0], [135.0, 5628.0], [134.0, 5670.0], [133.0, 5495.0], [131.0, 5302.666666666667], [130.0, 5402.0], [136.0, 2897.0], [137.0, 4382.0], [141.0, 3017.0], [143.0, 5865.0], [142.0, 5611.5], [140.0, 5583.0], [145.0, 4550.5], [147.0, 4129.0], [151.0, 3274.0], [150.0, 5179.0], [149.0, 5067.0], [146.0, 5824.6], [144.0, 5824.5], [155.0, 3398.0], [157.0, 4363.0], [159.0, 5330.0], [156.0, 5332.5], [154.0, 5183.5], [152.0, 5138.0], [161.0, 4741.0], [165.0, 4819.5], [167.0, 4602.0], [164.0, 5423.0], [163.0, 5408.0], [162.0, 5376.0], [160.0, 5252.0], [171.0, 4683.0], [173.0, 4764.0], [175.0, 5611.333333333333], [169.0, 5506.0], [177.0, 4895.333333333333], [181.0, 4081.0], [183.0, 5037.0], [182.0, 5860.333333333333], [179.0, 5753.0], [176.0, 5622.0], [187.0, 4265.0], [191.0, 6660.333333333333], [188.0, 5425.0], [186.0, 5597.8], [190.0, 5526.0], [185.0, 5900.0], [184.0, 5790.0], [193.0, 6298.2], [198.0, 5117.0], [196.0, 6188.6], [195.0, 5222.333333333333], [199.0, 5213.0], [194.0, 5240.0], [197.0, 5407.0], [202.0, 5911.571428571428], [206.0, 5224.916666666667], [207.0, 5348.333333333333], [203.0, 6190.4], [205.0, 5749.8], [204.0, 6195.666666666667], [201.0, 5122.0], [200.0, 5155.0], [208.0, 5286.875], [212.0, 5401.636363636363], [211.0, 5368.0], [210.0, 5830.777777777778], [215.0, 5484.25], [213.0, 5931.0], [209.0, 5901.333333333333], [214.0, 5323.5], [217.0, 5475.222222222223], [219.0, 5471.75], [223.0, 6025.409090909092], [222.0, 6072.153846153846], [220.0, 5675.444444444445], [216.0, 6225.125], [221.0, 5631.333333333333], [218.0, 5543.125], [224.0, 5868.384615384615], [226.0, 5587.75], [231.0, 5599.5], [229.0, 5939.6], [227.0, 6303.571428571428], [230.0, 5692.6], [225.0, 5379.136363636363], [228.0, 5577.599999999999], [236.0, 6247.428571428572], [237.0, 5887.0], [232.0, 5772.8], [238.0, 5739.874999999999], [233.0, 6556.0], [239.0, 7534.666666666666], [234.0, 5878.5], [235.0, 5805.25], [240.0, 6119.111111111111], [245.0, 6829.666666666667], [246.0, 5211.0], [243.0, 5416.0], [241.0, 6326.75], [244.0, 5147.0], [242.0, 9899.0], [250.0, 6836.299999999999], [255.0, 7438.5], [254.0, 6591.571428571428], [252.0, 7087.333333333333], [249.0, 8137.666666666667], [251.0, 5444.0], [248.0, 5403.666666666667], [253.0, 5809.5], [259.0, 6689.0], [257.0, 6866.333333333333], [256.0, 5347.5], [263.0, 7271.0], [261.0, 5710.5], [262.0, 5258.0], [264.0, 6081.5], [268.0, 7748.0], [271.0, 7064.666666666667], [270.0, 7659.25], [269.0, 5656.5], [266.0, 5597.0], [265.0, 6723.666666666667], [287.0, 6866.0], [273.0, 6208.0], [278.0, 7910.5], [283.0, 6749.0], [282.0, 5890.0], [280.0, 5838.0], [279.0, 8817.0], [275.0, 5785.0], [274.0, 7404.571428571428], [292.0, 6987.0], [297.0, 7104.0], [302.0, 7780.5], [303.0, 5115.0], [319.0, 7589.0], [308.0, 7878.0], [313.0, 7464.0], [317.0, 5298.5], [315.0, 5253.0], [312.0, 5176.0], [311.0, 5136.5], [310.0, 8320.0], [306.0, 5146.0], [332.0, 6278.333333333333], [327.0, 6591.5], [333.0, 6930.0], [330.0, 5087.5], [331.0, 9256.0], [329.0, 6692.5], [335.0, 5533.5], [334.0, 7035.666666666667], [326.0, 6993.0], [322.0, 5360.0], [321.0, 8458.0], [338.0, 8035.0], [340.0, 6199.166666666667], [346.0, 8526.0], [350.0, 5704.0], [343.0, 5300.0], [341.0, 5717.5], [337.0, 8588.0], [354.0, 8704.0], [356.0, 5794.0], [353.0, 8732.0], [355.0, 7155.5], [1.0, 189.8]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}, {"data": [[179.29883720930223, 5152.543023255815]], "isOverall": false, "label": "/api/listings?geojson=true-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 356.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 192.0, "minX": 1.6540157445E12, "maxY": 7503756.0, "series": [{"data": [[1.6540157595E12, 4585628.666666667], [1.654015779E12, 398076.0], [1.6540157565E12, 5420295.333333333], [1.6540157625E12, 3752794.0], [1.654015782E12, 249932.66666666666], [1.65401577E12, 296302.0], [1.6540157475E12, 4590666.666666667], [1.654015767E12, 1179325.3333333333], [1.6540157445E12, 833750.6666666666], [1.654015776E12, 234447.33333333334], [1.6540157535E12, 6253130.0], [1.654015773E12, 203616.0], [1.6540157505E12, 6670921.333333333], [1.6540157805E12, 490675.3333333333], [1.654015758E12, 4168753.3333333335], [1.6540157775E12, 342416.0], [1.654015755E12, 5419379.333333333], [1.654015764E12, 3751878.0], [1.6540157835E12, 407133.3333333333], [1.654015761E12, 4168753.3333333335], [1.654015749E12, 5008000.0], [1.6540157685E12, 712444.0], [1.654015746E12, 3757374.0], [1.6540157655E12, 3751878.0], [1.6540157745E12, 444229.3333333333], [1.654015752E12, 7503756.0], [1.6540157715E12, 533917.3333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6540157595E12, 1056.0], [1.654015779E12, 12554.666666666666], [1.6540157565E12, 1445.3333333333333], [1.6540157625E12, 1061.3333333333333], [1.654015782E12, 7882.666666666667], [1.65401577E12, 9362.666666666666], [1.6540157475E12, 2141.3333333333335], [1.654015767E12, 11130.666666666666], [1.6540157445E12, 192.0], [1.654015776E12, 7397.333333333333], [1.6540157535E12, 1440.0], [1.654015773E12, 6424.0], [1.6540157505E12, 1733.3333333333333], [1.6540157805E12, 15477.333333333334], [1.654015758E12, 960.0], [1.6540157775E12, 10805.333333333334], [1.654015755E12, 1248.0], [1.654015764E12, 864.0], [1.6540157835E12, 12848.0], [1.654015761E12, 960.0], [1.654015749E12, 2336.0], [1.6540157685E12, 22578.666666666668], [1.654015746E12, 2048.0], [1.6540157655E12, 864.0], [1.6540157745E12, 14016.0], [1.654015752E12, 1728.0], [1.6540157715E12, 16858.666666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6540157835E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 116.49999999999999, "minX": 1.6540157445E12, "maxY": 12199.5, "series": [{"data": [[1.6540157805E12, 5512.987499999998], [1.654015779E12, 5473.765624999999], [1.6540157565E12, 6561.5], [1.6540157775E12, 5568.714285714285], [1.6540157625E12, 12199.5], [1.6540157835E12, 5572.363636363636], [1.654015782E12, 5518.775000000001], [1.654015749E12, 116.49999999999999], [1.65401577E12, 8470.836363636361], [1.6540157475E12, 118.0], [1.6540157685E12, 10437.026490066224], [1.654015746E12, 767.1666666666667], [1.654015767E12, 8613.842857142856], [1.654015776E12, 5507.026315789472], [1.6540157745E12, 5528.069444444445], [1.654015773E12, 5505.393939393938], [1.6540157505E12, 504.5], [1.6540157715E12, 7829.010638297875]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.6540157595E12, 3457.7272727272725], [1.654015779E12, 5479.969230769232], [1.6540157565E12, 1707.0000000000002], [1.6540157625E12, 5345.444444444444], [1.654015782E12, 5531.780487804878], [1.65401577E12, 6840.463414634146], [1.6540157475E12, 168.81818181818178], [1.654015767E12, 6417.477272727272], [1.6540157445E12, 1184.5], [1.654015776E12, 5507.3421052631575], [1.6540157535E12, 401.6666666666667], [1.654015773E12, 5505.787878787878], [1.6540157505E12, 260.6875], [1.6540157805E12, 5518.658227848101], [1.654015758E12, 2555.5], [1.6540157775E12, 5564.563636363636], [1.654015755E12, 995.3846153846155], [1.654015764E12, 6398.333333333333], [1.6540157835E12, 5573.818181818181], [1.654015761E12, 4400.1], [1.654015749E12, 160.33333333333334], [1.6540157685E12, 6650.112499999998], [1.654015746E12, 445.55555555555554], [1.6540157655E12, 7492.111111111111], [1.6540157745E12, 5527.86111111111], [1.654015752E12, 266.27777777777777], [1.6540157715E12, 6499.772151898735]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6540157835E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 116.49999999999999, "minX": 1.6540157445E12, "maxY": 12199.5, "series": [{"data": [[1.6540157805E12, 5512.949999999998], [1.654015779E12, 5473.749999999998], [1.6540157565E12, 6561.5], [1.6540157775E12, 5568.714285714285], [1.6540157625E12, 12199.5], [1.6540157835E12, 5572.363636363636], [1.654015782E12, 5518.725], [1.654015749E12, 116.49999999999999], [1.65401577E12, 8470.818181818182], [1.6540157475E12, 118.0], [1.6540157685E12, 10437.006622516556], [1.654015746E12, 767.1666666666667], [1.654015767E12, 8613.785714285714], [1.654015776E12, 5507.026315789472], [1.6540157745E12, 5528.041666666666], [1.654015773E12, 5505.363636363636], [1.6540157505E12, 504.5], [1.6540157715E12, 7829.000000000003]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.6540157595E12, 3456.6363636363635], [1.654015779E12, 5479.953846153846], [1.6540157565E12, 1705.5384615384614], [1.6540157625E12, 5343.888888888889], [1.654015782E12, 5531.731707317072], [1.65401577E12, 6840.463414634146], [1.6540157475E12, 165.72727272727272], [1.654015767E12, 6417.363636363636], [1.6540157445E12, 1180.5], [1.654015776E12, 5507.289473684211], [1.6540157535E12, 399.73333333333335], [1.654015773E12, 5505.757575757576], [1.6540157505E12, 259.37499999999994], [1.6540157805E12, 5518.620253164557], [1.654015758E12, 2554.3999999999996], [1.6540157775E12, 5564.545454545454], [1.654015755E12, 994.2307692307693], [1.654015764E12, 6397.0], [1.6540157835E12, 5573.818181818181], [1.654015761E12, 4398.9], [1.654015749E12, 159.0], [1.6540157685E12, 6650.099999999998], [1.654015746E12, 443.77777777777777], [1.6540157655E12, 7490.666666666666], [1.6540157745E12, 5527.833333333332], [1.654015752E12, 264.7222222222223], [1.6540157715E12, 6499.746835443038]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6540157835E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 5.999999999999999, "minX": 1.6540157445E12, "maxY": 18.5, "series": [{"data": [[1.6540157805E12, 7.1000000000000005], [1.654015779E12, 7.140625], [1.6540157565E12, 7.0], [1.6540157775E12, 6.946428571428573], [1.6540157625E12, 10.0], [1.6540157835E12, 7.090909090909091], [1.654015782E12, 7.700000000000003], [1.654015749E12, 6.416666666666666], [1.65401577E12, 6.854545454545453], [1.6540157475E12, 6.2727272727272725], [1.6540157685E12, 7.668874172185434], [1.654015746E12, 8.25], [1.654015767E12, 6.957142857142859], [1.654015776E12, 7.68421052631579], [1.6540157745E12, 6.930555555555558], [1.654015773E12, 6.515151515151516], [1.6540157505E12, 6.0], [1.6540157715E12, 8.808510638297873]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.6540157595E12, 7.454545454545455], [1.654015779E12, 7.046153846153847], [1.6540157565E12, 6.461538461538462], [1.6540157625E12, 6.222222222222222], [1.654015782E12, 7.8780487804878065], [1.65401577E12, 6.585365853658538], [1.6540157475E12, 5.999999999999999], [1.654015767E12, 6.90909090909091], [1.6540157445E12, 18.5], [1.654015776E12, 7.605263157894741], [1.6540157535E12, 7.3999999999999995], [1.654015773E12, 6.636363636363638], [1.6540157505E12, 7.250000000000001], [1.6540157805E12, 7.037974683544304], [1.654015758E12, 9.2], [1.6540157775E12, 6.945454545454548], [1.654015755E12, 9.230769230769232], [1.654015764E12, 6.444444444444445], [1.6540157835E12, 7.075757575757574], [1.654015761E12, 7.0], [1.654015749E12, 6.583333333333334], [1.6540157685E12, 7.462500000000002], [1.654015746E12, 6.4444444444444455], [1.6540157655E12, 6.666666666666666], [1.6540157745E12, 6.999999999999998], [1.654015752E12, 8.333333333333336], [1.6540157715E12, 9.113924050632914]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6540157835E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 109.0, "minX": 1.6540157445E12, "maxY": 12246.0, "series": [{"data": [[1.6540157595E12, 3859.0], [1.654015758E12, 2913.0], [1.6540157565E12, 7102.0], [1.654015755E12, 1277.0], [1.654015764E12, 6866.0], [1.6540157625E12, 12246.0], [1.654015761E12, 4814.0], [1.654015749E12, 174.0], [1.6540157475E12, 188.0], [1.654015746E12, 1976.0], [1.654015767E12, 8721.0], [1.6540157445E12, 1277.0], [1.6540157655E12, 8035.0], [1.6540157535E12, 663.0], [1.654015752E12, 290.0], [1.6540157505E12, 890.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6540157595E12, 3851.6], [1.654015758E12, 2911.4], [1.6540157565E12, 6453.400000000001], [1.654015755E12, 1265.8], [1.654015764E12, 6866.0], [1.6540157625E12, 12227.4], [1.654015761E12, 4809.4], [1.654015749E12, 170.5], [1.6540157475E12, 183.1], [1.654015746E12, 1665.8000000000002], [1.654015767E12, 8721.0], [1.6540157445E12, 1277.0], [1.6540157655E12, 8035.0], [1.6540157535E12, 647.4], [1.654015752E12, 286.4], [1.6540157505E12, 350.90000000000083]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6540157595E12, 3859.0], [1.654015758E12, 2913.0], [1.6540157565E12, 7102.0], [1.654015755E12, 1277.0], [1.654015764E12, 6866.0], [1.6540157625E12, 12246.0], [1.654015761E12, 4814.0], [1.654015749E12, 174.0], [1.6540157475E12, 188.0], [1.654015746E12, 1976.0], [1.654015767E12, 8721.0], [1.6540157445E12, 1277.0], [1.6540157655E12, 8035.0], [1.6540157535E12, 663.0], [1.654015752E12, 290.0], [1.6540157505E12, 890.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6540157595E12, 3859.0], [1.654015758E12, 2913.0], [1.6540157565E12, 7102.0], [1.654015755E12, 1277.0], [1.654015764E12, 6866.0], [1.6540157625E12, 12246.0], [1.654015761E12, 4814.0], [1.654015749E12, 173.25], [1.6540157475E12, 187.39999999999998], [1.654015746E12, 1950.0999999999997], [1.654015767E12, 8721.0], [1.6540157445E12, 1277.0], [1.6540157655E12, 8035.0], [1.6540157535E12, 663.0], [1.654015752E12, 290.0], [1.6540157505E12, 890.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6540157595E12, 3017.0], [1.654015758E12, 2159.0], [1.6540157565E12, 1398.0], [1.654015755E12, 703.0], [1.654015764E12, 5909.0], [1.6540157625E12, 4932.0], [1.654015761E12, 3963.0], [1.654015749E12, 109.0], [1.6540157475E12, 111.0], [1.654015746E12, 109.0], [1.654015767E12, 8526.0], [1.6540157445E12, 1092.0], [1.6540157655E12, 6987.0], [1.6540157535E12, 239.0], [1.654015752E12, 245.0], [1.6540157505E12, 119.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6540157595E12, 3442.0], [1.654015758E12, 2514.0], [1.6540157565E12, 1775.0], [1.654015755E12, 980.0], [1.654015764E12, 6391.0], [1.6540157625E12, 5432.0], [1.654015761E12, 4401.0], [1.654015749E12, 138.0], [1.6540157475E12, 141.5], [1.654015746E12, 472.0], [1.654015767E12, 8623.5], [1.6540157445E12, 1184.5], [1.6540157655E12, 7464.0], [1.6540157535E12, 390.0], [1.654015752E12, 265.5], [1.6540157505E12, 277.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654015767E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 139.0, "minX": 2.0, "maxY": 11058.0, "series": [{"data": [[2.0, 1184.5], [16.0, 139.0], [8.0, 3614.5], [17.0, 604.0], [9.0, 1116.0], [10.0, 411.0], [11.0, 254.0], [12.0, 266.0], [6.0, 6564.5], [13.0, 266.5], [7.0, 4591.5], [114.0, 8623.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[134.0, 5762.0], [129.0, 5454.0], [54.0, 5667.5], [66.0, 5496.0], [72.0, 5519.5], [78.0, 5679.0], [76.0, 5501.5], [79.0, 5526.0], [80.0, 5504.0], [81.0, 5539.0], [86.0, 5833.0], [97.0, 11058.0], [105.0, 5560.0], [114.0, 5821.0], [31.0, 5766.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 134.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 138.5, "minX": 2.0, "maxY": 11058.0, "series": [{"data": [[2.0, 1180.5], [16.0, 138.5], [8.0, 3613.5], [17.0, 602.0], [9.0, 1115.0], [10.0, 409.5], [11.0, 251.0], [12.0, 264.5], [6.0, 6562.5], [13.0, 264.5], [7.0, 4589.5], [114.0, 8622.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[134.0, 5762.0], [129.0, 5454.0], [54.0, 5667.5], [66.0, 5496.0], [72.0, 5519.5], [78.0, 5679.0], [76.0, 5501.5], [79.0, 5525.0], [80.0, 5504.0], [81.0, 5539.0], [86.0, 5833.0], [97.0, 11058.0], [105.0, 5559.0], [114.0, 5821.0], [31.0, 5766.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 134.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.6540157445E12, "maxY": 80.0, "series": [{"data": [[1.6540157595E12, 46.666666666666664], [1.654015758E12, 40.0], [1.654015779E12, 33.333333333333336], [1.6540157565E12, 40.0], [1.6540157775E12, 80.0], [1.654015755E12, 32.0], [1.654015764E12, 56.666666666666664], [1.6540157625E12, 55.333333333333336], [1.654015761E12, 48.0], [1.654015749E12, 16.0], [1.65401577E12, 73.33333333333333], [1.6540157475E12, 16.0], [1.6540157685E12, 70.66666666666667], [1.654015746E12, 8.0], [1.654015767E12, 64.0], [1.6540157445E12, 8.0], [1.6540157655E12, 62.666666666666664], [1.654015776E12, 80.0], [1.6540157535E12, 30.666666666666668], [1.6540157745E12, 80.0], [1.654015752E12, 24.0], [1.654015773E12, 80.0], [1.6540157505E12, 22.666666666666668], [1.6540157715E12, 78.66666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654015779E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.6540157445E12, "maxY": 154.0, "series": [{"data": [[1.6540157595E12, 7.333333333333333], [1.654015758E12, 6.666666666666667], [1.6540157565E12, 10.0], [1.654015755E12, 8.666666666666666], [1.654015764E12, 6.0], [1.6540157625E12, 7.333333333333333], [1.654015761E12, 6.666666666666667], [1.654015749E12, 16.0], [1.6540157475E12, 14.666666666666666], [1.654015746E12, 14.0], [1.654015767E12, 1.3333333333333333], [1.6540157445E12, 1.3333333333333333], [1.6540157655E12, 6.0], [1.6540157535E12, 10.0], [1.654015752E12, 12.0], [1.6540157505E12, 12.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65401577E12, 64.0], [1.6540157805E12, 106.0], [1.6540157685E12, 154.0], [1.654015779E12, 86.0], [1.654015767E12, 74.66666666666667], [1.6540157775E12, 74.0], [1.654015776E12, 50.666666666666664], [1.6540157745E12, 96.0], [1.654015773E12, 44.0], [1.6540157835E12, 88.0], [1.6540157715E12, 115.33333333333333], [1.654015782E12, 54.0]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6540157835E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.6540157445E12, "maxY": 100.66666666666667, "series": [{"data": [[1.6540157595E12, 7.333333333333333], [1.654015758E12, 6.666666666666667], [1.6540157565E12, 8.666666666666666], [1.654015755E12, 8.666666666666666], [1.654015764E12, 6.0], [1.6540157625E12, 6.0], [1.654015761E12, 6.666666666666667], [1.654015749E12, 8.0], [1.6540157475E12, 7.333333333333333], [1.654015746E12, 6.0], [1.654015767E12, 1.3333333333333333], [1.6540157445E12, 1.3333333333333333], [1.6540157655E12, 6.0], [1.6540157535E12, 10.0], [1.654015752E12, 12.0], [1.6540157505E12, 10.666666666666666]], "isOverall": false, "label": "/api/listings?geojson=true-success", "isController": false}, {"data": [[1.654015749E12, 8.0], [1.6540157475E12, 7.333333333333333], [1.654015746E12, 8.0], [1.6540157565E12, 1.3333333333333333], [1.6540157625E12, 1.3333333333333333], [1.6540157505E12, 1.3333333333333333]], "isOverall": false, "label": "/api/statistics/neighbourhoods-success", "isController": false}, {"data": [[1.65401577E12, 27.333333333333332], [1.6540157805E12, 52.666666666666664], [1.6540157685E12, 53.333333333333336], [1.654015779E12, 43.333333333333336], [1.654015767E12, 28.0], [1.6540157775E12, 36.666666666666664], [1.654015776E12, 25.333333333333332], [1.6540157745E12, 48.0], [1.654015773E12, 22.0], [1.6540157835E12, 44.0], [1.6540157715E12, 52.666666666666664], [1.654015782E12, 27.333333333333332]], "isOverall": false, "label": "/api/listings?geojson=true-failure", "isController": false}, {"data": [[1.65401577E12, 36.666666666666664], [1.6540157805E12, 53.333333333333336], [1.6540157685E12, 100.66666666666667], [1.654015779E12, 42.666666666666664], [1.654015767E12, 46.666666666666664], [1.6540157775E12, 37.333333333333336], [1.654015776E12, 25.333333333333332], [1.6540157745E12, 48.0], [1.654015773E12, 22.0], [1.6540157835E12, 44.0], [1.6540157715E12, 62.666666666666664], [1.654015782E12, 26.666666666666668]], "isOverall": false, "label": "/api/statistics/neighbourhoods-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6540157835E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.6540157445E12, "maxY": 154.0, "series": [{"data": [[1.6540157595E12, 7.333333333333333], [1.654015758E12, 6.666666666666667], [1.6540157565E12, 10.0], [1.654015755E12, 8.666666666666666], [1.654015764E12, 6.0], [1.6540157625E12, 7.333333333333333], [1.654015761E12, 6.666666666666667], [1.654015749E12, 16.0], [1.6540157475E12, 14.666666666666666], [1.654015746E12, 14.0], [1.654015767E12, 1.3333333333333333], [1.6540157445E12, 1.3333333333333333], [1.6540157655E12, 6.0], [1.6540157535E12, 10.0], [1.654015752E12, 12.0], [1.6540157505E12, 12.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65401577E12, 64.0], [1.6540157805E12, 106.0], [1.6540157685E12, 154.0], [1.654015779E12, 86.0], [1.654015767E12, 74.66666666666667], [1.6540157775E12, 74.0], [1.654015776E12, 50.666666666666664], [1.6540157745E12, 96.0], [1.654015773E12, 44.0], [1.6540157835E12, 88.0], [1.6540157715E12, 115.33333333333333], [1.654015782E12, 54.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6540157835E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

