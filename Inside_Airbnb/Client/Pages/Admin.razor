@page "/admin"
@using Inside_Airbnb.Shared
@using Microsoft.AspNetCore.Authorization
@inject IJSRuntime Js
@inject IHttpClientFactory ClientFactory
@inject IConfiguration Configuration
@attribute [Authorize]
@attribute [Authorize(Roles = "administrator")]

<h3>Admin</h3>
<div class="d-flex justify-content-center flex-wrap gap-3">
    <div class="d-block graphContainer">
        Average price of listing
        <canvas id="neighbourhoodsChart" width="400px" height="400px"></canvas>
    </div>
    <div class="d-block graphContainer">
        Amount of listings for top 20 property types
        <canvas id="propertyChart" width="400px" height="400px"></canvas>
    </div>
    <div class="d-block graphContainer">
        Amount of listings with room type
        <canvas id="roomChart" width="400px" height="400px"></canvas>
    </div>
    <div class="d-block graphContainer">
        Amount of reviews over time
        <canvas id="reviewsChart" width="400px" height="400px"></canvas>
    </div>
</div>

@code {
    private NeighbourhoodsStats? NeighbourStats { get; set; }
    private PropertyTypesStats? PropertyStats { get; set; }
    private RoomTypesStats? RoomStats { get; set; }
    private ReviewsPerDateStats? ReviewsStats { get; set; }
    private List<string> _reviewStatsFormatted = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var client = ClientFactory.CreateClient("WebApiAuth");
            NeighbourStats = await client.GetFromJsonAsync<NeighbourhoodsStats>($"{Configuration["apiUrl"]}/api/statistics/neighbourhoods");
            PropertyStats = await client.GetFromJsonAsync<PropertyTypesStats>($"{Configuration["apiUrl"]}/api/statistics/property-types");
            RoomStats = await client.GetFromJsonAsync<RoomTypesStats>($"{Configuration["apiUrl"]}/api/statistics/room-types");
            ReviewsStats = await client.GetFromJsonAsync<ReviewsPerDateStats>($"{Configuration["apiUrl"]}/api/statistics/reviews");

            if (ReviewsStats != null)
            {
                foreach (var r in ReviewsStats.Dates)
                {
                    DateTime date = r.Date;
                    var formatted = date.ToString("dd/M/yyyy");
                    _reviewStatsFormatted.Add(formatted);
                }
                await Js.InvokeVoidAsync("setMap.reviews", ReviewsStats, _reviewStatsFormatted);
            }
            await Js.InvokeVoidAsync("setMap.neighbourhood", NeighbourStats);
            await Js.InvokeVoidAsync("setMap.property", PropertyStats);
            await Js.InvokeVoidAsync("setMap.room", RoomStats);
        }
    }

}