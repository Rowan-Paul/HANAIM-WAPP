@page "/Sidebar"
@using Inside_Airbnb.Server
@implements IDisposable
@inject IJSRuntime JS
@inject IHttpClientFactory ClientFactory

<div id="@(_listing is not null ? "slide" : "")" class="@(_listing is not null ? "" : "d-none")">
    @if (_listing is not null)
    {
        <div class="d-flex flex-row">
            <h3>@_listing.Name</h3>
            <button @onclick="() => _listing = null" class="btn-close" style="margin-left: auto;"></button>
        </div>
        <div class="d-flex flex-row">
            <span>By&nbsp;</span>@_listing.HostName <h4 style="margin-left: auto;">$@_listing.Price</h4>
        </div>
        <div>
            <strong>Neighbourhood</strong><br/>@_listing.NeighbourhoodCleansed
        </div>
        <div>
            <strong>Reviews</strong><br/>@_listing.NumberOfReviews (@_listing.NumberOfReviewsL30d in the last 30 days)
        </div>
        <div>
            <strong>Min - max nights to stay</strong><br/>@_listing.MinimumNights - @_listing.MaximumNights
        </div>
        <div>
            <strong>Amount of bedrooms and bathrooms</strong><br/>@_listing.Bedrooms bedrooms, @_listing.Bathrooms bathrooms
        </div>
        <div>
            <strong>Room type</strong><br/>@_listing.RoomType
        </div>
    }
</div>

@code {
    private Listing? _listing;
    private DotNetObjectReference<Sidebar>? dotNetHelper;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JS.InvokeAsync<string>("setDotNetHelper", dotNetHelper);
        }
    }

    [JSInvokable]
    public async Task FetchInfo(int id)
    {
        var client = ClientFactory.CreateClient("WebAPI");
        _listing = await client.GetFromJsonAsync<Listing>("https://localhost:7000/api/listings/" + id);
        StateHasChanged();
    }

    public void Dispose()
    {
        dotNetHelper?.Dispose();
    }

}