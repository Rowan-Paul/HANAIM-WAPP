@using Shared;
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using System.Collections.Specialized
@using Inside_Airbnb.Server
@using Inside_Airbnb.Shared
@using Microsoft.AspNetCore.Components
@inject HttpClient Http
@inject IJSRuntime JS

<h2>Filters</h2>
<form class="row gap-3">
    <div class="form-group col mt-auto">
        <label class="fst-italic">Lowest price</label>
        <input type="number" class="form-control" id="inputPriceFrom" @bind="Parameters.PriceFrom">
    </div>
    <div class="form-group col mt-auto">
        <label class="fst-italic">Highest price</label>
        <input type="number" class="form-control" id="inputPriceTo" @bind="Parameters.PriceTo">
    </div>
    <div class="form-group col mt-auto">
        <label class="fst-italic">Maximum amount of reviews</label>
        <input type="number" class="form-control" id="inputReviewsMax" @bind="Parameters.ReviewsMax">
    </div>
    <div class="form-group col mt-auto">
        <label class="fst-italic">Minimum amount of reviews</label>
        <input type="number" class="form-control" id="inputReviewsMin" @bind="Parameters.ReviewsMin">
    </div>
    <button
        type="submit"
        class="btn btn-primary col"
        @onclick="async () => await FilterNeighbourhoods(Parameters.Neighbourhood, Parameters.PriceFrom, Parameters.PriceTo, Parameters.ReviewsMax, Parameters.ReviewsMin)"
        @onclick:preventDefault>
        Filter
    </button>
</form>

@code {

    [Parameter]
    public FilterParameters? Parameters { get; set; } = new();

    private async Task FilterNeighbourhoods(string? neighbourhood, int? priceFrom, int? priceTo, int? reviewsMax, int? reviewsMin)
    {
        NameValueCollection queryString = System.Web.HttpUtility.ParseQueryString(string.Empty);

        if (neighbourhood != null) queryString.Add("neighbourhood", neighbourhood);
        if (priceFrom != null) queryString.Add("priceFrom", priceFrom.ToString());
        if (priceTo != null) queryString.Add("priceTo", priceTo.ToString());
        if (reviewsMax != null) queryString.Add("reviewsMax", reviewsMax.ToString());
        if (reviewsMin != null) queryString.Add("reviewsMin", reviewsMin.ToString());

        await JS.InvokeVoidAsync("mapbox.updateMap", $"https://localhost:7000/api/listings?geojson=true&{queryString}");
    }

}