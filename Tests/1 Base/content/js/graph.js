/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 200.0, "minX": 0.0, "maxY": 27190.0, "series": [{"data": [[0.0, 200.0], [0.1, 200.0], [0.2, 200.0], [0.3, 200.0], [0.4, 200.0], [0.5, 221.0], [0.6, 221.0], [0.7, 221.0], [0.8, 221.0], [0.9, 221.0], [1.0, 224.0], [1.1, 224.0], [1.2, 224.0], [1.3, 224.0], [1.4, 227.0], [1.5, 227.0], [1.6, 227.0], [1.7, 227.0], [1.8, 227.0], [1.9, 227.0], [2.0, 227.0], [2.1, 227.0], [2.2, 227.0], [2.3, 227.0], [2.4, 232.0], [2.5, 232.0], [2.6, 232.0], [2.7, 232.0], [2.8, 233.0], [2.9, 233.0], [3.0, 233.0], [3.1, 233.0], [3.2, 233.0], [3.3, 235.0], [3.4, 235.0], [3.5, 235.0], [3.6, 235.0], [3.7, 235.0], [3.8, 237.0], [3.9, 237.0], [4.0, 237.0], [4.1, 237.0], [4.2, 240.0], [4.3, 240.0], [4.4, 240.0], [4.5, 240.0], [4.6, 240.0], [4.7, 241.0], [4.8, 241.0], [4.9, 241.0], [5.0, 241.0], [5.1, 241.0], [5.2, 249.0], [5.3, 249.0], [5.4, 249.0], [5.5, 249.0], [5.6, 249.0], [5.7, 249.0], [5.8, 249.0], [5.9, 249.0], [6.0, 249.0], [6.1, 252.0], [6.2, 252.0], [6.3, 252.0], [6.4, 252.0], [6.5, 252.0], [6.6, 254.0], [6.7, 254.0], [6.8, 254.0], [6.9, 254.0], [7.0, 257.0], [7.1, 257.0], [7.2, 257.0], [7.3, 257.0], [7.4, 257.0], [7.5, 267.0], [7.6, 267.0], [7.7, 267.0], [7.8, 267.0], [7.9, 267.0], [8.0, 276.0], [8.1, 276.0], [8.2, 276.0], [8.3, 276.0], [8.4, 288.0], [8.5, 288.0], [8.6, 288.0], [8.7, 288.0], [8.8, 288.0], [8.9, 290.0], [9.0, 290.0], [9.1, 290.0], [9.2, 290.0], [9.3, 290.0], [9.4, 305.0], [9.5, 305.0], [9.6, 305.0], [9.7, 305.0], [9.8, 306.0], [9.9, 306.0], [10.0, 306.0], [10.1, 306.0], [10.2, 306.0], [10.3, 307.0], [10.4, 307.0], [10.5, 307.0], [10.6, 307.0], [10.7, 309.0], [10.8, 309.0], [10.9, 309.0], [11.0, 309.0], [11.1, 309.0], [11.2, 310.0], [11.3, 310.0], [11.4, 310.0], [11.5, 310.0], [11.6, 310.0], [11.7, 319.0], [11.8, 319.0], [11.9, 319.0], [12.0, 319.0], [12.1, 331.0], [12.2, 331.0], [12.3, 331.0], [12.4, 331.0], [12.5, 331.0], [12.6, 333.0], [12.7, 333.0], [12.8, 333.0], [12.9, 333.0], [13.0, 333.0], [13.1, 334.0], [13.2, 334.0], [13.3, 334.0], [13.4, 334.0], [13.5, 345.0], [13.6, 345.0], [13.7, 345.0], [13.8, 345.0], [13.9, 345.0], [14.0, 346.0], [14.1, 346.0], [14.2, 346.0], [14.3, 346.0], [14.4, 346.0], [14.5, 346.0], [14.6, 346.0], [14.7, 346.0], [14.8, 346.0], [14.9, 348.0], [15.0, 348.0], [15.1, 348.0], [15.2, 348.0], [15.3, 348.0], [15.4, 352.0], [15.5, 352.0], [15.6, 352.0], [15.7, 352.0], [15.8, 352.0], [15.9, 365.0], [16.0, 365.0], [16.1, 365.0], [16.2, 365.0], [16.3, 366.0], [16.4, 366.0], [16.5, 366.0], [16.6, 366.0], [16.7, 366.0], [16.8, 366.0], [16.9, 366.0], [17.0, 366.0], [17.1, 366.0], [17.2, 366.0], [17.3, 368.0], [17.4, 368.0], [17.5, 368.0], [17.6, 368.0], [17.7, 373.0], [17.8, 373.0], [17.9, 373.0], [18.0, 373.0], [18.1, 373.0], [18.2, 390.0], [18.3, 390.0], [18.4, 390.0], [18.5, 390.0], [18.6, 390.0], [18.7, 393.0], [18.8, 393.0], [18.9, 393.0], [19.0, 393.0], [19.1, 447.0], [19.2, 447.0], [19.3, 447.0], [19.4, 447.0], [19.5, 447.0], [19.6, 494.0], [19.7, 494.0], [19.8, 494.0], [19.9, 494.0], [20.0, 494.0], [20.1, 500.0], [20.2, 500.0], [20.3, 500.0], [20.4, 500.0], [20.5, 500.0], [20.6, 500.0], [20.7, 500.0], [20.8, 500.0], [20.9, 500.0], [21.0, 517.0], [21.1, 517.0], [21.2, 517.0], [21.3, 517.0], [21.4, 528.0], [21.5, 528.0], [21.6, 528.0], [21.7, 528.0], [21.8, 528.0], [21.9, 529.0], [22.0, 529.0], [22.1, 529.0], [22.2, 529.0], [22.3, 529.0], [22.4, 529.0], [22.5, 529.0], [22.6, 529.0], [22.7, 529.0], [22.8, 549.0], [22.9, 549.0], [23.0, 549.0], [23.1, 549.0], [23.2, 549.0], [23.3, 557.0], [23.4, 557.0], [23.5, 557.0], [23.6, 557.0], [23.7, 557.0], [23.8, 559.0], [23.9, 559.0], [24.0, 559.0], [24.1, 559.0], [24.2, 562.0], [24.3, 562.0], [24.4, 562.0], [24.5, 562.0], [24.6, 562.0], [24.7, 565.0], [24.8, 565.0], [24.9, 565.0], [25.0, 565.0], [25.1, 565.0], [25.2, 569.0], [25.3, 569.0], [25.4, 569.0], [25.5, 569.0], [25.6, 569.0], [25.7, 569.0], [25.8, 569.0], [25.9, 569.0], [26.0, 569.0], [26.1, 579.0], [26.2, 579.0], [26.3, 579.0], [26.4, 579.0], [26.5, 579.0], [26.6, 586.0], [26.7, 586.0], [26.8, 586.0], [26.9, 586.0], [27.0, 586.0], [27.1, 586.0], [27.2, 586.0], [27.3, 586.0], [27.4, 586.0], [27.5, 592.0], [27.6, 592.0], [27.7, 592.0], [27.8, 592.0], [27.9, 592.0], [28.0, 594.0], [28.1, 594.0], [28.2, 594.0], [28.3, 594.0], [28.4, 602.0], [28.5, 602.0], [28.6, 602.0], [28.7, 602.0], [28.8, 602.0], [28.9, 638.0], [29.0, 638.0], [29.1, 638.0], [29.2, 638.0], [29.3, 638.0], [29.4, 649.0], [29.5, 649.0], [29.6, 649.0], [29.7, 649.0], [29.8, 653.0], [29.9, 653.0], [30.0, 653.0], [30.1, 653.0], [30.2, 653.0], [30.3, 665.0], [30.4, 665.0], [30.5, 665.0], [30.6, 665.0], [30.7, 665.0], [30.8, 665.0], [30.9, 665.0], [31.0, 665.0], [31.1, 665.0], [31.2, 680.0], [31.3, 680.0], [31.4, 680.0], [31.5, 680.0], [31.6, 680.0], [31.7, 685.0], [31.8, 685.0], [31.9, 685.0], [32.0, 685.0], [32.1, 692.0], [32.2, 692.0], [32.3, 692.0], [32.4, 692.0], [32.5, 692.0], [32.6, 714.0], [32.7, 714.0], [32.8, 714.0], [32.9, 714.0], [33.0, 714.0], [33.1, 717.0], [33.2, 717.0], [33.3, 717.0], [33.4, 717.0], [33.5, 728.0], [33.6, 728.0], [33.7, 728.0], [33.8, 728.0], [33.9, 728.0], [34.0, 730.0], [34.1, 730.0], [34.2, 730.0], [34.3, 730.0], [34.4, 730.0], [34.5, 731.0], [34.6, 731.0], [34.7, 731.0], [34.8, 731.0], [34.9, 737.0], [35.0, 737.0], [35.1, 737.0], [35.2, 737.0], [35.3, 737.0], [35.4, 739.0], [35.5, 739.0], [35.6, 739.0], [35.7, 739.0], [35.8, 739.0], [35.9, 740.0], [36.0, 740.0], [36.1, 740.0], [36.2, 740.0], [36.3, 741.0], [36.4, 741.0], [36.5, 741.0], [36.6, 741.0], [36.7, 741.0], [36.8, 744.0], [36.9, 744.0], [37.0, 744.0], [37.1, 744.0], [37.2, 744.0], [37.3, 769.0], [37.4, 769.0], [37.5, 769.0], [37.6, 769.0], [37.7, 770.0], [37.8, 770.0], [37.9, 770.0], [38.0, 770.0], [38.1, 770.0], [38.2, 777.0], [38.3, 777.0], [38.4, 777.0], [38.5, 777.0], [38.6, 777.0], [38.7, 792.0], [38.8, 792.0], [38.9, 792.0], [39.0, 792.0], [39.1, 796.0], [39.2, 796.0], [39.3, 796.0], [39.4, 796.0], [39.5, 796.0], [39.6, 805.0], [39.7, 805.0], [39.8, 805.0], [39.9, 805.0], [40.0, 805.0], [40.1, 806.0], [40.2, 806.0], [40.3, 806.0], [40.4, 806.0], [40.5, 830.0], [40.6, 830.0], [40.7, 830.0], [40.8, 830.0], [40.9, 830.0], [41.0, 836.0], [41.1, 836.0], [41.2, 836.0], [41.3, 836.0], [41.4, 839.0], [41.5, 839.0], [41.6, 839.0], [41.7, 839.0], [41.8, 839.0], [41.9, 845.0], [42.0, 845.0], [42.1, 845.0], [42.2, 845.0], [42.3, 845.0], [42.4, 845.0], [42.5, 845.0], [42.6, 845.0], [42.7, 845.0], [42.8, 856.0], [42.9, 856.0], [43.0, 856.0], [43.1, 856.0], [43.2, 856.0], [43.3, 859.0], [43.4, 859.0], [43.5, 859.0], [43.6, 859.0], [43.7, 859.0], [43.8, 866.0], [43.9, 866.0], [44.0, 866.0], [44.1, 866.0], [44.2, 868.0], [44.3, 868.0], [44.4, 868.0], [44.5, 868.0], [44.6, 868.0], [44.7, 875.0], [44.8, 875.0], [44.9, 875.0], [45.0, 875.0], [45.1, 875.0], [45.2, 880.0], [45.3, 880.0], [45.4, 880.0], [45.5, 880.0], [45.6, 884.0], [45.7, 884.0], [45.8, 884.0], [45.9, 884.0], [46.0, 884.0], [46.1, 886.0], [46.2, 886.0], [46.3, 886.0], [46.4, 886.0], [46.5, 886.0], [46.6, 889.0], [46.7, 889.0], [46.8, 889.0], [46.9, 889.0], [47.0, 891.0], [47.1, 891.0], [47.2, 891.0], [47.3, 891.0], [47.4, 891.0], [47.5, 895.0], [47.6, 895.0], [47.7, 895.0], [47.8, 895.0], [47.9, 895.0], [48.0, 896.0], [48.1, 896.0], [48.2, 896.0], [48.3, 896.0], [48.4, 896.0], [48.5, 896.0], [48.6, 896.0], [48.7, 896.0], [48.8, 896.0], [48.9, 908.0], [49.0, 908.0], [49.1, 908.0], [49.2, 908.0], [49.3, 908.0], [49.4, 913.0], [49.5, 913.0], [49.6, 913.0], [49.7, 913.0], [49.8, 923.0], [49.9, 923.0], [50.0, 923.0], [50.1, 923.0], [50.2, 923.0], [50.3, 959.0], [50.4, 959.0], [50.5, 959.0], [50.6, 959.0], [50.7, 963.0], [50.8, 963.0], [50.9, 963.0], [51.0, 963.0], [51.1, 963.0], [51.2, 970.0], [51.3, 970.0], [51.4, 970.0], [51.5, 970.0], [51.6, 970.0], [51.7, 972.0], [51.8, 972.0], [51.9, 972.0], [52.0, 972.0], [52.1, 974.0], [52.2, 974.0], [52.3, 974.0], [52.4, 974.0], [52.5, 974.0], [52.6, 975.0], [52.7, 975.0], [52.8, 975.0], [52.9, 975.0], [53.0, 975.0], [53.1, 977.0], [53.2, 977.0], [53.3, 977.0], [53.4, 977.0], [53.5, 989.0], [53.6, 989.0], [53.7, 989.0], [53.8, 989.0], [53.9, 989.0], [54.0, 992.0], [54.1, 992.0], [54.2, 992.0], [54.3, 992.0], [54.4, 992.0], [54.5, 1010.0], [54.6, 1010.0], [54.7, 1010.0], [54.8, 1010.0], [54.9, 1021.0], [55.0, 1021.0], [55.1, 1021.0], [55.2, 1021.0], [55.3, 1021.0], [55.4, 1025.0], [55.5, 1025.0], [55.6, 1025.0], [55.7, 1025.0], [55.8, 1025.0], [55.9, 1026.0], [56.0, 1026.0], [56.1, 1026.0], [56.2, 1026.0], [56.3, 1061.0], [56.4, 1061.0], [56.5, 1061.0], [56.6, 1061.0], [56.7, 1061.0], [56.8, 1081.0], [56.9, 1081.0], [57.0, 1081.0], [57.1, 1081.0], [57.2, 1081.0], [57.3, 1088.0], [57.4, 1088.0], [57.5, 1088.0], [57.6, 1088.0], [57.7, 1098.0], [57.8, 1098.0], [57.9, 1098.0], [58.0, 1098.0], [58.1, 1098.0], [58.2, 1109.0], [58.3, 1109.0], [58.4, 1109.0], [58.5, 1109.0], [58.6, 1109.0], [58.7, 1120.0], [58.8, 1120.0], [58.9, 1120.0], [59.0, 1120.0], [59.1, 1121.0], [59.2, 1121.0], [59.3, 1121.0], [59.4, 1121.0], [59.5, 1121.0], [59.6, 1122.0], [59.7, 1122.0], [59.8, 1122.0], [59.9, 1122.0], [60.0, 1122.0], [60.1, 1161.0], [60.2, 1161.0], [60.3, 1161.0], [60.4, 1161.0], [60.5, 1172.0], [60.6, 1172.0], [60.7, 1172.0], [60.8, 1172.0], [60.9, 1172.0], [61.0, 1194.0], [61.1, 1194.0], [61.2, 1194.0], [61.3, 1194.0], [61.4, 1209.0], [61.5, 1209.0], [61.6, 1209.0], [61.7, 1209.0], [61.8, 1209.0], [61.9, 1210.0], [62.0, 1210.0], [62.1, 1210.0], [62.2, 1210.0], [62.3, 1210.0], [62.4, 1236.0], [62.5, 1236.0], [62.6, 1236.0], [62.7, 1236.0], [62.8, 1237.0], [62.9, 1237.0], [63.0, 1237.0], [63.1, 1237.0], [63.2, 1237.0], [63.3, 1244.0], [63.4, 1244.0], [63.5, 1244.0], [63.6, 1244.0], [63.7, 1244.0], [63.8, 1253.0], [63.9, 1253.0], [64.0, 1253.0], [64.1, 1253.0], [64.2, 1256.0], [64.3, 1256.0], [64.4, 1256.0], [64.5, 1256.0], [64.6, 1256.0], [64.7, 1303.0], [64.8, 1303.0], [64.9, 1303.0], [65.0, 1303.0], [65.1, 1303.0], [65.2, 1306.0], [65.3, 1306.0], [65.4, 1306.0], [65.5, 1306.0], [65.6, 1308.0], [65.7, 1308.0], [65.8, 1308.0], [65.9, 1308.0], [66.0, 1308.0], [66.1, 1364.0], [66.2, 1364.0], [66.3, 1364.0], [66.4, 1364.0], [66.5, 1364.0], [66.6, 1472.0], [66.7, 1472.0], [66.8, 1472.0], [66.9, 1472.0], [67.0, 1520.0], [67.1, 1520.0], [67.2, 1520.0], [67.3, 1520.0], [67.4, 1520.0], [67.5, 1559.0], [67.6, 1559.0], [67.7, 1559.0], [67.8, 1559.0], [67.9, 1559.0], [68.0, 1608.0], [68.1, 1608.0], [68.2, 1608.0], [68.3, 1608.0], [68.4, 1773.0], [68.5, 1773.0], [68.6, 1773.0], [68.7, 1773.0], [68.8, 1773.0], [68.9, 2177.0], [69.0, 2177.0], [69.1, 2177.0], [69.2, 2177.0], [69.3, 2177.0], [69.4, 2262.0], [69.5, 2262.0], [69.6, 2262.0], [69.7, 2262.0], [69.8, 2878.0], [69.9, 2878.0], [70.0, 2878.0], [70.1, 2878.0], [70.2, 2878.0], [70.3, 4921.0], [70.4, 4921.0], [70.5, 4921.0], [70.6, 4921.0], [70.7, 5164.0], [70.8, 5164.0], [70.9, 5164.0], [71.0, 5164.0], [71.1, 5164.0], [71.2, 5410.0], [71.3, 5410.0], [71.4, 5410.0], [71.5, 5410.0], [71.6, 5410.0], [71.7, 6571.0], [71.8, 6571.0], [71.9, 6571.0], [72.0, 6571.0], [72.1, 7014.0], [72.2, 7014.0], [72.3, 7014.0], [72.4, 7014.0], [72.5, 7014.0], [72.6, 7077.0], [72.7, 7077.0], [72.8, 7077.0], [72.9, 7077.0], [73.0, 7077.0], [73.1, 7277.0], [73.2, 7277.0], [73.3, 7277.0], [73.4, 7277.0], [73.5, 7353.0], [73.6, 7353.0], [73.7, 7353.0], [73.8, 7353.0], [73.9, 7353.0], [74.0, 7367.0], [74.1, 7367.0], [74.2, 7367.0], [74.3, 7367.0], [74.4, 7367.0], [74.5, 7386.0], [74.6, 7386.0], [74.7, 7386.0], [74.8, 7386.0], [74.9, 7441.0], [75.0, 7441.0], [75.1, 7441.0], [75.2, 7441.0], [75.3, 7441.0], [75.4, 7480.0], [75.5, 7480.0], [75.6, 7480.0], [75.7, 7480.0], [75.8, 7480.0], [75.9, 8274.0], [76.0, 8274.0], [76.1, 8274.0], [76.2, 8274.0], [76.3, 8487.0], [76.4, 8487.0], [76.5, 8487.0], [76.6, 8487.0], [76.7, 8487.0], [76.8, 8895.0], [76.9, 8895.0], [77.0, 8895.0], [77.1, 8895.0], [77.2, 8895.0], [77.3, 9044.0], [77.4, 9044.0], [77.5, 9044.0], [77.6, 9044.0], [77.7, 9944.0], [77.8, 9944.0], [77.9, 9944.0], [78.0, 9944.0], [78.1, 9944.0], [78.2, 10028.0], [78.3, 10028.0], [78.4, 10028.0], [78.5, 10028.0], [78.6, 10028.0], [78.7, 10155.0], [78.8, 10155.0], [78.9, 10155.0], [79.0, 10155.0], [79.1, 10309.0], [79.2, 10309.0], [79.3, 10309.0], [79.4, 10309.0], [79.5, 10309.0], [79.6, 10915.0], [79.7, 10915.0], [79.8, 10915.0], [79.9, 10915.0], [80.0, 11049.0], [80.1, 11049.0], [80.2, 11049.0], [80.3, 11049.0], [80.4, 11049.0], [80.5, 11244.0], [80.6, 11244.0], [80.7, 11244.0], [80.8, 11244.0], [80.9, 11244.0], [81.0, 11527.0], [81.1, 11527.0], [81.2, 11527.0], [81.3, 11527.0], [81.4, 11534.0], [81.5, 11534.0], [81.6, 11534.0], [81.7, 11534.0], [81.8, 11534.0], [81.9, 11868.0], [82.0, 11868.0], [82.1, 11868.0], [82.2, 11868.0], [82.3, 11868.0], [82.4, 13183.0], [82.5, 13183.0], [82.6, 13183.0], [82.7, 13183.0], [82.8, 13206.0], [82.9, 13206.0], [83.0, 13206.0], [83.1, 13206.0], [83.2, 13206.0], [83.3, 13282.0], [83.4, 13282.0], [83.5, 13282.0], [83.6, 13282.0], [83.7, 13282.0], [83.8, 13391.0], [83.9, 13391.0], [84.0, 13391.0], [84.1, 13391.0], [84.2, 13490.0], [84.3, 13490.0], [84.4, 13490.0], [84.5, 13490.0], [84.6, 13490.0], [84.7, 13535.0], [84.8, 13535.0], [84.9, 13535.0], [85.0, 13535.0], [85.1, 13535.0], [85.2, 13588.0], [85.3, 13588.0], [85.4, 13588.0], [85.5, 13588.0], [85.6, 13838.0], [85.7, 13838.0], [85.8, 13838.0], [85.9, 13838.0], [86.0, 13838.0], [86.1, 13886.0], [86.2, 13886.0], [86.3, 13886.0], [86.4, 13886.0], [86.5, 13886.0], [86.6, 14122.0], [86.7, 14122.0], [86.8, 14122.0], [86.9, 14122.0], [87.0, 14806.0], [87.1, 14806.0], [87.2, 14806.0], [87.3, 14806.0], [87.4, 14806.0], [87.5, 15206.0], [87.6, 15206.0], [87.7, 15206.0], [87.8, 15206.0], [87.9, 15206.0], [88.0, 15266.0], [88.1, 15266.0], [88.2, 15266.0], [88.3, 15266.0], [88.4, 15580.0], [88.5, 15580.0], [88.6, 15580.0], [88.7, 15580.0], [88.8, 15580.0], [88.9, 15835.0], [89.0, 15835.0], [89.1, 15835.0], [89.2, 15835.0], [89.3, 15835.0], [89.4, 15980.0], [89.5, 15980.0], [89.6, 15980.0], [89.7, 15980.0], [89.8, 16119.0], [89.9, 16119.0], [90.0, 16119.0], [90.1, 16119.0], [90.2, 16119.0], [90.3, 16253.0], [90.4, 16253.0], [90.5, 16253.0], [90.6, 16253.0], [90.7, 16393.0], [90.8, 16393.0], [90.9, 16393.0], [91.0, 16393.0], [91.1, 16393.0], [91.2, 16491.0], [91.3, 16491.0], [91.4, 16491.0], [91.5, 16491.0], [91.6, 16491.0], [91.7, 16512.0], [91.8, 16512.0], [91.9, 16512.0], [92.0, 16512.0], [92.1, 16564.0], [92.2, 16564.0], [92.3, 16564.0], [92.4, 16564.0], [92.5, 16564.0], [92.6, 16608.0], [92.7, 16608.0], [92.8, 16608.0], [92.9, 16608.0], [93.0, 16608.0], [93.1, 16674.0], [93.2, 16674.0], [93.3, 16674.0], [93.4, 16674.0], [93.5, 16706.0], [93.6, 16706.0], [93.7, 16706.0], [93.8, 16706.0], [93.9, 16706.0], [94.0, 16721.0], [94.1, 16721.0], [94.2, 16721.0], [94.3, 16721.0], [94.4, 16721.0], [94.5, 16727.0], [94.6, 16727.0], [94.7, 16727.0], [94.8, 16727.0], [94.9, 16835.0], [95.0, 16835.0], [95.1, 16835.0], [95.2, 16835.0], [95.3, 16835.0], [95.4, 16874.0], [95.5, 16874.0], [95.6, 16874.0], [95.7, 16874.0], [95.8, 16874.0], [95.9, 16880.0], [96.0, 16880.0], [96.1, 16880.0], [96.2, 16880.0], [96.3, 16902.0], [96.4, 16902.0], [96.5, 16902.0], [96.6, 16902.0], [96.7, 16902.0], [96.8, 16906.0], [96.9, 16906.0], [97.0, 16906.0], [97.1, 16906.0], [97.2, 16906.0], [97.3, 16915.0], [97.4, 16915.0], [97.5, 16915.0], [97.6, 16915.0], [97.7, 16921.0], [97.8, 16921.0], [97.9, 16921.0], [98.0, 16921.0], [98.1, 16921.0], [98.2, 16945.0], [98.3, 16945.0], [98.4, 16945.0], [98.5, 16945.0], [98.6, 16945.0], [98.7, 16996.0], [98.8, 16996.0], [98.9, 16996.0], [99.0, 16996.0], [99.1, 17185.0], [99.2, 17185.0], [99.3, 17185.0], [99.4, 17185.0], [99.5, 17185.0], [99.6, 17593.0], [99.7, 17593.0], [99.8, 17593.0], [99.9, 17593.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[0.0, 305.0], [0.1, 305.0], [0.2, 305.0], [0.3, 305.0], [0.4, 305.0], [0.5, 306.0], [0.6, 306.0], [0.7, 306.0], [0.8, 306.0], [0.9, 306.0], [1.0, 310.0], [1.1, 310.0], [1.2, 310.0], [1.3, 310.0], [1.4, 312.0], [1.5, 312.0], [1.6, 312.0], [1.7, 312.0], [1.8, 312.0], [1.9, 313.0], [2.0, 313.0], [2.1, 313.0], [2.2, 313.0], [2.3, 313.0], [2.4, 316.0], [2.5, 316.0], [2.6, 316.0], [2.7, 316.0], [2.8, 322.0], [2.9, 322.0], [3.0, 322.0], [3.1, 322.0], [3.2, 322.0], [3.3, 327.0], [3.4, 327.0], [3.5, 327.0], [3.6, 327.0], [3.7, 327.0], [3.8, 328.0], [3.9, 328.0], [4.0, 328.0], [4.1, 328.0], [4.2, 330.0], [4.3, 330.0], [4.4, 330.0], [4.5, 330.0], [4.6, 330.0], [4.7, 331.0], [4.8, 331.0], [4.9, 331.0], [5.0, 331.0], [5.1, 331.0], [5.2, 333.0], [5.3, 333.0], [5.4, 333.0], [5.5, 333.0], [5.6, 334.0], [5.7, 334.0], [5.8, 334.0], [5.9, 334.0], [6.0, 334.0], [6.1, 335.0], [6.2, 335.0], [6.3, 335.0], [6.4, 335.0], [6.5, 335.0], [6.6, 348.0], [6.7, 348.0], [6.8, 348.0], [6.9, 348.0], [7.0, 384.0], [7.1, 384.0], [7.2, 384.0], [7.3, 384.0], [7.4, 384.0], [7.5, 405.0], [7.6, 405.0], [7.7, 405.0], [7.8, 405.0], [7.9, 405.0], [8.0, 413.0], [8.1, 413.0], [8.2, 413.0], [8.3, 413.0], [8.4, 418.0], [8.5, 418.0], [8.6, 418.0], [8.7, 418.0], [8.8, 418.0], [8.9, 429.0], [9.0, 429.0], [9.1, 429.0], [9.2, 429.0], [9.3, 429.0], [9.4, 431.0], [9.5, 431.0], [9.6, 431.0], [9.7, 431.0], [9.8, 448.0], [9.9, 448.0], [10.0, 448.0], [10.1, 448.0], [10.2, 448.0], [10.3, 450.0], [10.4, 450.0], [10.5, 450.0], [10.6, 450.0], [10.7, 464.0], [10.8, 464.0], [10.9, 464.0], [11.0, 464.0], [11.1, 464.0], [11.2, 473.0], [11.3, 473.0], [11.4, 473.0], [11.5, 473.0], [11.6, 473.0], [11.7, 482.0], [11.8, 482.0], [11.9, 482.0], [12.0, 482.0], [12.1, 486.0], [12.2, 486.0], [12.3, 486.0], [12.4, 486.0], [12.5, 486.0], [12.6, 498.0], [12.7, 498.0], [12.8, 498.0], [12.9, 498.0], [13.0, 498.0], [13.1, 510.0], [13.2, 510.0], [13.3, 510.0], [13.4, 510.0], [13.5, 527.0], [13.6, 527.0], [13.7, 527.0], [13.8, 527.0], [13.9, 527.0], [14.0, 537.0], [14.1, 537.0], [14.2, 537.0], [14.3, 537.0], [14.4, 537.0], [14.5, 581.0], [14.6, 581.0], [14.7, 581.0], [14.8, 581.0], [14.9, 625.0], [15.0, 625.0], [15.1, 625.0], [15.2, 625.0], [15.3, 625.0], [15.4, 636.0], [15.5, 636.0], [15.6, 636.0], [15.7, 636.0], [15.8, 636.0], [15.9, 642.0], [16.0, 642.0], [16.1, 642.0], [16.2, 642.0], [16.3, 667.0], [16.4, 667.0], [16.5, 667.0], [16.6, 667.0], [16.7, 667.0], [16.8, 718.0], [16.9, 718.0], [17.0, 718.0], [17.1, 718.0], [17.2, 718.0], [17.3, 766.0], [17.4, 766.0], [17.5, 766.0], [17.6, 766.0], [17.7, 793.0], [17.8, 793.0], [17.9, 793.0], [18.0, 793.0], [18.1, 793.0], [18.2, 883.0], [18.3, 883.0], [18.4, 883.0], [18.5, 883.0], [18.6, 883.0], [18.7, 982.0], [18.8, 982.0], [18.9, 982.0], [19.0, 982.0], [19.1, 1220.0], [19.2, 1220.0], [19.3, 1220.0], [19.4, 1220.0], [19.5, 1220.0], [19.6, 1449.0], [19.7, 1449.0], [19.8, 1449.0], [19.9, 1449.0], [20.0, 1449.0], [20.1, 1673.0], [20.2, 1673.0], [20.3, 1673.0], [20.4, 1673.0], [20.5, 1830.0], [20.6, 1830.0], [20.7, 1830.0], [20.8, 1830.0], [20.9, 1830.0], [21.0, 1995.0], [21.1, 1995.0], [21.2, 1995.0], [21.3, 1995.0], [21.4, 2339.0], [21.5, 2339.0], [21.6, 2339.0], [21.7, 2339.0], [21.8, 2339.0], [21.9, 2654.0], [22.0, 2654.0], [22.1, 2654.0], [22.2, 2654.0], [22.3, 2654.0], [22.4, 3070.0], [22.5, 3070.0], [22.6, 3070.0], [22.7, 3070.0], [22.8, 3089.0], [22.9, 3089.0], [23.0, 3089.0], [23.1, 3089.0], [23.2, 3089.0], [23.3, 3773.0], [23.4, 3773.0], [23.5, 3773.0], [23.6, 3773.0], [23.7, 3773.0], [23.8, 3876.0], [23.9, 3876.0], [24.0, 3876.0], [24.1, 3876.0], [24.2, 4118.0], [24.3, 4118.0], [24.4, 4118.0], [24.5, 4118.0], [24.6, 4118.0], [24.7, 4682.0], [24.8, 4682.0], [24.9, 4682.0], [25.0, 4682.0], [25.1, 4682.0], [25.2, 5019.0], [25.3, 5019.0], [25.4, 5019.0], [25.5, 5019.0], [25.6, 5324.0], [25.7, 5324.0], [25.8, 5324.0], [25.9, 5324.0], [26.0, 5324.0], [26.1, 5637.0], [26.2, 5637.0], [26.3, 5637.0], [26.4, 5637.0], [26.5, 5637.0], [26.6, 6125.0], [26.7, 6125.0], [26.8, 6125.0], [26.9, 6125.0], [27.0, 7020.0], [27.1, 7020.0], [27.2, 7020.0], [27.3, 7020.0], [27.4, 7020.0], [27.5, 7103.0], [27.6, 7103.0], [27.7, 7103.0], [27.8, 7103.0], [27.9, 7103.0], [28.0, 7638.0], [28.1, 7638.0], [28.2, 7638.0], [28.3, 7638.0], [28.4, 8575.0], [28.5, 8575.0], [28.6, 8575.0], [28.7, 8575.0], [28.8, 8575.0], [28.9, 8949.0], [29.0, 8949.0], [29.1, 8949.0], [29.2, 8949.0], [29.3, 8949.0], [29.4, 10360.0], [29.5, 10360.0], [29.6, 10360.0], [29.7, 10360.0], [29.8, 10497.0], [29.9, 10497.0], [30.0, 10497.0], [30.1, 10497.0], [30.2, 10497.0], [30.3, 10718.0], [30.4, 10718.0], [30.5, 10718.0], [30.6, 10718.0], [30.7, 11068.0], [30.8, 11068.0], [30.9, 11068.0], [31.0, 11068.0], [31.1, 11068.0], [31.2, 11082.0], [31.3, 11082.0], [31.4, 11082.0], [31.5, 11082.0], [31.6, 11082.0], [31.7, 12523.0], [31.8, 12523.0], [31.9, 12523.0], [32.0, 12523.0], [32.1, 14517.0], [32.2, 14517.0], [32.3, 14517.0], [32.4, 14517.0], [32.5, 14517.0], [32.6, 14594.0], [32.7, 14594.0], [32.8, 14594.0], [32.9, 14594.0], [33.0, 14594.0], [33.1, 14748.0], [33.2, 14748.0], [33.3, 14748.0], [33.4, 14748.0], [33.5, 15062.0], [33.6, 15062.0], [33.7, 15062.0], [33.8, 15062.0], [33.9, 15062.0], [34.0, 15266.0], [34.1, 15266.0], [34.2, 15266.0], [34.3, 15266.0], [34.4, 15266.0], [34.5, 15370.0], [34.6, 15370.0], [34.7, 15370.0], [34.8, 15370.0], [34.9, 15525.0], [35.0, 15525.0], [35.1, 15525.0], [35.2, 15525.0], [35.3, 15525.0], [35.4, 15921.0], [35.5, 15921.0], [35.6, 15921.0], [35.7, 15921.0], [35.8, 15921.0], [35.9, 16318.0], [36.0, 16318.0], [36.1, 16318.0], [36.2, 16318.0], [36.3, 16721.0], [36.4, 16721.0], [36.5, 16721.0], [36.6, 16721.0], [36.7, 16721.0], [36.8, 16815.0], [36.9, 16815.0], [37.0, 16815.0], [37.1, 16815.0], [37.2, 16815.0], [37.3, 17054.0], [37.4, 17054.0], [37.5, 17054.0], [37.6, 17054.0], [37.7, 17686.0], [37.8, 17686.0], [37.9, 17686.0], [38.0, 17686.0], [38.1, 17686.0], [38.2, 17753.0], [38.3, 17753.0], [38.4, 17753.0], [38.5, 17753.0], [38.6, 17753.0], [38.7, 17802.0], [38.8, 17802.0], [38.9, 17802.0], [39.0, 17802.0], [39.1, 18221.0], [39.2, 18221.0], [39.3, 18221.0], [39.4, 18221.0], [39.5, 18221.0], [39.6, 18225.0], [39.7, 18225.0], [39.8, 18225.0], [39.9, 18225.0], [40.0, 18225.0], [40.1, 18922.0], [40.2, 18922.0], [40.3, 18922.0], [40.4, 18922.0], [40.5, 19075.0], [40.6, 19075.0], [40.7, 19075.0], [40.8, 19075.0], [40.9, 19075.0], [41.0, 19848.0], [41.1, 19848.0], [41.2, 19848.0], [41.3, 19848.0], [41.4, 19856.0], [41.5, 19856.0], [41.6, 19856.0], [41.7, 19856.0], [41.8, 19856.0], [41.9, 20014.0], [42.0, 20014.0], [42.1, 20014.0], [42.2, 20014.0], [42.3, 20014.0], [42.4, 20082.0], [42.5, 20082.0], [42.6, 20082.0], [42.7, 20082.0], [42.8, 20212.0], [42.9, 20212.0], [43.0, 20212.0], [43.1, 20212.0], [43.2, 20212.0], [43.3, 20606.0], [43.4, 20606.0], [43.5, 20606.0], [43.6, 20606.0], [43.7, 20606.0], [43.8, 20756.0], [43.9, 20756.0], [44.0, 20756.0], [44.1, 20756.0], [44.2, 20963.0], [44.3, 20963.0], [44.4, 20963.0], [44.5, 20963.0], [44.6, 20963.0], [44.7, 21057.0], [44.8, 21057.0], [44.9, 21057.0], [45.0, 21057.0], [45.1, 21057.0], [45.2, 21095.0], [45.3, 21095.0], [45.4, 21095.0], [45.5, 21095.0], [45.6, 21342.0], [45.7, 21342.0], [45.8, 21342.0], [45.9, 21342.0], [46.0, 21342.0], [46.1, 22148.0], [46.2, 22148.0], [46.3, 22148.0], [46.4, 22148.0], [46.5, 22148.0], [46.6, 22267.0], [46.7, 22267.0], [46.8, 22267.0], [46.9, 22267.0], [47.0, 22345.0], [47.1, 22345.0], [47.2, 22345.0], [47.3, 22345.0], [47.4, 22345.0], [47.5, 22376.0], [47.6, 22376.0], [47.7, 22376.0], [47.8, 22376.0], [47.9, 22376.0], [48.0, 22437.0], [48.1, 22437.0], [48.2, 22437.0], [48.3, 22437.0], [48.4, 22494.0], [48.5, 22494.0], [48.6, 22494.0], [48.7, 22494.0], [48.8, 22494.0], [48.9, 22551.0], [49.0, 22551.0], [49.1, 22551.0], [49.2, 22551.0], [49.3, 22551.0], [49.4, 22565.0], [49.5, 22565.0], [49.6, 22565.0], [49.7, 22565.0], [49.8, 22593.0], [49.9, 22593.0], [50.0, 22593.0], [50.1, 22593.0], [50.2, 22593.0], [50.3, 22685.0], [50.4, 22685.0], [50.5, 22685.0], [50.6, 22685.0], [50.7, 22841.0], [50.8, 22841.0], [50.9, 22841.0], [51.0, 22841.0], [51.1, 22841.0], [51.2, 22946.0], [51.3, 22946.0], [51.4, 22946.0], [51.5, 22946.0], [51.6, 22946.0], [51.7, 23088.0], [51.8, 23088.0], [51.9, 23088.0], [52.0, 23088.0], [52.1, 23297.0], [52.2, 23297.0], [52.3, 23297.0], [52.4, 23297.0], [52.5, 23297.0], [52.6, 23462.0], [52.7, 23462.0], [52.8, 23462.0], [52.9, 23462.0], [53.0, 23462.0], [53.1, 23541.0], [53.2, 23541.0], [53.3, 23541.0], [53.4, 23541.0], [53.5, 23599.0], [53.6, 23599.0], [53.7, 23599.0], [53.8, 23599.0], [53.9, 23599.0], [54.0, 23633.0], [54.1, 23633.0], [54.2, 23633.0], [54.3, 23633.0], [54.4, 23633.0], [54.5, 23640.0], [54.6, 23640.0], [54.7, 23640.0], [54.8, 23640.0], [54.9, 23990.0], [55.0, 23990.0], [55.1, 23990.0], [55.2, 23990.0], [55.3, 23990.0], [55.4, 24022.0], [55.5, 24022.0], [55.6, 24022.0], [55.7, 24022.0], [55.8, 24022.0], [55.9, 24108.0], [56.0, 24108.0], [56.1, 24108.0], [56.2, 24108.0], [56.3, 24225.0], [56.4, 24225.0], [56.5, 24225.0], [56.6, 24225.0], [56.7, 24225.0], [56.8, 24479.0], [56.9, 24479.0], [57.0, 24479.0], [57.1, 24479.0], [57.2, 24479.0], [57.3, 24485.0], [57.4, 24485.0], [57.5, 24485.0], [57.6, 24485.0], [57.7, 24539.0], [57.8, 24539.0], [57.9, 24539.0], [58.0, 24539.0], [58.1, 24539.0], [58.2, 24540.0], [58.3, 24540.0], [58.4, 24540.0], [58.5, 24540.0], [58.6, 24540.0], [58.7, 24625.0], [58.8, 24625.0], [58.9, 24625.0], [59.0, 24625.0], [59.1, 24634.0], [59.2, 24634.0], [59.3, 24634.0], [59.4, 24634.0], [59.5, 24634.0], [59.6, 24673.0], [59.7, 24673.0], [59.8, 24673.0], [59.9, 24673.0], [60.0, 24673.0], [60.1, 24682.0], [60.2, 24682.0], [60.3, 24682.0], [60.4, 24682.0], [60.5, 24779.0], [60.6, 24779.0], [60.7, 24779.0], [60.8, 24779.0], [60.9, 24779.0], [61.0, 24835.0], [61.1, 24835.0], [61.2, 24835.0], [61.3, 24835.0], [61.4, 24924.0], [61.5, 24924.0], [61.6, 24924.0], [61.7, 24924.0], [61.8, 24924.0], [61.9, 24955.0], [62.0, 24955.0], [62.1, 24955.0], [62.2, 24955.0], [62.3, 24955.0], [62.4, 24976.0], [62.5, 24976.0], [62.6, 24976.0], [62.7, 24976.0], [62.8, 24986.0], [62.9, 24986.0], [63.0, 24986.0], [63.1, 24986.0], [63.2, 24986.0], [63.3, 24988.0], [63.4, 24988.0], [63.5, 24988.0], [63.6, 24988.0], [63.7, 24988.0], [63.8, 25006.0], [63.9, 25006.0], [64.0, 25006.0], [64.1, 25006.0], [64.2, 25071.0], [64.3, 25071.0], [64.4, 25071.0], [64.5, 25071.0], [64.6, 25071.0], [64.7, 25141.0], [64.8, 25141.0], [64.9, 25141.0], [65.0, 25141.0], [65.1, 25141.0], [65.2, 25152.0], [65.3, 25152.0], [65.4, 25152.0], [65.5, 25152.0], [65.6, 25188.0], [65.7, 25188.0], [65.8, 25188.0], [65.9, 25188.0], [66.0, 25188.0], [66.1, 25194.0], [66.2, 25194.0], [66.3, 25194.0], [66.4, 25194.0], [66.5, 25194.0], [66.6, 25241.0], [66.7, 25241.0], [66.8, 25241.0], [66.9, 25241.0], [67.0, 25268.0], [67.1, 25268.0], [67.2, 25268.0], [67.3, 25268.0], [67.4, 25268.0], [67.5, 25269.0], [67.6, 25269.0], [67.7, 25269.0], [67.8, 25269.0], [67.9, 25269.0], [68.0, 25283.0], [68.1, 25283.0], [68.2, 25283.0], [68.3, 25283.0], [68.4, 25289.0], [68.5, 25289.0], [68.6, 25289.0], [68.7, 25289.0], [68.8, 25289.0], [68.9, 25324.0], [69.0, 25324.0], [69.1, 25324.0], [69.2, 25324.0], [69.3, 25324.0], [69.4, 25363.0], [69.5, 25363.0], [69.6, 25363.0], [69.7, 25363.0], [69.8, 25380.0], [69.9, 25380.0], [70.0, 25380.0], [70.1, 25380.0], [70.2, 25380.0], [70.3, 25433.0], [70.4, 25433.0], [70.5, 25433.0], [70.6, 25433.0], [70.7, 25483.0], [70.8, 25483.0], [70.9, 25483.0], [71.0, 25483.0], [71.1, 25483.0], [71.2, 25484.0], [71.3, 25484.0], [71.4, 25484.0], [71.5, 25484.0], [71.6, 25484.0], [71.7, 25548.0], [71.8, 25548.0], [71.9, 25548.0], [72.0, 25548.0], [72.1, 25557.0], [72.2, 25557.0], [72.3, 25557.0], [72.4, 25557.0], [72.5, 25557.0], [72.6, 25582.0], [72.7, 25582.0], [72.8, 25582.0], [72.9, 25582.0], [73.0, 25582.0], [73.1, 25630.0], [73.2, 25630.0], [73.3, 25630.0], [73.4, 25630.0], [73.5, 25631.0], [73.6, 25631.0], [73.7, 25631.0], [73.8, 25631.0], [73.9, 25631.0], [74.0, 25640.0], [74.1, 25640.0], [74.2, 25640.0], [74.3, 25640.0], [74.4, 25640.0], [74.5, 25649.0], [74.6, 25649.0], [74.7, 25649.0], [74.8, 25649.0], [74.9, 25701.0], [75.0, 25701.0], [75.1, 25701.0], [75.2, 25701.0], [75.3, 25701.0], [75.4, 25712.0], [75.5, 25712.0], [75.6, 25712.0], [75.7, 25712.0], [75.8, 25712.0], [75.9, 25718.0], [76.0, 25718.0], [76.1, 25718.0], [76.2, 25718.0], [76.3, 25732.0], [76.4, 25732.0], [76.5, 25732.0], [76.6, 25732.0], [76.7, 25732.0], [76.8, 25740.0], [76.9, 25740.0], [77.0, 25740.0], [77.1, 25740.0], [77.2, 25740.0], [77.3, 25821.0], [77.4, 25821.0], [77.5, 25821.0], [77.6, 25821.0], [77.7, 25845.0], [77.8, 25845.0], [77.9, 25845.0], [78.0, 25845.0], [78.1, 25845.0], [78.2, 25857.0], [78.3, 25857.0], [78.4, 25857.0], [78.5, 25857.0], [78.6, 25857.0], [78.7, 25861.0], [78.8, 25861.0], [78.9, 25861.0], [79.0, 25861.0], [79.1, 25868.0], [79.2, 25868.0], [79.3, 25868.0], [79.4, 25868.0], [79.5, 25868.0], [79.6, 25878.0], [79.7, 25878.0], [79.8, 25878.0], [79.9, 25878.0], [80.0, 25892.0], [80.1, 25892.0], [80.2, 25892.0], [80.3, 25892.0], [80.4, 25892.0], [80.5, 25895.0], [80.6, 25895.0], [80.7, 25895.0], [80.8, 25895.0], [80.9, 25895.0], [81.0, 25903.0], [81.1, 25903.0], [81.2, 25903.0], [81.3, 25903.0], [81.4, 25922.0], [81.5, 25922.0], [81.6, 25922.0], [81.7, 25922.0], [81.8, 25922.0], [81.9, 25934.0], [82.0, 25934.0], [82.1, 25934.0], [82.2, 25934.0], [82.3, 25934.0], [82.4, 25970.0], [82.5, 25970.0], [82.6, 25970.0], [82.7, 25970.0], [82.8, 26010.0], [82.9, 26010.0], [83.0, 26010.0], [83.1, 26010.0], [83.2, 26010.0], [83.3, 26058.0], [83.4, 26058.0], [83.5, 26058.0], [83.6, 26058.0], [83.7, 26058.0], [83.8, 26063.0], [83.9, 26063.0], [84.0, 26063.0], [84.1, 26063.0], [84.2, 26091.0], [84.3, 26091.0], [84.4, 26091.0], [84.5, 26091.0], [84.6, 26091.0], [84.7, 26112.0], [84.8, 26112.0], [84.9, 26112.0], [85.0, 26112.0], [85.1, 26112.0], [85.2, 26149.0], [85.3, 26149.0], [85.4, 26149.0], [85.5, 26149.0], [85.6, 26214.0], [85.7, 26214.0], [85.8, 26214.0], [85.9, 26214.0], [86.0, 26214.0], [86.1, 26221.0], [86.2, 26221.0], [86.3, 26221.0], [86.4, 26221.0], [86.5, 26221.0], [86.6, 26306.0], [86.7, 26306.0], [86.8, 26306.0], [86.9, 26306.0], [87.0, 26333.0], [87.1, 26333.0], [87.2, 26333.0], [87.3, 26333.0], [87.4, 26333.0], [87.5, 26364.0], [87.6, 26364.0], [87.7, 26364.0], [87.8, 26364.0], [87.9, 26364.0], [88.0, 26367.0], [88.1, 26367.0], [88.2, 26367.0], [88.3, 26367.0], [88.4, 26372.0], [88.5, 26372.0], [88.6, 26372.0], [88.7, 26372.0], [88.8, 26372.0], [88.9, 26377.0], [89.0, 26377.0], [89.1, 26377.0], [89.2, 26377.0], [89.3, 26377.0], [89.4, 26382.0], [89.5, 26382.0], [89.6, 26382.0], [89.7, 26382.0], [89.8, 26386.0], [89.9, 26386.0], [90.0, 26386.0], [90.1, 26386.0], [90.2, 26386.0], [90.3, 26396.0], [90.4, 26396.0], [90.5, 26396.0], [90.6, 26396.0], [90.7, 26421.0], [90.8, 26421.0], [90.9, 26421.0], [91.0, 26421.0], [91.1, 26421.0], [91.2, 26422.0], [91.3, 26422.0], [91.4, 26422.0], [91.5, 26422.0], [91.6, 26422.0], [91.7, 26452.0], [91.8, 26452.0], [91.9, 26452.0], [92.0, 26452.0], [92.1, 26540.0], [92.2, 26540.0], [92.3, 26540.0], [92.4, 26540.0], [92.5, 26540.0], [92.6, 26544.0], [92.7, 26544.0], [92.8, 26544.0], [92.9, 26544.0], [93.0, 26544.0], [93.1, 26578.0], [93.2, 26578.0], [93.3, 26578.0], [93.4, 26578.0], [93.5, 26591.0], [93.6, 26591.0], [93.7, 26591.0], [93.8, 26591.0], [93.9, 26591.0], [94.0, 26613.0], [94.1, 26613.0], [94.2, 26613.0], [94.3, 26613.0], [94.4, 26613.0], [94.5, 26619.0], [94.6, 26619.0], [94.7, 26619.0], [94.8, 26619.0], [94.9, 26690.0], [95.0, 26690.0], [95.1, 26690.0], [95.2, 26690.0], [95.3, 26690.0], [95.4, 26718.0], [95.5, 26718.0], [95.6, 26718.0], [95.7, 26718.0], [95.8, 26718.0], [95.9, 26746.0], [96.0, 26746.0], [96.1, 26746.0], [96.2, 26746.0], [96.3, 26747.0], [96.4, 26747.0], [96.5, 26747.0], [96.6, 26747.0], [96.7, 26747.0], [96.8, 26749.0], [96.9, 26749.0], [97.0, 26749.0], [97.1, 26749.0], [97.2, 26749.0], [97.3, 26809.0], [97.4, 26809.0], [97.5, 26809.0], [97.6, 26809.0], [97.7, 26922.0], [97.8, 26922.0], [97.9, 26922.0], [98.0, 26922.0], [98.1, 26922.0], [98.2, 26966.0], [98.3, 26966.0], [98.4, 26966.0], [98.5, 26966.0], [98.6, 26966.0], [98.7, 26998.0], [98.8, 26998.0], [98.9, 26998.0], [99.0, 26998.0], [99.1, 27041.0], [99.2, 27041.0], [99.3, 27041.0], [99.4, 27041.0], [99.5, 27041.0], [99.6, 27190.0], [99.7, 27190.0], [99.8, 27190.0], [99.9, 27190.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 21.0, "series": [{"data": [[600.0, 9.0], [700.0, 15.0], [800.0, 20.0], [900.0, 12.0], [1000.0, 8.0], [1100.0, 7.0], [1200.0, 7.0], [1300.0, 4.0], [1400.0, 1.0], [1500.0, 2.0], [1600.0, 1.0], [1700.0, 1.0], [2100.0, 1.0], [2200.0, 1.0], [2800.0, 1.0], [4900.0, 1.0], [5100.0, 1.0], [5400.0, 1.0], [6500.0, 1.0], [7000.0, 2.0], [7300.0, 3.0], [7200.0, 1.0], [7400.0, 2.0], [8200.0, 1.0], [8400.0, 1.0], [8800.0, 1.0], [9000.0, 1.0], [9900.0, 1.0], [10100.0, 1.0], [10000.0, 1.0], [10300.0, 1.0], [10900.0, 1.0], [11000.0, 1.0], [11200.0, 1.0], [11500.0, 2.0], [11800.0, 1.0], [13200.0, 2.0], [13100.0, 1.0], [13300.0, 1.0], [13400.0, 1.0], [13800.0, 2.0], [13500.0, 2.0], [14100.0, 1.0], [14800.0, 1.0], [15200.0, 2.0], [15800.0, 1.0], [15500.0, 1.0], [15900.0, 1.0], [16100.0, 1.0], [16300.0, 1.0], [16200.0, 1.0], [16600.0, 2.0], [17100.0, 1.0], [16900.0, 6.0], [16800.0, 3.0], [16700.0, 3.0], [16400.0, 1.0], [16500.0, 2.0], [17500.0, 1.0], [200.0, 20.0], [300.0, 21.0], [400.0, 2.0], [500.0, 18.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[300.0, 16.0], [400.0, 12.0], [500.0, 4.0], [600.0, 4.0], [700.0, 3.0], [800.0, 1.0], [900.0, 1.0], [1200.0, 1.0], [1400.0, 1.0], [1600.0, 1.0], [1800.0, 1.0], [1900.0, 1.0], [2300.0, 1.0], [2600.0, 1.0], [3000.0, 2.0], [3700.0, 1.0], [3800.0, 1.0], [4100.0, 1.0], [4600.0, 1.0], [5000.0, 1.0], [5300.0, 1.0], [5600.0, 1.0], [6100.0, 1.0], [7000.0, 1.0], [7100.0, 1.0], [7600.0, 1.0], [8500.0, 1.0], [8900.0, 1.0], [10300.0, 1.0], [10400.0, 1.0], [10700.0, 1.0], [11000.0, 2.0], [12500.0, 1.0], [14500.0, 2.0], [14700.0, 1.0], [15300.0, 1.0], [15000.0, 1.0], [15200.0, 1.0], [15500.0, 1.0], [15900.0, 1.0], [16300.0, 1.0], [17000.0, 1.0], [16800.0, 1.0], [16700.0, 1.0], [17600.0, 1.0], [18200.0, 2.0], [17800.0, 1.0], [17700.0, 1.0], [18900.0, 1.0], [19000.0, 1.0], [20200.0, 1.0], [20000.0, 2.0], [19800.0, 2.0], [21300.0, 1.0], [20600.0, 1.0], [20700.0, 1.0], [21000.0, 2.0], [20900.0, 1.0], [22500.0, 3.0], [22300.0, 2.0], [22100.0, 1.0], [22400.0, 2.0], [22200.0, 1.0], [22600.0, 1.0], [22900.0, 1.0], [23000.0, 1.0], [22800.0, 1.0], [23500.0, 2.0], [23200.0, 1.0], [23400.0, 1.0], [24200.0, 1.0], [23900.0, 1.0], [23600.0, 2.0], [24000.0, 1.0], [24100.0, 1.0], [24500.0, 2.0], [24400.0, 2.0], [25400.0, 3.0], [24600.0, 4.0], [25000.0, 2.0], [25100.0, 4.0], [25500.0, 3.0], [24900.0, 5.0], [25200.0, 5.0], [25300.0, 3.0], [24800.0, 1.0], [24700.0, 1.0], [25600.0, 4.0], [26500.0, 4.0], [26300.0, 9.0], [25900.0, 4.0], [26000.0, 4.0], [25700.0, 5.0], [26100.0, 2.0], [25800.0, 8.0], [26400.0, 3.0], [26200.0, 2.0], [26600.0, 3.0], [26700.0, 4.0], [26800.0, 1.0], [26900.0, 3.0], [27100.0, 1.0], [27000.0, 1.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 27100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 241.0, "series": [{"data": [[0.0, 73.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 114.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 241.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.654607031E12, "maxY": 1.923076923076923, "series": [{"data": [[1.654607085E12, 1.0], [1.6546070625E12, 1.3333333333333333], [1.654607088E12, 1.0], [1.6546070655E12, 1.8333333333333335], [1.654607043E12, 1.5333333333333334], [1.6546070685E12, 1.3333333333333333], [1.654607046E12, 1.7692307692307692], [1.6546070715E12, 1.4545454545454544], [1.654607049E12, 1.7857142857142856], [1.6546070745E12, 1.5555555555555556], [1.654607052E12, 1.7999999999999996], [1.654607055E12, 1.923076923076923], [1.6546070325E12, 1.4], [1.654607058E12, 1.7333333333333332], [1.6546070355E12, 1.5714285714285714], [1.6546070775E12, 1.5333333333333334], [1.654607061E12, 1.5], [1.6546070385E12, 1.5555555555555556], [1.6546070805E12, 1.538461538461538], [1.654607064E12, 1.375], [1.6546070415E12, 1.5], [1.6546070835E12, 1.0], [1.6546070445E12, 1.6], [1.6546070865E12, 1.0], [1.6546070475E12, 1.6666666666666665], [1.6546070895E12, 1.0], [1.654607067E12, 1.5555555555555556], [1.6546070505E12, 1.8181818181818181], [1.65460707E12, 1.5714285714285714], [1.654607031E12, 1.6], [1.654607073E12, 1.3333333333333333], [1.654607034E12, 1.5], [1.654607076E12, 1.3636363636363635], [1.6546070535E12, 1.857142857142857], [1.654607037E12, 1.4444444444444444], [1.654607079E12, 1.5833333333333335], [1.6546070565E12, 1.857142857142857], [1.65460704E12, 1.5], [1.654607082E12, 1.0], [1.6546070595E12, 1.8571428571428572]], "isOverall": false, "label": "parallel bzm - Parallel", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6546070895E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 237.94117647058823, "minX": 1.0, "maxY": 27190.0, "series": [{"data": [[2.0, 373.50000000000006], [3.0, 355.44444444444446], [5.0, 473.5], [6.0, 592.0], [7.0, 543.0], [8.0, 594.0], [9.0, 594.0], [10.0, 528.0], [11.0, 529.0], [12.0, 546.5], [13.0, 549.0], [14.0, 529.5], [15.0, 517.0], [16.0, 577.5], [18.0, 608.5], [19.0, 569.0], [20.0, 710.0], [22.0, 653.0], [23.0, 780.0], [24.0, 649.0], [25.0, 773.5], [26.0, 702.0], [27.0, 704.5], [29.0, 711.0], [31.0, 757.0], [33.0, 856.0], [34.0, 855.5], [35.0, 805.0], [36.0, 770.0], [37.0, 859.0], [39.0, 1081.0], [40.0, 1048.0], [41.0, 1099.5], [42.0, 923.0], [43.0, 895.0], [45.0, 992.0], [46.0, 975.5], [48.0, 806.0], [49.0, 1209.0], [50.0, 908.0], [51.0, 972.0], [52.0, 866.0], [53.0, 775.0], [54.0, 731.0], [55.0, 769.0], [57.0, 868.0], [58.0, 880.0], [59.0, 886.0], [60.0, 963.0], [61.0, 839.0], [62.0, 909.0], [64.0, 975.0], [65.0, 970.0], [66.0, 845.0], [67.0, 1010.0], [68.0, 904.3333333333334], [70.0, 1061.0], [72.0, 1028.5], [73.0, 1021.0], [75.0, 1008.0], [76.0, 891.0], [77.0, 1236.0], [79.0, 977.0], [81.0, 1306.0], [82.0, 1256.0], [83.0, 16512.0], [84.0, 7370.0], [85.0, 11500.333333333334], [86.0, 1161.0], [87.0, 16756.0], [88.0, 1303.0], [89.0, 8997.5], [91.0, 1539.5], [90.0, 16945.0], [92.0, 11696.666666666666], [93.0, 10780.6], [94.0, 9079.5], [95.0, 16370.666666666666], [99.0, 16929.5], [101.0, 8829.666666666666], [103.0, 14806.0], [100.0, 16256.0], [105.0, 15835.0], [111.0, 2878.0], [110.0, 13489.5], [109.0, 13535.0], [113.0, 13948.666666666666], [117.0, 13290.25], [123.0, 11244.0], [121.0, 11643.0], [127.0, 10309.0], [125.0, 10982.0], [129.0, 4921.0], [135.0, 7877.0], [134.0, 8691.0], [131.0, 9044.0], [130.0, 9944.0], [128.0, 10091.5], [136.0, 6388.5], [137.0, 6302.5], [139.0, 7062.0], [138.0, 7215.0], [1.0, 237.94117647058823]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[58.083720930232595, 4349.627906976744]], "isOverall": false, "label": "/api/statistics/neighbourhoods-Aggregated", "isController": false}, {"data": [[2.0, 2043.9375], [3.0, 4686.833333333334], [4.0, 4216.285714285714], [5.0, 13215.5], [6.0, 13357.0], [7.0, 13425.5], [8.0, 25821.0], [9.0, 13672.0], [10.0, 26058.0], [11.0, 13900.0], [12.0, 14108.0], [13.0, 26306.0], [14.0, 26112.0], [15.0, 14358.0], [16.0, 14518.0], [17.0, 26452.0], [18.0, 27041.0], [19.0, 14718.5], [20.0, 14814.5], [21.0, 26966.0], [22.0, 26922.0], [23.0, 27190.0], [24.0, 26333.0], [25.0, 15097.0], [26.0, 15247.5], [27.0, 15558.0], [28.0, 26578.0], [29.0, 25718.0], [30.0, 26749.0], [31.0, 26809.0], [32.0, 15686.0], [33.0, 26746.0], [35.0, 15816.0], [34.0, 26747.0], [37.0, 15873.0], [36.0, 26718.0], [39.0, 26396.0], [38.0, 26214.0], [40.0, 15850.0], [41.0, 25892.0], [43.0, 25878.0], [42.0, 25922.0], [45.0, 15993.0], [44.0, 25857.0], [47.0, 26372.0], [46.0, 25630.0], [49.0, 25194.0], [48.0, 25582.0], [51.0, 25071.0], [50.0, 24779.0], [52.0, 16360.5], [53.0, 16421.5], [55.0, 25868.0], [54.0, 25188.0], [57.0, 24485.0], [56.0, 24479.0], [59.0, 16741.5], [58.0, 25484.0], [61.0, 24687.5], [63.0, 26149.0], [62.0, 26386.0], [67.0, 24988.0], [66.0, 25483.0], [65.0, 25289.0], [64.0, 25903.0], [69.0, 16018.5], [71.0, 25269.0], [70.0, 25640.0], [68.0, 24634.0], [73.0, 17050.5], [75.0, 26091.0], [74.0, 25712.0], [72.0, 24924.0], [79.0, 25380.0], [78.0, 25241.0], [77.0, 26010.0], [76.0, 25324.0], [83.0, 17673.0], [82.0, 26364.0], [81.0, 25283.0], [80.0, 25934.0], [87.0, 24976.0], [86.0, 25649.0], [85.0, 24682.0], [84.0, 26591.0], [88.0, 16897.0], [91.0, 25141.0], [90.0, 24955.0], [89.0, 24673.0], [92.0, 17862.0], [93.0, 17803.5], [95.0, 13174.0], [94.0, 26544.0], [99.0, 23633.0], [98.0, 22376.0], [97.0, 24625.0], [96.0, 24108.0], [103.0, 24022.0], [102.0, 22841.0], [101.0, 23541.0], [100.0, 23599.0], [107.0, 24225.0], [106.0, 23088.0], [105.0, 23990.0], [104.0, 23640.0], [111.0, 17604.0], [110.0, 22267.0], [109.0, 22551.0], [108.0, 22946.0], [115.0, 22148.0], [114.0, 22593.0], [113.0, 22494.0], [112.0, 22437.0], [119.0, 20963.0], [118.0, 21057.0], [117.0, 22565.0], [116.0, 22345.0], [123.0, 21342.0], [122.0, 20606.0], [121.0, 20756.0], [120.0, 21095.0], [127.0, 20082.0], [126.0, 19848.0], [125.0, 19856.0], [124.0, 20014.0], [129.0, 16796.0], [134.0, 16409.5], [135.0, 17686.0], [133.0, 17802.0], [132.0, 18221.0], [131.0, 18922.0], [130.0, 17753.0], [128.0, 20212.0], [136.0, 15734.5], [137.0, 16092.5], [140.0, 15293.5], [141.0, 15921.0], [139.0, 16318.0], [138.0, 17054.0], [1.0, 2039.2666666666667]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}, {"data": [[55.93488372093021, 16999.51162790698]], "isOverall": false, "label": "/api/listings?geojson=true-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 141.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 194.66666666666666, "minX": 1.654607031E12, "maxY": 8337506.666666667, "series": [{"data": [[1.654607085E12, 2918127.3333333335], [1.6546070625E12, 834208.6666666666], [1.654607088E12, 6253130.0], [1.6546070655E12, 419165.3333333333], [1.654607043E12, 2921791.3333333335], [1.6546070685E12, 1668417.3333333333], [1.654607046E12, 1255206.0], [1.6546070715E12, 2503542.0], [1.654607049E12, 1255664.0], [1.6546070745E12, 1669791.3333333333], [1.654607052E12, 1256122.0], [1.654607055E12, 422371.3333333333], [1.6546070325E12, 1251542.0], [1.654607058E12, 1672539.3333333333], [1.6546070355E12, 1252458.0], [1.6546070775E12, 2921791.3333333335], [1.654607061E12, 417333.3333333333], [1.6546070385E12, 1669791.3333333333], [1.6546070805E12, 5008916.0], [1.654607064E12, 2085750.6666666667], [1.6546070415E12, 2504000.0], [1.6546070835E12, 8337506.666666667], [1.6546070445E12, 1670249.3333333333], [1.6546070865E12, 3335002.6666666665], [1.6546070475E12, 1671165.3333333333], [1.6546070895E12, 8337506.666666667], [1.654607067E12, 1669791.3333333333], [1.6546070505E12, 837872.6666666666], [1.65460707E12, 1252458.0], [1.654607031E12, 835124.6666666666], [1.654607073E12, 1668417.3333333333], [1.654607034E12, 1252000.0], [1.654607076E12, 2919959.3333333335], [1.6546070535E12, 839246.6666666666], [1.654607037E12, 2086208.6666666667], [1.654607079E12, 2093588.0], [1.6546070565E12, 839246.6666666666], [1.65460704E12, 2504000.0], [1.654607082E12, 4585628.666666667], [1.6546070595E12, 419623.3333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.654607085E12, 672.0], [1.6546070625E12, 290.6666666666667], [1.654607088E12, 1440.0], [1.6546070655E12, 589.3333333333334], [1.654607043E12, 1461.3333333333333], [1.6546070685E12, 581.3333333333334], [1.654607046E12, 1274.6666666666667], [1.6546070715E12, 1069.3333333333333], [1.654607049E12, 1373.3333333333333], [1.6546070745E12, 877.3333333333334], [1.654607052E12, 1472.0], [1.654607055E12, 1280.0], [1.6546070325E12, 485.3333333333333], [1.654607058E12, 1469.3333333333333], [1.6546070355E12, 682.6666666666666], [1.6546070775E12, 1461.3333333333333], [1.654607061E12, 194.66666666666666], [1.6546070385E12, 877.3333333333334], [1.6546070805E12, 2533.3333333333335], [1.654607064E12, 776.0], [1.6546070415E12, 1168.0], [1.6546070835E12, 1920.0], [1.6546070445E12, 976.0], [1.6546070865E12, 768.0], [1.6546070475E12, 1173.3333333333333], [1.6546070895E12, 1920.0], [1.654607067E12, 877.3333333333334], [1.6546070505E12, 1080.0], [1.65460707E12, 682.6666666666666], [1.654607031E12, 488.0], [1.654607073E12, 581.3333333333334], [1.654607034E12, 584.0], [1.654607076E12, 1066.6666666666667], [1.6546070535E12, 1376.0], [1.654607037E12, 874.6666666666666], [1.654607079E12, 1168.0], [1.6546070565E12, 1376.0], [1.65460704E12, 1168.0], [1.654607082E12, 1056.0], [1.6546070595E12, 688.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6546070895E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 226.5, "minX": 1.654607031E12, "maxY": 26673.266666666666, "series": [{"data": [[1.6546070625E12, 4921.0], [1.6546070655E12, 7221.4], [1.654607043E12, 350.75], [1.6546070685E12, 8969.5], [1.654607046E12, 550.9], [1.6546070715E12, 11253.8], [1.654607049E12, 718.3636363636364], [1.6546070745E12, 13520.6], [1.654607052E12, 1018.2500000000002], [1.654607055E12, 911.5], [1.6546070325E12, 226.5], [1.654607058E12, 1290.4545454545453], [1.6546070355E12, 246.0], [1.6546070775E12, 15824.124999999998], [1.654607061E12, 2878.0], [1.6546070385E12, 267.8], [1.6546070805E12, 16756.57142857143], [1.654607064E12, 5715.0], [1.6546070415E12, 318.0], [1.6546070445E12, 503.0], [1.6546070475E12, 594.6249999999999], [1.654607067E12, 7809.8], [1.6546070505E12, 786.4444444444445], [1.65460707E12, 10109.0], [1.654607031E12, 528.3333333333334], [1.654607073E12, 12575.0], [1.654607034E12, 238.33333333333334], [1.654607076E12, 13659.0], [1.6546070535E12, 855.9166666666666], [1.654607037E12, 236.75], [1.654607079E12, 16701.333333333336], [1.6546070565E12, 1032.8333333333333], [1.65460704E12, 348.3333333333333], [1.6546070595E12, 1756.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.654607085E12, 25610.714285714286], [1.6546070625E12, 14555.5], [1.654607088E12, 26673.266666666666], [1.6546070655E12, 16318.0], [1.654607043E12, 628.0], [1.6546070685E12, 18292.5], [1.654607046E12, 1758.0], [1.6546070715E12, 20291.333333333336], [1.654607049E12, 3922.3333333333335], [1.6546070745E12, 22412.75], [1.654607052E12, 5695.333333333333], [1.654607055E12, 7638.0], [1.6546070325E12, 415.6666666666667], [1.654607058E12, 10660.75], [1.6546070355E12, 319.0], [1.6546070775E12, 23531.57142857143], [1.654607061E12, 12523.0], [1.6546070385E12, 341.75], [1.6546070805E12, 25071.583333333336], [1.654607064E12, 15325.2], [1.6546070415E12, 443.0], [1.6546070835E12, 25258.5], [1.6546070445E12, 969.5], [1.6546070865E12, 26188.125], [1.6546070475E12, 2788.0], [1.6546070895E12, 26003.699999999997], [1.654607067E12, 17069.0], [1.6546070505E12, 4850.5], [1.65460707E12, 19013.333333333332], [1.654607031E12, 1219.5], [1.654607073E12, 20967.75], [1.654607034E12, 328.6666666666667], [1.654607076E12, 22800.714285714286], [1.6546070535E12, 7061.5], [1.654607037E12, 323.8], [1.654607079E12, 22758.666666666664], [1.6546070565E12, 8762.0], [1.65460704E12, 474.0], [1.654607082E12, 25483.636363636364], [1.6546070595E12, 11082.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6546070895E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 226.5, "minX": 1.654607031E12, "maxY": 26671.733333333334, "series": [{"data": [[1.6546070625E12, 4921.0], [1.6546070655E12, 7221.2], [1.654607043E12, 350.5], [1.6546070685E12, 8969.5], [1.654607046E12, 550.9], [1.6546070715E12, 11253.8], [1.654607049E12, 718.1818181818181], [1.6546070745E12, 13520.6], [1.654607052E12, 1018.2500000000002], [1.654607055E12, 911.5], [1.6546070325E12, 226.5], [1.654607058E12, 1290.2727272727273], [1.6546070355E12, 246.0], [1.6546070775E12, 15824.0], [1.654607061E12, 2878.0], [1.6546070385E12, 267.8], [1.6546070805E12, 16756.57142857143], [1.654607064E12, 5715.0], [1.6546070415E12, 318.0], [1.6546070445E12, 503.0], [1.6546070475E12, 594.375], [1.654607067E12, 7809.8], [1.6546070505E12, 786.4444444444445], [1.65460707E12, 10109.0], [1.654607031E12, 527.6666666666666], [1.654607073E12, 12575.0], [1.654607034E12, 238.0], [1.654607076E12, 13659.0], [1.6546070535E12, 855.75], [1.654607037E12, 236.75], [1.654607079E12, 16701.333333333336], [1.6546070565E12, 1032.8333333333333], [1.65460704E12, 348.1666666666667], [1.6546070595E12, 1756.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.654607085E12, 25609.571428571428], [1.6546070625E12, 14460.0], [1.654607088E12, 26671.733333333334], [1.6546070655E12, 16316.0], [1.654607043E12, 626.7142857142857], [1.6546070685E12, 18291.0], [1.654607046E12, 1756.3333333333333], [1.6546070715E12, 20289.0], [1.654607049E12, 3920.3333333333335], [1.6546070745E12, 22411.0], [1.654607052E12, 5693.333333333333], [1.654607055E12, 7636.0], [1.6546070325E12, 414.3333333333333], [1.654607058E12, 10659.25], [1.6546070355E12, 318.0], [1.6546070775E12, 23501.0], [1.654607061E12, 12520.0], [1.6546070385E12, 340.5], [1.6546070805E12, 25068.58333333333], [1.654607064E12, 15317.2], [1.6546070415E12, 441.3333333333333], [1.6546070835E12, 25256.8], [1.6546070445E12, 967.75], [1.6546070865E12, 26186.875], [1.6546070475E12, 2786.25], [1.6546070895E12, 26001.049999999996], [1.654607067E12, 17067.25], [1.6546070505E12, 4848.5], [1.65460707E12, 19011.333333333332], [1.654607031E12, 1216.0], [1.654607073E12, 20966.0], [1.654607034E12, 327.0], [1.654607076E12, 22799.0], [1.6546070535E12, 7060.0], [1.654607037E12, 322.8], [1.654607079E12, 22757.0], [1.6546070565E12, 8761.0], [1.65460704E12, 472.83333333333337], [1.654607082E12, 25482.181818181816], [1.6546070595E12, 11080.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6546070895E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.654607031E12, "maxY": 766.25, "series": [{"data": [[1.6546070625E12, 29.0], [1.6546070655E12, 14.6], [1.654607043E12, 9.25], [1.6546070685E12, 38.5], [1.654607046E12, 12.2], [1.6546070715E12, 59.8], [1.654607049E12, 12.454545454545451], [1.6546070745E12, 38.6], [1.654607052E12, 21.166666666666668], [1.654607055E12, 22.0], [1.6546070325E12, 6.0], [1.654607058E12, 19.636363636363637], [1.6546070355E12, 6.25], [1.6546070775E12, 766.25], [1.654607061E12, 10.0], [1.6546070385E12, 6.4], [1.6546070805E12, 38.714285714285715], [1.654607064E12, 10.333333333333334], [1.6546070415E12, 13.833333333333334], [1.6546070445E12, 23.666666666666664], [1.6546070475E12, 16.875], [1.654607067E12, 28.2], [1.6546070505E12, 14.0], [1.65460707E12, 121.75], [1.654607031E12, 16.0], [1.654607073E12, 352.0], [1.654607034E12, 6.333333333333333], [1.654607076E12, 326.25], [1.6546070535E12, 15.333333333333334], [1.654607037E12, 6.25], [1.654607079E12, 366.1666666666667], [1.6546070565E12, 19.333333333333336], [1.65460704E12, 13.5], [1.6546070595E12, 21.833333333333336]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.654607085E12, 60.14285714285714], [1.6546070625E12, 11.0], [1.654607088E12, 568.0666666666667], [1.6546070655E12, 10.0], [1.654607043E12, 9.142857142857142], [1.6546070685E12, 17.0], [1.654607046E12, 26.0], [1.6546070715E12, 23.0], [1.654607049E12, 10.333333333333334], [1.6546070745E12, 21.75], [1.654607052E12, 10.0], [1.654607055E12, 12.0], [1.6546070325E12, 6.0], [1.654607058E12, 19.75], [1.6546070355E12, 6.666666666666667], [1.6546070775E12, 10.142857142857142], [1.654607061E12, 19.0], [1.6546070385E12, 6.0], [1.6546070805E12, 26.333333333333332], [1.654607064E12, 9.4], [1.6546070415E12, 13.666666666666668], [1.6546070835E12, 26.100000000000005], [1.6546070445E12, 18.0], [1.6546070865E12, 137.375], [1.6546070475E12, 11.25], [1.6546070895E12, 84.70000000000002], [1.654607067E12, 17.5], [1.6546070505E12, 21.5], [1.65460707E12, 10.333333333333334], [1.654607031E12, 20.5], [1.654607073E12, 18.5], [1.654607034E12, 6.0], [1.654607076E12, 14.285714285714286], [1.6546070535E12, 10.0], [1.654607037E12, 6.2], [1.654607079E12, 21.0], [1.6546070565E12, 25.5], [1.65460704E12, 13.166666666666666], [1.654607082E12, 25.90909090909091], [1.6546070595E12, 11.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6546070895E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 200.0, "minX": 1.654607031E12, "maxY": 27190.0, "series": [{"data": [[1.654607085E12, 26372.0], [1.6546070625E12, 14594.0], [1.654607088E12, 27190.0], [1.6546070655E12, 16318.0], [1.654607043E12, 718.0], [1.6546070685E12, 18922.0], [1.654607046E12, 1995.0], [1.6546070715E12, 21342.0], [1.654607049E12, 4118.0], [1.6546070745E12, 22593.0], [1.654607052E12, 6125.0], [1.654607055E12, 7638.0], [1.6546070325E12, 537.0], [1.654607058E12, 11068.0], [1.6546070355E12, 335.0], [1.6546070775E12, 24022.0], [1.654607061E12, 12523.0], [1.6546070385E12, 384.0], [1.6546070805E12, 26591.0], [1.654607064E12, 15921.0], [1.6546070415E12, 498.0], [1.6546070835E12, 26386.0], [1.6546070445E12, 1220.0], [1.6546070865E12, 26718.0], [1.6546070475E12, 3089.0], [1.6546070895E12, 27041.0], [1.654607067E12, 17686.0], [1.6546070505E12, 5019.0], [1.65460707E12, 20212.0], [1.654607031E12, 1673.0], [1.654607073E12, 21095.0], [1.654607034E12, 348.0], [1.654607076E12, 24225.0], [1.6546070535E12, 7103.0], [1.654607037E12, 333.0], [1.654607079E12, 26544.0], [1.6546070565E12, 8949.0], [1.65460704E12, 510.0], [1.654607082E12, 26091.0], [1.6546070595E12, 11082.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.654607085E12, 26372.0], [1.6546070625E12, 14594.0], [1.654607088E12, 27074.8], [1.6546070655E12, 16318.0], [1.654607043E12, 687.4], [1.6546070685E12, 18922.0], [1.654607046E12, 1929.0], [1.6546070715E12, 21194.8], [1.654607049E12, 3997.0], [1.6546070745E12, 22593.0], [1.654607052E12, 5832.2], [1.654607055E12, 4993.199999999997], [1.6546070325E12, 537.0], [1.654607058E12, 10858.0], [1.6546070355E12, 335.0], [1.6546070775E12, 24002.8], [1.654607061E12, 12523.0], [1.6546070385E12, 384.0], [1.6546070805E12, 25863.5], [1.654607064E12, 15921.0], [1.6546070415E12, 483.6], [1.6546070835E12, 26124.4], [1.6546070445E12, 1196.2], [1.6546070865E12, 26718.0], [1.6546070475E12, 3083.3], [1.6546070895E12, 26531.2], [1.654607067E12, 17686.0], [1.6546070505E12, 4951.6], [1.65460707E12, 20212.0], [1.654607031E12, 1673.0], [1.654607073E12, 21095.0], [1.654607034E12, 348.0], [1.654607076E12, 23969.2], [1.6546070535E12, 7061.5], [1.654607037E12, 333.0], [1.654607079E12, 26352.100000000002], [1.6546070565E12, 8762.0], [1.65460704E12, 502.8], [1.654607082E12, 26074.8], [1.6546070595E12, 11082.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.654607085E12, 26372.0], [1.6546070625E12, 14594.0], [1.654607088E12, 27190.0], [1.6546070655E12, 16318.0], [1.654607043E12, 718.0], [1.6546070685E12, 18922.0], [1.654607046E12, 1995.0], [1.6546070715E12, 21342.0], [1.654607049E12, 4118.0], [1.6546070745E12, 22593.0], [1.654607052E12, 6125.0], [1.654607055E12, 7638.0], [1.6546070325E12, 537.0], [1.654607058E12, 11068.0], [1.6546070355E12, 335.0], [1.6546070775E12, 24022.0], [1.654607061E12, 12523.0], [1.6546070385E12, 384.0], [1.6546070805E12, 26591.0], [1.654607064E12, 15921.0], [1.6546070415E12, 498.0], [1.6546070835E12, 26386.0], [1.6546070445E12, 1220.0], [1.6546070865E12, 26718.0], [1.6546070475E12, 3089.0], [1.6546070895E12, 27041.0], [1.654607067E12, 17686.0], [1.6546070505E12, 5019.0], [1.65460707E12, 20212.0], [1.654607031E12, 1673.0], [1.654607073E12, 21095.0], [1.654607034E12, 348.0], [1.654607076E12, 24225.0], [1.6546070535E12, 7103.0], [1.654607037E12, 333.0], [1.654607079E12, 26544.0], [1.6546070565E12, 8949.0], [1.65460704E12, 510.0], [1.654607082E12, 26091.0], [1.6546070595E12, 11082.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.654607085E12, 26372.0], [1.6546070625E12, 14594.0], [1.654607088E12, 27190.0], [1.6546070655E12, 16318.0], [1.654607043E12, 718.0], [1.6546070685E12, 18922.0], [1.654607046E12, 1995.0], [1.6546070715E12, 21342.0], [1.654607049E12, 4118.0], [1.6546070745E12, 22593.0], [1.654607052E12, 6125.0], [1.654607055E12, 7638.0], [1.6546070325E12, 537.0], [1.654607058E12, 11068.0], [1.6546070355E12, 335.0], [1.6546070775E12, 24022.0], [1.654607061E12, 12523.0], [1.6546070385E12, 384.0], [1.6546070805E12, 26511.55], [1.654607064E12, 15921.0], [1.6546070415E12, 498.0], [1.6546070835E12, 26374.15], [1.6546070445E12, 1220.0], [1.6546070865E12, 26718.0], [1.6546070475E12, 3089.0], [1.6546070895E12, 27015.95], [1.654607067E12, 17686.0], [1.6546070505E12, 5019.0], [1.65460707E12, 20212.0], [1.654607031E12, 1673.0], [1.654607073E12, 21095.0], [1.654607034E12, 348.0], [1.654607076E12, 24225.0], [1.6546070535E12, 7103.0], [1.654607037E12, 333.0], [1.654607079E12, 26544.0], [1.6546070565E12, 8949.0], [1.65460704E12, 510.0], [1.654607082E12, 26091.0], [1.6546070595E12, 11082.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.654607085E12, 24779.0], [1.6546070625E12, 4921.0], [1.654607088E12, 25718.0], [1.6546070655E12, 7014.0], [1.654607043E12, 331.0], [1.6546070685E12, 8895.0], [1.654607046E12, 494.0], [1.6546070715E12, 10915.0], [1.654607049E12, 649.0], [1.6546070745E12, 13183.0], [1.654607052E12, 859.0], [1.654607055E12, 792.0], [1.6546070325E12, 221.0], [1.654607058E12, 1121.0], [1.6546070355E12, 227.0], [1.6546070775E12, 14806.0], [1.654607061E12, 2878.0], [1.6546070385E12, 240.0], [1.6546070805E12, 16491.0], [1.654607064E12, 5164.0], [1.6546070415E12, 290.0], [1.6546070835E12, 23462.0], [1.6546070445E12, 393.0], [1.6546070865E12, 25878.0], [1.6546070475E12, 517.0], [1.6546070895E12, 25268.0], [1.654607067E12, 7367.0], [1.6546070505E12, 692.0], [1.65460707E12, 9944.0], [1.654607031E12, 200.0], [1.654607073E12, 11868.0], [1.654607034E12, 224.0], [1.654607076E12, 13391.0], [1.6546070535E12, 714.0], [1.654607037E12, 227.0], [1.654607079E12, 16253.0], [1.6546070565E12, 741.0], [1.65460704E12, 306.0], [1.654607082E12, 24924.0], [1.6546070595E12, 1244.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.654607085E12, 25630.0], [1.6546070625E12, 14517.0], [1.654607088E12, 26746.0], [1.6546070655E12, 7315.0], [1.654607043E12, 390.0], [1.6546070685E12, 18011.5], [1.654607046E12, 565.0], [1.6546070715E12, 19848.0], [1.654607049E12, 728.0], [1.6546070745E12, 13886.0], [1.654607052E12, 1025.0], [1.654607055E12, 886.0], [1.6546070325E12, 305.0], [1.654607058E12, 1308.0], [1.6546070355E12, 267.0], [1.6546070775E12, 16674.0], [1.654607061E12, 7700.5], [1.6546070385E12, 305.0], [1.6546070805E12, 16933.0], [1.654607064E12, 14905.0], [1.6546070415E12, 379.5], [1.6546070835E12, 25386.0], [1.6546070445E12, 574.5], [1.6546070865E12, 26138.5], [1.6546070475E12, 612.0], [1.6546070895E12, 26014.0], [1.654607067E12, 8487.0], [1.6546070505E12, 805.0], [1.65460707E12, 10309.0], [1.654607031E12, 766.0], [1.654607073E12, 20859.5], [1.654607034E12, 282.0], [1.654607076E12, 22437.0], [1.6546070535E12, 862.5], [1.654607037E12, 312.0], [1.654607079E12, 19984.5], [1.6546070565E12, 1074.5], [1.65460704E12, 398.5], [1.654607082E12, 25324.0], [1.6546070595E12, 1773.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6546070895E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 319.0, "minX": 2.0, "maxY": 26382.0, "series": [{"data": [[2.0, 1707.5], [8.0, 723.5], [9.0, 896.0], [10.0, 947.5], [11.0, 24250.5], [3.0, 13194.5], [13.0, 25289.0], [14.0, 16781.0], [4.0, 319.0], [18.0, 17294.5], [19.0, 26382.0], [5.0, 18225.0], [6.0, 7413.5], [7.0, 14860.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[18.0, 15266.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 19.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 317.5, "minX": 2.0, "maxY": 26380.0, "series": [{"data": [[2.0, 1707.0], [8.0, 723.0], [9.0, 896.0], [10.0, 947.5], [11.0, 24237.5], [3.0, 13194.5], [13.0, 25287.0], [14.0, 16781.0], [4.0, 317.5], [18.0, 17294.5], [19.0, 26380.0], [5.0, 18224.0], [6.0, 7413.0], [7.0, 14860.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[18.0, 15266.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 19.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.6546070295E12, "maxY": 20.0, "series": [{"data": [[1.654607064E12, 13.333333333333334], [1.6546070415E12, 9.333333333333334], [1.6546070625E12, 20.0], [1.6546070445E12, 10.666666666666666], [1.654607043E12, 10.666666666666666], [1.6546070475E12, 13.333333333333334], [1.654607046E12, 12.0], [1.6546070505E12, 16.0], [1.654607049E12, 13.333333333333334], [1.654607031E12, 2.6666666666666665], [1.654607052E12, 16.0], [1.6546070295E12, 1.3333333333333333], [1.654607034E12, 4.0], [1.654607055E12, 17.333333333333332], [1.6546070325E12, 2.6666666666666665], [1.6546070535E12, 17.333333333333332], [1.654607037E12, 5.333333333333333], [1.654607058E12, 20.0], [1.6546070355E12, 6.666666666666667], [1.6546070565E12, 20.0], [1.65460704E12, 8.0], [1.654607061E12, 20.0], [1.6546070385E12, 6.666666666666667], [1.6546070595E12, 20.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654607064E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.654607031E12, "maxY": 17.333333333333332, "series": [{"data": [[1.654607085E12, 4.666666666666667], [1.6546070625E12, 2.0], [1.654607088E12, 10.0], [1.6546070655E12, 4.0], [1.654607043E12, 10.0], [1.6546070685E12, 4.0], [1.654607046E12, 8.666666666666666], [1.6546070715E12, 7.333333333333333], [1.654607049E12, 9.333333333333334], [1.6546070745E12, 6.0], [1.654607052E12, 10.0], [1.654607055E12, 8.666666666666666], [1.6546070325E12, 3.3333333333333335], [1.654607058E12, 10.0], [1.6546070355E12, 4.666666666666667], [1.6546070775E12, 10.0], [1.654607061E12, 1.3333333333333333], [1.6546070385E12, 6.0], [1.6546070805E12, 17.333333333333332], [1.654607064E12, 5.333333333333333], [1.6546070415E12, 8.0], [1.6546070835E12, 13.333333333333334], [1.6546070445E12, 6.666666666666667], [1.6546070865E12, 5.333333333333333], [1.6546070475E12, 8.0], [1.6546070895E12, 13.333333333333334], [1.654607067E12, 6.0], [1.6546070505E12, 7.333333333333333], [1.65460707E12, 4.666666666666667], [1.654607031E12, 3.3333333333333335], [1.654607073E12, 4.0], [1.654607034E12, 4.0], [1.654607076E12, 7.333333333333333], [1.6546070535E12, 9.333333333333334], [1.654607037E12, 6.0], [1.654607079E12, 6.666666666666667], [1.6546070565E12, 9.333333333333334], [1.65460704E12, 8.0], [1.654607082E12, 7.333333333333333], [1.6546070595E12, 4.666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.654607079E12, 1.3333333333333333]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6546070895E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.654607031E12, "maxY": 13.333333333333334, "series": [{"data": [[1.6546070625E12, 0.6666666666666666], [1.6546070655E12, 3.3333333333333335], [1.654607043E12, 5.333333333333333], [1.6546070685E12, 1.3333333333333333], [1.654607046E12, 6.666666666666667], [1.6546070715E12, 3.3333333333333335], [1.654607049E12, 7.333333333333333], [1.6546070745E12, 3.3333333333333335], [1.654607052E12, 8.0], [1.654607055E12, 8.0], [1.6546070325E12, 1.3333333333333333], [1.654607058E12, 7.333333333333333], [1.6546070355E12, 2.6666666666666665], [1.6546070775E12, 5.333333333333333], [1.654607061E12, 0.6666666666666666], [1.6546070385E12, 3.3333333333333335], [1.6546070805E12, 9.333333333333334], [1.654607064E12, 2.0], [1.6546070415E12, 4.0], [1.6546070445E12, 4.0], [1.6546070475E12, 5.333333333333333], [1.654607067E12, 3.3333333333333335], [1.6546070505E12, 6.0], [1.65460707E12, 2.6666666666666665], [1.654607031E12, 2.0], [1.654607073E12, 1.3333333333333333], [1.654607034E12, 2.0], [1.654607076E12, 2.6666666666666665], [1.6546070535E12, 8.0], [1.654607037E12, 2.6666666666666665], [1.654607079E12, 3.3333333333333335], [1.6546070565E12, 8.0], [1.65460704E12, 4.0], [1.6546070595E12, 4.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods-success", "isController": false}, {"data": [[1.654607085E12, 4.666666666666667], [1.6546070625E12, 1.3333333333333333], [1.654607088E12, 10.0], [1.6546070655E12, 0.6666666666666666], [1.654607043E12, 4.666666666666667], [1.6546070685E12, 2.6666666666666665], [1.654607046E12, 2.0], [1.6546070715E12, 4.0], [1.654607049E12, 2.0], [1.6546070745E12, 2.6666666666666665], [1.654607052E12, 2.0], [1.654607055E12, 0.6666666666666666], [1.6546070325E12, 2.0], [1.654607058E12, 2.6666666666666665], [1.6546070355E12, 2.0], [1.6546070775E12, 4.666666666666667], [1.654607061E12, 0.6666666666666666], [1.6546070385E12, 2.6666666666666665], [1.6546070805E12, 8.0], [1.654607064E12, 3.3333333333333335], [1.6546070415E12, 4.0], [1.6546070835E12, 13.333333333333334], [1.6546070445E12, 2.6666666666666665], [1.6546070865E12, 5.333333333333333], [1.6546070475E12, 2.6666666666666665], [1.6546070895E12, 13.333333333333334], [1.654607067E12, 2.6666666666666665], [1.6546070505E12, 1.3333333333333333], [1.65460707E12, 2.0], [1.654607031E12, 1.3333333333333333], [1.654607073E12, 2.6666666666666665], [1.654607034E12, 2.0], [1.654607076E12, 4.666666666666667], [1.6546070535E12, 1.3333333333333333], [1.654607037E12, 3.3333333333333335], [1.654607079E12, 3.3333333333333335], [1.6546070565E12, 1.3333333333333333], [1.65460704E12, 4.0], [1.654607082E12, 7.333333333333333], [1.6546070595E12, 0.6666666666666666]], "isOverall": false, "label": "/api/listings?geojson=true-success", "isController": false}, {"data": [[1.654607079E12, 0.6666666666666666]], "isOverall": false, "label": "/api/listings?geojson=true-failure", "isController": false}, {"data": [[1.654607079E12, 0.6666666666666666]], "isOverall": false, "label": "/api/statistics/neighbourhoods-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6546070895E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.654607031E12, "maxY": 17.333333333333332, "series": [{"data": [[1.654607085E12, 4.666666666666667], [1.6546070625E12, 2.0], [1.654607088E12, 10.0], [1.6546070655E12, 4.0], [1.654607043E12, 10.0], [1.6546070685E12, 4.0], [1.654607046E12, 8.666666666666666], [1.6546070715E12, 7.333333333333333], [1.654607049E12, 9.333333333333334], [1.6546070745E12, 6.0], [1.654607052E12, 10.0], [1.654607055E12, 8.666666666666666], [1.6546070325E12, 3.3333333333333335], [1.654607058E12, 10.0], [1.6546070355E12, 4.666666666666667], [1.6546070775E12, 10.0], [1.654607061E12, 1.3333333333333333], [1.6546070385E12, 6.0], [1.6546070805E12, 17.333333333333332], [1.654607064E12, 5.333333333333333], [1.6546070415E12, 8.0], [1.6546070835E12, 13.333333333333334], [1.6546070445E12, 6.666666666666667], [1.6546070865E12, 5.333333333333333], [1.6546070475E12, 8.0], [1.6546070895E12, 13.333333333333334], [1.654607067E12, 6.0], [1.6546070505E12, 7.333333333333333], [1.65460707E12, 4.666666666666667], [1.654607031E12, 3.3333333333333335], [1.654607073E12, 4.0], [1.654607034E12, 4.0], [1.654607076E12, 7.333333333333333], [1.6546070535E12, 9.333333333333334], [1.654607037E12, 6.0], [1.654607079E12, 6.666666666666667], [1.6546070565E12, 9.333333333333334], [1.65460704E12, 8.0], [1.654607082E12, 7.333333333333333], [1.6546070595E12, 4.666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.654607079E12, 1.3333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6546070895E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

