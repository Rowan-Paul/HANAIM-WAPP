/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 139.0, "minX": 0.0, "maxY": 19210.0, "series": [{"data": [[0.0, 139.0], [0.1, 139.0], [0.2, 139.0], [0.3, 139.0], [0.4, 139.0], [0.5, 239.0], [0.6, 239.0], [0.7, 239.0], [0.8, 239.0], [0.9, 239.0], [1.0, 250.0], [1.1, 250.0], [1.2, 250.0], [1.3, 250.0], [1.4, 251.0], [1.5, 251.0], [1.6, 251.0], [1.7, 251.0], [1.8, 251.0], [1.9, 254.0], [2.0, 254.0], [2.1, 254.0], [2.2, 254.0], [2.3, 254.0], [2.4, 254.0], [2.5, 254.0], [2.6, 254.0], [2.7, 254.0], [2.8, 256.0], [2.9, 256.0], [3.0, 256.0], [3.1, 256.0], [3.2, 256.0], [3.3, 256.0], [3.4, 256.0], [3.5, 256.0], [3.6, 256.0], [3.7, 256.0], [3.8, 256.0], [3.9, 256.0], [4.0, 256.0], [4.1, 256.0], [4.2, 257.0], [4.3, 257.0], [4.4, 257.0], [4.5, 257.0], [4.6, 257.0], [4.7, 258.0], [4.8, 258.0], [4.9, 258.0], [5.0, 258.0], [5.1, 258.0], [5.2, 262.0], [5.3, 262.0], [5.4, 262.0], [5.5, 262.0], [5.6, 262.0], [5.7, 262.0], [5.8, 262.0], [5.9, 262.0], [6.0, 262.0], [6.1, 262.0], [6.2, 262.0], [6.3, 262.0], [6.4, 262.0], [6.5, 262.0], [6.6, 264.0], [6.7, 264.0], [6.8, 264.0], [6.9, 264.0], [7.0, 265.0], [7.1, 265.0], [7.2, 265.0], [7.3, 265.0], [7.4, 265.0], [7.5, 265.0], [7.6, 265.0], [7.7, 265.0], [7.8, 265.0], [7.9, 265.0], [8.0, 268.0], [8.1, 268.0], [8.2, 268.0], [8.3, 268.0], [8.4, 275.0], [8.5, 275.0], [8.6, 275.0], [8.7, 275.0], [8.8, 275.0], [8.9, 276.0], [9.0, 276.0], [9.1, 276.0], [9.2, 276.0], [9.3, 276.0], [9.4, 444.0], [9.5, 444.0], [9.6, 444.0], [9.7, 444.0], [9.8, 497.0], [9.9, 497.0], [10.0, 497.0], [10.1, 497.0], [10.2, 497.0], [10.3, 498.0], [10.4, 498.0], [10.5, 498.0], [10.6, 498.0], [10.7, 512.0], [10.8, 512.0], [10.9, 512.0], [11.0, 512.0], [11.1, 512.0], [11.2, 513.0], [11.3, 513.0], [11.4, 513.0], [11.5, 513.0], [11.6, 513.0], [11.7, 738.0], [11.8, 738.0], [11.9, 738.0], [12.0, 738.0], [12.1, 754.0], [12.2, 754.0], [12.3, 754.0], [12.4, 754.0], [12.5, 754.0], [12.6, 755.0], [12.7, 755.0], [12.8, 755.0], [12.9, 755.0], [13.0, 755.0], [13.1, 756.0], [13.2, 756.0], [13.3, 756.0], [13.4, 756.0], [13.5, 1147.0], [13.6, 1147.0], [13.7, 1147.0], [13.8, 1147.0], [13.9, 1147.0], [14.0, 5079.0], [14.1, 5079.0], [14.2, 5079.0], [14.3, 5079.0], [14.4, 5079.0], [14.5, 5081.0], [14.6, 5081.0], [14.7, 5081.0], [14.8, 5081.0], [14.9, 5081.0], [15.0, 5081.0], [15.1, 5081.0], [15.2, 5081.0], [15.3, 5081.0], [15.4, 5089.0], [15.5, 5089.0], [15.6, 5089.0], [15.7, 5089.0], [15.8, 5089.0], [15.9, 5096.0], [16.0, 5096.0], [16.1, 5096.0], [16.2, 5096.0], [16.3, 5100.0], [16.4, 5100.0], [16.5, 5100.0], [16.6, 5100.0], [16.7, 5100.0], [16.8, 5105.0], [16.9, 5105.0], [17.0, 5105.0], [17.1, 5105.0], [17.2, 5105.0], [17.3, 5107.0], [17.4, 5107.0], [17.5, 5107.0], [17.6, 5107.0], [17.7, 5110.0], [17.8, 5110.0], [17.9, 5110.0], [18.0, 5110.0], [18.1, 5110.0], [18.2, 5110.0], [18.3, 5110.0], [18.4, 5110.0], [18.5, 5110.0], [18.6, 5110.0], [18.7, 5115.0], [18.8, 5115.0], [18.9, 5115.0], [19.0, 5115.0], [19.1, 5191.0], [19.2, 5191.0], [19.3, 5191.0], [19.4, 5191.0], [19.5, 5191.0], [19.6, 5191.0], [19.7, 5191.0], [19.8, 5191.0], [19.9, 5191.0], [20.0, 5191.0], [20.1, 5193.0], [20.2, 5193.0], [20.3, 5193.0], [20.4, 5193.0], [20.5, 5195.0], [20.6, 5195.0], [20.7, 5195.0], [20.8, 5195.0], [20.9, 5195.0], [21.0, 5195.0], [21.1, 5195.0], [21.2, 5195.0], [21.3, 5195.0], [21.4, 5199.0], [21.5, 5199.0], [21.6, 5199.0], [21.7, 5199.0], [21.8, 5199.0], [21.9, 5200.0], [22.0, 5200.0], [22.1, 5200.0], [22.2, 5200.0], [22.3, 5200.0], [22.4, 5201.0], [22.5, 5201.0], [22.6, 5201.0], [22.7, 5201.0], [22.8, 5203.0], [22.9, 5203.0], [23.0, 5203.0], [23.1, 5203.0], [23.2, 5203.0], [23.3, 5205.0], [23.4, 5205.0], [23.5, 5205.0], [23.6, 5205.0], [23.7, 5205.0], [23.8, 5208.0], [23.9, 5208.0], [24.0, 5208.0], [24.1, 5208.0], [24.2, 5282.0], [24.3, 5282.0], [24.4, 5282.0], [24.5, 5282.0], [24.6, 5282.0], [24.7, 5294.0], [24.8, 5294.0], [24.9, 5294.0], [25.0, 5294.0], [25.1, 5294.0], [25.2, 5295.0], [25.3, 5295.0], [25.4, 5295.0], [25.5, 5295.0], [25.6, 5300.0], [25.7, 5300.0], [25.8, 5300.0], [25.9, 5300.0], [26.0, 5300.0], [26.1, 5302.0], [26.2, 5302.0], [26.3, 5302.0], [26.4, 5302.0], [26.5, 5302.0], [26.6, 5303.0], [26.7, 5303.0], [26.8, 5303.0], [26.9, 5303.0], [27.0, 5305.0], [27.1, 5305.0], [27.2, 5305.0], [27.3, 5305.0], [27.4, 5305.0], [27.5, 5309.0], [27.6, 5309.0], [27.7, 5309.0], [27.8, 5309.0], [27.9, 5309.0], [28.0, 5314.0], [28.1, 5314.0], [28.2, 5314.0], [28.3, 5314.0], [28.4, 5316.0], [28.5, 5316.0], [28.6, 5316.0], [28.7, 5316.0], [28.8, 5316.0], [28.9, 5319.0], [29.0, 5319.0], [29.1, 5319.0], [29.2, 5319.0], [29.3, 5319.0], [29.4, 5320.0], [29.5, 5320.0], [29.6, 5320.0], [29.7, 5320.0], [29.8, 5376.0], [29.9, 5376.0], [30.0, 5376.0], [30.1, 5376.0], [30.2, 5376.0], [30.3, 5388.0], [30.4, 5388.0], [30.5, 5388.0], [30.6, 5388.0], [30.7, 5390.0], [30.8, 5390.0], [30.9, 5390.0], [31.0, 5390.0], [31.1, 5390.0], [31.2, 5394.0], [31.3, 5394.0], [31.4, 5394.0], [31.5, 5394.0], [31.6, 5394.0], [31.7, 5397.0], [31.8, 5397.0], [31.9, 5397.0], [32.0, 5397.0], [32.1, 5403.0], [32.2, 5403.0], [32.3, 5403.0], [32.4, 5403.0], [32.5, 5403.0], [32.6, 5413.0], [32.7, 5413.0], [32.8, 5413.0], [32.9, 5413.0], [33.0, 5413.0], [33.1, 5414.0], [33.2, 5414.0], [33.3, 5414.0], [33.4, 5414.0], [33.5, 5424.0], [33.6, 5424.0], [33.7, 5424.0], [33.8, 5424.0], [33.9, 5424.0], [34.0, 5427.0], [34.1, 5427.0], [34.2, 5427.0], [34.3, 5427.0], [34.4, 5427.0], [34.5, 5430.0], [34.6, 5430.0], [34.7, 5430.0], [34.8, 5430.0], [34.9, 5444.0], [35.0, 5444.0], [35.1, 5444.0], [35.2, 5444.0], [35.3, 5444.0], [35.4, 5480.0], [35.5, 5480.0], [35.6, 5480.0], [35.7, 5480.0], [35.8, 5480.0], [35.9, 5482.0], [36.0, 5482.0], [36.1, 5482.0], [36.2, 5482.0], [36.3, 5485.0], [36.4, 5485.0], [36.5, 5485.0], [36.6, 5485.0], [36.7, 5485.0], [36.8, 5488.0], [36.9, 5488.0], [37.0, 5488.0], [37.1, 5488.0], [37.2, 5488.0], [37.3, 5490.0], [37.4, 5490.0], [37.5, 5490.0], [37.6, 5490.0], [37.7, 5495.0], [37.8, 5495.0], [37.9, 5495.0], [38.0, 5495.0], [38.1, 5495.0], [38.2, 5496.0], [38.3, 5496.0], [38.4, 5496.0], [38.5, 5496.0], [38.6, 5496.0], [38.7, 5500.0], [38.8, 5500.0], [38.9, 5500.0], [39.0, 5500.0], [39.1, 5523.0], [39.2, 5523.0], [39.3, 5523.0], [39.4, 5523.0], [39.5, 5523.0], [39.6, 5533.0], [39.7, 5533.0], [39.8, 5533.0], [39.9, 5533.0], [40.0, 5533.0], [40.1, 5537.0], [40.2, 5537.0], [40.3, 5537.0], [40.4, 5537.0], [40.5, 5582.0], [40.6, 5582.0], [40.7, 5582.0], [40.8, 5582.0], [40.9, 5582.0], [41.0, 5588.0], [41.1, 5588.0], [41.2, 5588.0], [41.3, 5588.0], [41.4, 5589.0], [41.5, 5589.0], [41.6, 5589.0], [41.7, 5589.0], [41.8, 5589.0], [41.9, 5594.0], [42.0, 5594.0], [42.1, 5594.0], [42.2, 5594.0], [42.3, 5594.0], [42.4, 5598.0], [42.5, 5598.0], [42.6, 5598.0], [42.7, 5598.0], [42.8, 5604.0], [42.9, 5604.0], [43.0, 5604.0], [43.1, 5604.0], [43.2, 5604.0], [43.3, 5604.0], [43.4, 5604.0], [43.5, 5604.0], [43.6, 5604.0], [43.7, 5604.0], [43.8, 5619.0], [43.9, 5619.0], [44.0, 5619.0], [44.1, 5619.0], [44.2, 5632.0], [44.3, 5632.0], [44.4, 5632.0], [44.5, 5632.0], [44.6, 5632.0], [44.7, 5634.0], [44.8, 5634.0], [44.9, 5634.0], [45.0, 5634.0], [45.1, 5634.0], [45.2, 5644.0], [45.3, 5644.0], [45.4, 5644.0], [45.5, 5644.0], [45.6, 5674.0], [45.7, 5674.0], [45.8, 5674.0], [45.9, 5674.0], [46.0, 5674.0], [46.1, 5688.0], [46.2, 5688.0], [46.3, 5688.0], [46.4, 5688.0], [46.5, 5688.0], [46.6, 5690.0], [46.7, 5690.0], [46.8, 5690.0], [46.9, 5690.0], [47.0, 5693.0], [47.1, 5693.0], [47.2, 5693.0], [47.3, 5693.0], [47.4, 5693.0], [47.5, 5695.0], [47.6, 5695.0], [47.7, 5695.0], [47.8, 5695.0], [47.9, 5695.0], [48.0, 5700.0], [48.1, 5700.0], [48.2, 5700.0], [48.3, 5700.0], [48.4, 5700.0], [48.5, 5700.0], [48.6, 5700.0], [48.7, 5700.0], [48.8, 5700.0], [48.9, 5700.0], [49.0, 5700.0], [49.1, 5700.0], [49.2, 5700.0], [49.3, 5700.0], [49.4, 5740.0], [49.5, 5740.0], [49.6, 5740.0], [49.7, 5740.0], [49.8, 5741.0], [49.9, 5741.0], [50.0, 5741.0], [50.1, 5741.0], [50.2, 5741.0], [50.3, 5753.0], [50.4, 5753.0], [50.5, 5753.0], [50.6, 5753.0], [50.7, 5783.0], [50.8, 5783.0], [50.9, 5783.0], [51.0, 5783.0], [51.1, 5783.0], [51.2, 5785.0], [51.3, 5785.0], [51.4, 5785.0], [51.5, 5785.0], [51.6, 5785.0], [51.7, 5785.0], [51.8, 5785.0], [51.9, 5785.0], [52.0, 5785.0], [52.1, 5785.0], [52.2, 5785.0], [52.3, 5785.0], [52.4, 5785.0], [52.5, 5785.0], [52.6, 5789.0], [52.7, 5789.0], [52.8, 5789.0], [52.9, 5789.0], [53.0, 5789.0], [53.1, 5791.0], [53.2, 5791.0], [53.3, 5791.0], [53.4, 5791.0], [53.5, 5794.0], [53.6, 5794.0], [53.7, 5794.0], [53.8, 5794.0], [53.9, 5794.0], [54.0, 5797.0], [54.1, 5797.0], [54.2, 5797.0], [54.3, 5797.0], [54.4, 5797.0], [54.5, 5848.0], [54.6, 5848.0], [54.7, 5848.0], [54.8, 5848.0], [54.9, 5850.0], [55.0, 5850.0], [55.1, 5850.0], [55.2, 5850.0], [55.3, 5850.0], [55.4, 5863.0], [55.5, 5863.0], [55.6, 5863.0], [55.7, 5863.0], [55.8, 5863.0], [55.9, 5879.0], [56.0, 5879.0], [56.1, 5879.0], [56.2, 5879.0], [56.3, 5884.0], [56.4, 5884.0], [56.5, 5884.0], [56.6, 5884.0], [56.7, 5884.0], [56.8, 5884.0], [56.9, 5884.0], [57.0, 5884.0], [57.1, 5884.0], [57.2, 5884.0], [57.3, 5885.0], [57.4, 5885.0], [57.5, 5885.0], [57.6, 5885.0], [57.7, 5893.0], [57.8, 5893.0], [57.9, 5893.0], [58.0, 5893.0], [58.1, 5893.0], [58.2, 5896.0], [58.3, 5896.0], [58.4, 5896.0], [58.5, 5896.0], [58.6, 5896.0], [58.7, 5902.0], [58.8, 5902.0], [58.9, 5902.0], [59.0, 5902.0], [59.1, 5903.0], [59.2, 5903.0], [59.3, 5903.0], [59.4, 5903.0], [59.5, 5903.0], [59.6, 5954.0], [59.7, 5954.0], [59.8, 5954.0], [59.9, 5954.0], [60.0, 5954.0], [60.1, 5959.0], [60.2, 5959.0], [60.3, 5959.0], [60.4, 5959.0], [60.5, 5975.0], [60.6, 5975.0], [60.7, 5975.0], [60.8, 5975.0], [60.9, 5975.0], [61.0, 5983.0], [61.1, 5983.0], [61.2, 5983.0], [61.3, 5983.0], [61.4, 5991.0], [61.5, 5991.0], [61.6, 5991.0], [61.7, 5991.0], [61.8, 5991.0], [61.9, 5993.0], [62.0, 5993.0], [62.1, 5993.0], [62.2, 5993.0], [62.3, 5993.0], [62.4, 5996.0], [62.5, 5996.0], [62.6, 5996.0], [62.7, 5996.0], [62.8, 5996.0], [62.9, 5996.0], [63.0, 5996.0], [63.1, 5996.0], [63.2, 5996.0], [63.3, 5996.0], [63.4, 5996.0], [63.5, 5996.0], [63.6, 5996.0], [63.7, 5996.0], [63.8, 5999.0], [63.9, 5999.0], [64.0, 5999.0], [64.1, 5999.0], [64.2, 8189.0], [64.3, 8189.0], [64.4, 8189.0], [64.5, 8189.0], [64.6, 8189.0], [64.7, 8329.0], [64.8, 8329.0], [64.9, 8329.0], [65.0, 8329.0], [65.1, 8329.0], [65.2, 8481.0], [65.3, 8481.0], [65.4, 8481.0], [65.5, 8481.0], [65.6, 8841.0], [65.7, 8841.0], [65.8, 8841.0], [65.9, 8841.0], [66.0, 8841.0], [66.1, 8944.0], [66.2, 8944.0], [66.3, 8944.0], [66.4, 8944.0], [66.5, 8944.0], [66.6, 9066.0], [66.7, 9066.0], [66.8, 9066.0], [66.9, 9066.0], [67.0, 9210.0], [67.1, 9210.0], [67.2, 9210.0], [67.3, 9210.0], [67.4, 9210.0], [67.5, 9322.0], [67.6, 9322.0], [67.7, 9322.0], [67.8, 9322.0], [67.9, 9322.0], [68.0, 9453.0], [68.1, 9453.0], [68.2, 9453.0], [68.3, 9453.0], [68.4, 9569.0], [68.5, 9569.0], [68.6, 9569.0], [68.7, 9569.0], [68.8, 9569.0], [68.9, 9582.0], [69.0, 9582.0], [69.1, 9582.0], [69.2, 9582.0], [69.3, 9582.0], [69.4, 9691.0], [69.5, 9691.0], [69.6, 9691.0], [69.7, 9691.0], [69.8, 9702.0], [69.9, 9702.0], [70.0, 9702.0], [70.1, 9702.0], [70.2, 9702.0], [70.3, 9817.0], [70.4, 9817.0], [70.5, 9817.0], [70.6, 9817.0], [70.7, 9940.0], [70.8, 9940.0], [70.9, 9940.0], [71.0, 9940.0], [71.1, 9940.0], [71.2, 10065.0], [71.3, 10065.0], [71.4, 10065.0], [71.5, 10065.0], [71.6, 10065.0], [71.7, 10067.0], [71.8, 10067.0], [71.9, 10067.0], [72.0, 10067.0], [72.1, 10187.0], [72.2, 10187.0], [72.3, 10187.0], [72.4, 10187.0], [72.5, 10187.0], [72.6, 10313.0], [72.7, 10313.0], [72.8, 10313.0], [72.9, 10313.0], [73.0, 10313.0], [73.1, 10349.0], [73.2, 10349.0], [73.3, 10349.0], [73.4, 10349.0], [73.5, 10436.0], [73.6, 10436.0], [73.7, 10436.0], [73.8, 10436.0], [73.9, 10436.0], [74.0, 10492.0], [74.1, 10492.0], [74.2, 10492.0], [74.3, 10492.0], [74.4, 10492.0], [74.5, 10572.0], [74.6, 10572.0], [74.7, 10572.0], [74.8, 10572.0], [74.9, 10713.0], [75.0, 10713.0], [75.1, 10713.0], [75.2, 10713.0], [75.3, 10713.0], [75.4, 10824.0], [75.5, 10824.0], [75.6, 10824.0], [75.7, 10824.0], [75.8, 10824.0], [75.9, 10913.0], [76.0, 10913.0], [76.1, 10913.0], [76.2, 10913.0], [76.3, 10931.0], [76.4, 10931.0], [76.5, 10931.0], [76.6, 10931.0], [76.7, 10931.0], [76.8, 10989.0], [76.9, 10989.0], [77.0, 10989.0], [77.1, 10989.0], [77.2, 10989.0], [77.3, 11061.0], [77.4, 11061.0], [77.5, 11061.0], [77.6, 11061.0], [77.7, 11194.0], [77.8, 11194.0], [77.9, 11194.0], [78.0, 11194.0], [78.1, 11194.0], [78.2, 11645.0], [78.3, 11645.0], [78.4, 11645.0], [78.5, 11645.0], [78.6, 11645.0], [78.7, 11701.0], [78.8, 11701.0], [78.9, 11701.0], [79.0, 11701.0], [79.1, 11782.0], [79.2, 11782.0], [79.3, 11782.0], [79.4, 11782.0], [79.5, 11782.0], [79.6, 12210.0], [79.7, 12210.0], [79.8, 12210.0], [79.9, 12210.0], [80.0, 12343.0], [80.1, 12343.0], [80.2, 12343.0], [80.3, 12343.0], [80.4, 12343.0], [80.5, 12384.0], [80.6, 12384.0], [80.7, 12384.0], [80.8, 12384.0], [80.9, 12384.0], [81.0, 12484.0], [81.1, 12484.0], [81.2, 12484.0], [81.3, 12484.0], [81.4, 12539.0], [81.5, 12539.0], [81.6, 12539.0], [81.7, 12539.0], [81.8, 12539.0], [81.9, 12705.0], [82.0, 12705.0], [82.1, 12705.0], [82.2, 12705.0], [82.3, 12705.0], [82.4, 13061.0], [82.5, 13061.0], [82.6, 13061.0], [82.7, 13061.0], [82.8, 13196.0], [82.9, 13196.0], [83.0, 13196.0], [83.1, 13196.0], [83.2, 13196.0], [83.3, 13530.0], [83.4, 13530.0], [83.5, 13530.0], [83.6, 13530.0], [83.7, 13530.0], [83.8, 13641.0], [83.9, 13641.0], [84.0, 13641.0], [84.1, 13641.0], [84.2, 13780.0], [84.3, 13780.0], [84.4, 13780.0], [84.5, 13780.0], [84.6, 13780.0], [84.7, 13911.0], [84.8, 13911.0], [84.9, 13911.0], [85.0, 13911.0], [85.1, 13911.0], [85.2, 13924.0], [85.3, 13924.0], [85.4, 13924.0], [85.5, 13924.0], [85.6, 14052.0], [85.7, 14052.0], [85.8, 14052.0], [85.9, 14052.0], [86.0, 14052.0], [86.1, 14772.0], [86.2, 14772.0], [86.3, 14772.0], [86.4, 14772.0], [86.5, 14772.0], [86.6, 15198.0], [86.7, 15198.0], [86.8, 15198.0], [86.9, 15198.0], [87.0, 15200.0], [87.1, 15200.0], [87.2, 15200.0], [87.3, 15200.0], [87.4, 15200.0], [87.5, 15356.0], [87.6, 15356.0], [87.7, 15356.0], [87.8, 15356.0], [87.9, 15356.0], [88.0, 15357.0], [88.1, 15357.0], [88.2, 15357.0], [88.3, 15357.0], [88.4, 15618.0], [88.5, 15618.0], [88.6, 15618.0], [88.7, 15618.0], [88.8, 15618.0], [88.9, 15865.0], [89.0, 15865.0], [89.1, 15865.0], [89.2, 15865.0], [89.3, 15865.0], [89.4, 16026.0], [89.5, 16026.0], [89.6, 16026.0], [89.7, 16026.0], [89.8, 16598.0], [89.9, 16598.0], [90.0, 16598.0], [90.1, 16598.0], [90.2, 16598.0], [90.3, 16799.0], [90.4, 16799.0], [90.5, 16799.0], [90.6, 16799.0], [90.7, 16864.0], [90.8, 16864.0], [90.9, 16864.0], [91.0, 16864.0], [91.1, 16864.0], [91.2, 17021.0], [91.3, 17021.0], [91.4, 17021.0], [91.5, 17021.0], [91.6, 17021.0], [91.7, 17202.0], [91.8, 17202.0], [91.9, 17202.0], [92.0, 17202.0], [92.1, 17204.0], [92.2, 17204.0], [92.3, 17204.0], [92.4, 17204.0], [92.5, 17204.0], [92.6, 17397.0], [92.7, 17397.0], [92.8, 17397.0], [92.9, 17397.0], [93.0, 17397.0], [93.1, 17599.0], [93.2, 17599.0], [93.3, 17599.0], [93.4, 17599.0], [93.5, 17798.0], [93.6, 17798.0], [93.7, 17798.0], [93.8, 17798.0], [93.9, 17798.0], [94.0, 17854.0], [94.1, 17854.0], [94.2, 17854.0], [94.3, 17854.0], [94.4, 17854.0], [94.5, 17992.0], [94.6, 17992.0], [94.7, 17992.0], [94.8, 17992.0], [94.9, 18011.0], [95.0, 18011.0], [95.1, 18011.0], [95.2, 18011.0], [95.3, 18011.0], [95.4, 18201.0], [95.5, 18201.0], [95.6, 18201.0], [95.7, 18201.0], [95.8, 18201.0], [95.9, 18397.0], [96.0, 18397.0], [96.1, 18397.0], [96.2, 18397.0], [96.3, 18407.0], [96.4, 18407.0], [96.5, 18407.0], [96.6, 18407.0], [96.7, 18407.0], [96.8, 18524.0], [96.9, 18524.0], [97.0, 18524.0], [97.1, 18524.0], [97.2, 18524.0], [97.3, 18592.0], [97.4, 18592.0], [97.5, 18592.0], [97.6, 18592.0], [97.7, 18693.0], [97.8, 18693.0], [97.9, 18693.0], [98.0, 18693.0], [98.1, 18693.0], [98.2, 18800.0], [98.3, 18800.0], [98.4, 18800.0], [98.5, 18800.0], [98.6, 18800.0], [98.7, 19006.0], [98.8, 19006.0], [98.9, 19006.0], [99.0, 19006.0], [99.1, 19023.0], [99.2, 19023.0], [99.3, 19023.0], [99.4, 19023.0], [99.5, 19023.0], [99.6, 19210.0], [99.7, 19210.0], [99.8, 19210.0], [99.9, 19210.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[0.0, 351.0], [0.1, 351.0], [0.2, 351.0], [0.3, 351.0], [0.4, 351.0], [0.5, 352.0], [0.6, 352.0], [0.7, 352.0], [0.8, 352.0], [0.9, 352.0], [1.0, 353.0], [1.1, 353.0], [1.2, 353.0], [1.3, 353.0], [1.4, 356.0], [1.5, 356.0], [1.6, 356.0], [1.7, 356.0], [1.8, 356.0], [1.9, 356.0], [2.0, 356.0], [2.1, 356.0], [2.2, 356.0], [2.3, 356.0], [2.4, 357.0], [2.5, 357.0], [2.6, 357.0], [2.7, 357.0], [2.8, 359.0], [2.9, 359.0], [3.0, 359.0], [3.1, 359.0], [3.2, 359.0], [3.3, 360.0], [3.4, 360.0], [3.5, 360.0], [3.6, 360.0], [3.7, 360.0], [3.8, 361.0], [3.9, 361.0], [4.0, 361.0], [4.1, 361.0], [4.2, 361.0], [4.3, 361.0], [4.4, 361.0], [4.5, 361.0], [4.6, 361.0], [4.7, 362.0], [4.8, 362.0], [4.9, 362.0], [5.0, 362.0], [5.1, 362.0], [5.2, 362.0], [5.3, 362.0], [5.4, 362.0], [5.5, 362.0], [5.6, 362.0], [5.7, 362.0], [5.8, 362.0], [5.9, 362.0], [6.0, 362.0], [6.1, 368.0], [6.2, 368.0], [6.3, 368.0], [6.4, 368.0], [6.5, 368.0], [6.6, 368.0], [6.7, 368.0], [6.8, 368.0], [6.9, 368.0], [7.0, 372.0], [7.1, 372.0], [7.2, 372.0], [7.3, 372.0], [7.4, 372.0], [7.5, 373.0], [7.6, 373.0], [7.7, 373.0], [7.8, 373.0], [7.9, 373.0], [8.0, 375.0], [8.1, 375.0], [8.2, 375.0], [8.3, 375.0], [8.4, 375.0], [8.5, 375.0], [8.6, 375.0], [8.7, 375.0], [8.8, 375.0], [8.9, 377.0], [9.0, 377.0], [9.1, 377.0], [9.2, 377.0], [9.3, 377.0], [9.4, 384.0], [9.5, 384.0], [9.6, 384.0], [9.7, 384.0], [9.8, 391.0], [9.9, 391.0], [10.0, 391.0], [10.1, 391.0], [10.2, 391.0], [10.3, 414.0], [10.4, 414.0], [10.5, 414.0], [10.6, 414.0], [10.7, 425.0], [10.8, 425.0], [10.9, 425.0], [11.0, 425.0], [11.1, 425.0], [11.2, 509.0], [11.3, 509.0], [11.4, 509.0], [11.5, 509.0], [11.6, 509.0], [11.7, 592.0], [11.8, 592.0], [11.9, 592.0], [12.0, 592.0], [12.1, 612.0], [12.2, 612.0], [12.3, 612.0], [12.4, 612.0], [12.5, 612.0], [12.6, 620.0], [12.7, 620.0], [12.8, 620.0], [12.9, 620.0], [13.0, 620.0], [13.1, 630.0], [13.2, 630.0], [13.3, 630.0], [13.4, 630.0], [13.5, 647.0], [13.6, 647.0], [13.7, 647.0], [13.8, 647.0], [13.9, 647.0], [14.0, 656.0], [14.1, 656.0], [14.2, 656.0], [14.3, 656.0], [14.4, 656.0], [14.5, 673.0], [14.6, 673.0], [14.7, 673.0], [14.8, 673.0], [14.9, 708.0], [15.0, 708.0], [15.1, 708.0], [15.2, 708.0], [15.3, 708.0], [15.4, 730.0], [15.5, 730.0], [15.6, 730.0], [15.7, 730.0], [15.8, 730.0], [15.9, 760.0], [16.0, 760.0], [16.1, 760.0], [16.2, 760.0], [16.3, 997.0], [16.4, 997.0], [16.5, 997.0], [16.6, 997.0], [16.7, 997.0], [16.8, 1070.0], [16.9, 1070.0], [17.0, 1070.0], [17.1, 1070.0], [17.2, 1070.0], [17.3, 1115.0], [17.4, 1115.0], [17.5, 1115.0], [17.6, 1115.0], [17.7, 1130.0], [17.8, 1130.0], [17.9, 1130.0], [18.0, 1130.0], [18.1, 1130.0], [18.2, 1137.0], [18.3, 1137.0], [18.4, 1137.0], [18.5, 1137.0], [18.6, 1137.0], [18.7, 1158.0], [18.8, 1158.0], [18.9, 1158.0], [19.0, 1158.0], [19.1, 1198.0], [19.2, 1198.0], [19.3, 1198.0], [19.4, 1198.0], [19.5, 1198.0], [19.6, 1398.0], [19.7, 1398.0], [19.8, 1398.0], [19.9, 1398.0], [20.0, 1398.0], [20.1, 1461.0], [20.2, 1461.0], [20.3, 1461.0], [20.4, 1461.0], [20.5, 1465.0], [20.6, 1465.0], [20.7, 1465.0], [20.8, 1465.0], [20.9, 1465.0], [21.0, 1715.0], [21.1, 1715.0], [21.2, 1715.0], [21.3, 1715.0], [21.4, 1791.0], [21.5, 1791.0], [21.6, 1791.0], [21.7, 1791.0], [21.8, 1791.0], [21.9, 1867.0], [22.0, 1867.0], [22.1, 1867.0], [22.2, 1867.0], [22.3, 1867.0], [22.4, 1975.0], [22.5, 1975.0], [22.6, 1975.0], [22.7, 1975.0], [22.8, 2121.0], [22.9, 2121.0], [23.0, 2121.0], [23.1, 2121.0], [23.2, 2121.0], [23.3, 2177.0], [23.4, 2177.0], [23.5, 2177.0], [23.6, 2177.0], [23.7, 2177.0], [23.8, 2238.0], [23.9, 2238.0], [24.0, 2238.0], [24.1, 2238.0], [24.2, 2503.0], [24.3, 2503.0], [24.4, 2503.0], [24.5, 2503.0], [24.6, 2503.0], [24.7, 2553.0], [24.8, 2553.0], [24.9, 2553.0], [25.0, 2553.0], [25.1, 2553.0], [25.2, 2625.0], [25.3, 2625.0], [25.4, 2625.0], [25.5, 2625.0], [25.6, 2911.0], [25.7, 2911.0], [25.8, 2911.0], [25.9, 2911.0], [26.0, 2911.0], [26.1, 3143.0], [26.2, 3143.0], [26.3, 3143.0], [26.4, 3143.0], [26.5, 3143.0], [26.6, 3279.0], [26.7, 3279.0], [26.8, 3279.0], [26.9, 3279.0], [27.0, 3323.0], [27.1, 3323.0], [27.2, 3323.0], [27.3, 3323.0], [27.4, 3323.0], [27.5, 3603.0], [27.6, 3603.0], [27.7, 3603.0], [27.8, 3603.0], [27.9, 3603.0], [28.0, 3659.0], [28.1, 3659.0], [28.2, 3659.0], [28.3, 3659.0], [28.4, 3925.0], [28.5, 3925.0], [28.6, 3925.0], [28.7, 3925.0], [28.8, 3925.0], [28.9, 4202.0], [29.0, 4202.0], [29.1, 4202.0], [29.2, 4202.0], [29.3, 4202.0], [29.4, 4474.0], [29.5, 4474.0], [29.6, 4474.0], [29.7, 4474.0], [29.8, 4609.0], [29.9, 4609.0], [30.0, 4609.0], [30.1, 4609.0], [30.2, 4609.0], [30.3, 4898.0], [30.4, 4898.0], [30.5, 4898.0], [30.6, 4898.0], [30.7, 5000.0], [30.8, 5000.0], [30.9, 5000.0], [31.0, 5000.0], [31.1, 5000.0], [31.2, 5062.0], [31.3, 5062.0], [31.4, 5062.0], [31.5, 5062.0], [31.6, 5062.0], [31.7, 5079.0], [31.8, 5079.0], [31.9, 5079.0], [32.0, 5079.0], [32.1, 5082.0], [32.2, 5082.0], [32.3, 5082.0], [32.4, 5082.0], [32.5, 5082.0], [32.6, 5084.0], [32.7, 5084.0], [32.8, 5084.0], [32.9, 5084.0], [33.0, 5084.0], [33.1, 5089.0], [33.2, 5089.0], [33.3, 5089.0], [33.4, 5089.0], [33.5, 5095.0], [33.6, 5095.0], [33.7, 5095.0], [33.8, 5095.0], [33.9, 5095.0], [34.0, 5099.0], [34.1, 5099.0], [34.2, 5099.0], [34.3, 5099.0], [34.4, 5099.0], [34.5, 5099.0], [34.6, 5099.0], [34.7, 5099.0], [34.8, 5099.0], [34.9, 5103.0], [35.0, 5103.0], [35.1, 5103.0], [35.2, 5103.0], [35.3, 5103.0], [35.4, 5106.0], [35.5, 5106.0], [35.6, 5106.0], [35.7, 5106.0], [35.8, 5106.0], [35.9, 5107.0], [36.0, 5107.0], [36.1, 5107.0], [36.2, 5107.0], [36.3, 5110.0], [36.4, 5110.0], [36.5, 5110.0], [36.6, 5110.0], [36.7, 5110.0], [36.8, 5191.0], [36.9, 5191.0], [37.0, 5191.0], [37.1, 5191.0], [37.2, 5191.0], [37.3, 5192.0], [37.4, 5192.0], [37.5, 5192.0], [37.6, 5192.0], [37.7, 5193.0], [37.8, 5193.0], [37.9, 5193.0], [38.0, 5193.0], [38.1, 5193.0], [38.2, 5194.0], [38.3, 5194.0], [38.4, 5194.0], [38.5, 5194.0], [38.6, 5194.0], [38.7, 5195.0], [38.8, 5195.0], [38.9, 5195.0], [39.0, 5195.0], [39.1, 5199.0], [39.2, 5199.0], [39.3, 5199.0], [39.4, 5199.0], [39.5, 5199.0], [39.6, 5202.0], [39.7, 5202.0], [39.8, 5202.0], [39.9, 5202.0], [40.0, 5202.0], [40.1, 5205.0], [40.2, 5205.0], [40.3, 5205.0], [40.4, 5205.0], [40.5, 5205.0], [40.6, 5205.0], [40.7, 5205.0], [40.8, 5205.0], [40.9, 5205.0], [41.0, 5209.0], [41.1, 5209.0], [41.2, 5209.0], [41.3, 5209.0], [41.4, 5220.0], [41.5, 5220.0], [41.6, 5220.0], [41.7, 5220.0], [41.8, 5220.0], [41.9, 5282.0], [42.0, 5282.0], [42.1, 5282.0], [42.2, 5282.0], [42.3, 5282.0], [42.4, 5283.0], [42.5, 5283.0], [42.6, 5283.0], [42.7, 5283.0], [42.8, 5293.0], [42.9, 5293.0], [43.0, 5293.0], [43.1, 5293.0], [43.2, 5293.0], [43.3, 5293.0], [43.4, 5293.0], [43.5, 5293.0], [43.6, 5293.0], [43.7, 5293.0], [43.8, 5297.0], [43.9, 5297.0], [44.0, 5297.0], [44.1, 5297.0], [44.2, 5300.0], [44.3, 5300.0], [44.4, 5300.0], [44.5, 5300.0], [44.6, 5300.0], [44.7, 5301.0], [44.8, 5301.0], [44.9, 5301.0], [45.0, 5301.0], [45.1, 5301.0], [45.2, 5305.0], [45.3, 5305.0], [45.4, 5305.0], [45.5, 5305.0], [45.6, 5310.0], [45.7, 5310.0], [45.8, 5310.0], [45.9, 5310.0], [46.0, 5310.0], [46.1, 5316.0], [46.2, 5316.0], [46.3, 5316.0], [46.4, 5316.0], [46.5, 5316.0], [46.6, 5316.0], [46.7, 5316.0], [46.8, 5316.0], [46.9, 5316.0], [47.0, 5317.0], [47.1, 5317.0], [47.2, 5317.0], [47.3, 5317.0], [47.4, 5317.0], [47.5, 5329.0], [47.6, 5329.0], [47.7, 5329.0], [47.8, 5329.0], [47.9, 5329.0], [48.0, 5375.0], [48.1, 5375.0], [48.2, 5375.0], [48.3, 5375.0], [48.4, 5378.0], [48.5, 5378.0], [48.6, 5378.0], [48.7, 5378.0], [48.8, 5378.0], [48.9, 5387.0], [49.0, 5387.0], [49.1, 5387.0], [49.2, 5387.0], [49.3, 5387.0], [49.4, 5387.0], [49.5, 5387.0], [49.6, 5387.0], [49.7, 5387.0], [49.8, 5393.0], [49.9, 5393.0], [50.0, 5393.0], [50.1, 5393.0], [50.2, 5393.0], [50.3, 5395.0], [50.4, 5395.0], [50.5, 5395.0], [50.6, 5395.0], [50.7, 5402.0], [50.8, 5402.0], [50.9, 5402.0], [51.0, 5402.0], [51.1, 5402.0], [51.2, 5413.0], [51.3, 5413.0], [51.4, 5413.0], [51.5, 5413.0], [51.6, 5413.0], [51.7, 5414.0], [51.8, 5414.0], [51.9, 5414.0], [52.0, 5414.0], [52.1, 5426.0], [52.2, 5426.0], [52.3, 5426.0], [52.4, 5426.0], [52.5, 5426.0], [52.6, 5427.0], [52.7, 5427.0], [52.8, 5427.0], [52.9, 5427.0], [53.0, 5427.0], [53.1, 5431.0], [53.2, 5431.0], [53.3, 5431.0], [53.4, 5431.0], [53.5, 5442.0], [53.6, 5442.0], [53.7, 5442.0], [53.8, 5442.0], [53.9, 5442.0], [54.0, 5485.0], [54.1, 5485.0], [54.2, 5485.0], [54.3, 5485.0], [54.4, 5485.0], [54.5, 5487.0], [54.6, 5487.0], [54.7, 5487.0], [54.8, 5487.0], [54.9, 5490.0], [55.0, 5490.0], [55.1, 5490.0], [55.2, 5490.0], [55.3, 5490.0], [55.4, 5495.0], [55.5, 5495.0], [55.6, 5495.0], [55.7, 5495.0], [55.8, 5495.0], [55.9, 5495.0], [56.0, 5495.0], [56.1, 5495.0], [56.2, 5495.0], [56.3, 5495.0], [56.4, 5495.0], [56.5, 5495.0], [56.6, 5495.0], [56.7, 5495.0], [56.8, 5496.0], [56.9, 5496.0], [57.0, 5496.0], [57.1, 5496.0], [57.2, 5496.0], [57.3, 5504.0], [57.4, 5504.0], [57.5, 5504.0], [57.6, 5504.0], [57.7, 5526.0], [57.8, 5526.0], [57.9, 5526.0], [58.0, 5526.0], [58.1, 5526.0], [58.2, 5529.0], [58.3, 5529.0], [58.4, 5529.0], [58.5, 5529.0], [58.6, 5529.0], [58.7, 5539.0], [58.8, 5539.0], [58.9, 5539.0], [59.0, 5539.0], [59.1, 5555.0], [59.2, 5555.0], [59.3, 5555.0], [59.4, 5555.0], [59.5, 5555.0], [59.6, 5583.0], [59.7, 5583.0], [59.8, 5583.0], [59.9, 5583.0], [60.0, 5583.0], [60.1, 5588.0], [60.2, 5588.0], [60.3, 5588.0], [60.4, 5588.0], [60.5, 5589.0], [60.6, 5589.0], [60.7, 5589.0], [60.8, 5589.0], [60.9, 5589.0], [61.0, 5592.0], [61.1, 5592.0], [61.2, 5592.0], [61.3, 5592.0], [61.4, 5596.0], [61.5, 5596.0], [61.6, 5596.0], [61.7, 5596.0], [61.8, 5596.0], [61.9, 5603.0], [62.0, 5603.0], [62.1, 5603.0], [62.2, 5603.0], [62.3, 5603.0], [62.4, 5606.0], [62.5, 5606.0], [62.6, 5606.0], [62.7, 5606.0], [62.8, 5606.0], [62.9, 5606.0], [63.0, 5606.0], [63.1, 5606.0], [63.2, 5606.0], [63.3, 5633.0], [63.4, 5633.0], [63.5, 5633.0], [63.6, 5633.0], [63.7, 5633.0], [63.8, 5643.0], [63.9, 5643.0], [64.0, 5643.0], [64.1, 5643.0], [64.2, 5646.0], [64.3, 5646.0], [64.4, 5646.0], [64.5, 5646.0], [64.6, 5646.0], [64.7, 5675.0], [64.8, 5675.0], [64.9, 5675.0], [65.0, 5675.0], [65.1, 5675.0], [65.2, 5686.0], [65.3, 5686.0], [65.4, 5686.0], [65.5, 5686.0], [65.6, 5689.0], [65.7, 5689.0], [65.8, 5689.0], [65.9, 5689.0], [66.0, 5689.0], [66.1, 5693.0], [66.2, 5693.0], [66.3, 5693.0], [66.4, 5693.0], [66.5, 5693.0], [66.6, 5696.0], [66.7, 5696.0], [66.8, 5696.0], [66.9, 5696.0], [67.0, 5697.0], [67.1, 5697.0], [67.2, 5697.0], [67.3, 5697.0], [67.4, 5697.0], [67.5, 5699.0], [67.6, 5699.0], [67.7, 5699.0], [67.8, 5699.0], [67.9, 5699.0], [68.0, 5714.0], [68.1, 5714.0], [68.2, 5714.0], [68.3, 5714.0], [68.4, 5720.0], [68.5, 5720.0], [68.6, 5720.0], [68.7, 5720.0], [68.8, 5720.0], [68.9, 5741.0], [69.0, 5741.0], [69.1, 5741.0], [69.2, 5741.0], [69.3, 5741.0], [69.4, 5743.0], [69.5, 5743.0], [69.6, 5743.0], [69.7, 5743.0], [69.8, 5754.0], [69.9, 5754.0], [70.0, 5754.0], [70.1, 5754.0], [70.2, 5754.0], [70.3, 5781.0], [70.4, 5781.0], [70.5, 5781.0], [70.6, 5781.0], [70.7, 5782.0], [70.8, 5782.0], [70.9, 5782.0], [71.0, 5782.0], [71.1, 5782.0], [71.2, 5782.0], [71.3, 5782.0], [71.4, 5782.0], [71.5, 5782.0], [71.6, 5782.0], [71.7, 5786.0], [71.8, 5786.0], [71.9, 5786.0], [72.0, 5786.0], [72.1, 5787.0], [72.2, 5787.0], [72.3, 5787.0], [72.4, 5787.0], [72.5, 5787.0], [72.6, 5790.0], [72.7, 5790.0], [72.8, 5790.0], [72.9, 5790.0], [73.0, 5790.0], [73.1, 5793.0], [73.2, 5793.0], [73.3, 5793.0], [73.4, 5793.0], [73.5, 5793.0], [73.6, 5793.0], [73.7, 5793.0], [73.8, 5793.0], [73.9, 5793.0], [74.0, 5796.0], [74.1, 5796.0], [74.2, 5796.0], [74.3, 5796.0], [74.4, 5796.0], [74.5, 5848.0], [74.6, 5848.0], [74.7, 5848.0], [74.8, 5848.0], [74.9, 5849.0], [75.0, 5849.0], [75.1, 5849.0], [75.2, 5849.0], [75.3, 5849.0], [75.4, 5863.0], [75.5, 5863.0], [75.6, 5863.0], [75.7, 5863.0], [75.8, 5863.0], [75.9, 5880.0], [76.0, 5880.0], [76.1, 5880.0], [76.2, 5880.0], [76.3, 5881.0], [76.4, 5881.0], [76.5, 5881.0], [76.6, 5881.0], [76.7, 5881.0], [76.8, 5882.0], [76.9, 5882.0], [77.0, 5882.0], [77.1, 5882.0], [77.2, 5882.0], [77.3, 5884.0], [77.4, 5884.0], [77.5, 5884.0], [77.6, 5884.0], [77.7, 5894.0], [77.8, 5894.0], [77.9, 5894.0], [78.0, 5894.0], [78.1, 5894.0], [78.2, 5894.0], [78.3, 5894.0], [78.4, 5894.0], [78.5, 5894.0], [78.6, 5894.0], [78.7, 5901.0], [78.8, 5901.0], [78.9, 5901.0], [79.0, 5901.0], [79.1, 5905.0], [79.2, 5905.0], [79.3, 5905.0], [79.4, 5905.0], [79.5, 5905.0], [79.6, 5942.0], [79.7, 5942.0], [79.8, 5942.0], [79.9, 5942.0], [80.0, 5954.0], [80.1, 5954.0], [80.2, 5954.0], [80.3, 5954.0], [80.4, 5954.0], [80.5, 5972.0], [80.6, 5972.0], [80.7, 5972.0], [80.8, 5972.0], [80.9, 5972.0], [81.0, 5976.0], [81.1, 5976.0], [81.2, 5976.0], [81.3, 5976.0], [81.4, 5984.0], [81.5, 5984.0], [81.6, 5984.0], [81.7, 5984.0], [81.8, 5984.0], [81.9, 5987.0], [82.0, 5987.0], [82.1, 5987.0], [82.2, 5987.0], [82.3, 5987.0], [82.4, 5992.0], [82.5, 5992.0], [82.6, 5992.0], [82.7, 5992.0], [82.8, 5993.0], [82.9, 5993.0], [83.0, 5993.0], [83.1, 5993.0], [83.2, 5993.0], [83.3, 5995.0], [83.4, 5995.0], [83.5, 5995.0], [83.6, 5995.0], [83.7, 5995.0], [83.8, 5996.0], [83.9, 5996.0], [84.0, 5996.0], [84.1, 5996.0], [84.2, 5997.0], [84.3, 5997.0], [84.4, 5997.0], [84.5, 5997.0], [84.6, 5997.0], [84.7, 6132.0], [84.8, 6132.0], [84.9, 6132.0], [85.0, 6132.0], [85.1, 6132.0], [85.2, 6427.0], [85.3, 6427.0], [85.4, 6427.0], [85.5, 6427.0], [85.6, 6749.0], [85.7, 6749.0], [85.8, 6749.0], [85.9, 6749.0], [86.0, 6749.0], [86.1, 7034.0], [86.2, 7034.0], [86.3, 7034.0], [86.4, 7034.0], [86.5, 7034.0], [86.6, 7130.0], [86.7, 7130.0], [86.8, 7130.0], [86.9, 7130.0], [87.0, 7416.0], [87.1, 7416.0], [87.2, 7416.0], [87.3, 7416.0], [87.4, 7416.0], [87.5, 7748.0], [87.6, 7748.0], [87.7, 7748.0], [87.8, 7748.0], [87.9, 7748.0], [88.0, 8048.0], [88.1, 8048.0], [88.2, 8048.0], [88.3, 8048.0], [88.4, 8333.0], [88.5, 8333.0], [88.6, 8333.0], [88.7, 8333.0], [88.8, 8333.0], [88.9, 8405.0], [89.0, 8405.0], [89.1, 8405.0], [89.2, 8405.0], [89.3, 8405.0], [89.4, 8484.0], [89.5, 8484.0], [89.6, 8484.0], [89.7, 8484.0], [89.8, 8625.0], [89.9, 8625.0], [90.0, 8625.0], [90.1, 8625.0], [90.2, 8625.0], [90.3, 8710.0], [90.4, 8710.0], [90.5, 8710.0], [90.6, 8710.0], [90.7, 8844.0], [90.8, 8844.0], [90.9, 8844.0], [91.0, 8844.0], [91.1, 8844.0], [91.2, 8958.0], [91.3, 8958.0], [91.4, 8958.0], [91.5, 8958.0], [91.6, 8958.0], [91.7, 9071.0], [91.8, 9071.0], [91.9, 9071.0], [92.0, 9071.0], [92.1, 9193.0], [92.2, 9193.0], [92.3, 9193.0], [92.4, 9193.0], [92.5, 9193.0], [92.6, 9322.0], [92.7, 9322.0], [92.8, 9322.0], [92.9, 9322.0], [93.0, 9322.0], [93.1, 9446.0], [93.2, 9446.0], [93.3, 9446.0], [93.4, 9446.0], [93.5, 9575.0], [93.6, 9575.0], [93.7, 9575.0], [93.8, 9575.0], [93.9, 9575.0], [94.0, 9690.0], [94.1, 9690.0], [94.2, 9690.0], [94.3, 9690.0], [94.4, 9690.0], [94.5, 9707.0], [94.6, 9707.0], [94.7, 9707.0], [94.8, 9707.0], [94.9, 9828.0], [95.0, 9828.0], [95.1, 9828.0], [95.2, 9828.0], [95.3, 9828.0], [95.4, 9949.0], [95.5, 9949.0], [95.6, 9949.0], [95.7, 9949.0], [95.8, 9949.0], [95.9, 10067.0], [96.0, 10067.0], [96.1, 10067.0], [96.2, 10067.0], [96.3, 10190.0], [96.4, 10190.0], [96.5, 10190.0], [96.6, 10190.0], [96.7, 10190.0], [96.8, 10192.0], [96.9, 10192.0], [97.0, 10192.0], [97.1, 10192.0], [97.2, 10192.0], [97.3, 10320.0], [97.4, 10320.0], [97.5, 10320.0], [97.6, 10320.0], [97.7, 10443.0], [97.8, 10443.0], [97.9, 10443.0], [98.0, 10443.0], [98.1, 10443.0], [98.2, 10563.0], [98.3, 10563.0], [98.4, 10563.0], [98.5, 10563.0], [98.6, 10563.0], [98.7, 10700.0], [98.8, 10700.0], [98.9, 10700.0], [99.0, 10700.0], [99.1, 10823.0], [99.2, 10823.0], [99.3, 10823.0], [99.4, 10823.0], [99.5, 10823.0], [99.6, 10929.0], [99.7, 10929.0], [99.8, 10929.0], [99.9, 10929.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 22.0, "series": [{"data": [[700.0, 4.0], [1100.0, 1.0], [5000.0, 5.0], [5100.0, 12.0], [5300.0, 14.0], [5200.0, 8.0], [5400.0, 14.0], [5600.0, 11.0], [5500.0, 9.0], [5800.0, 9.0], [5700.0, 14.0], [5900.0, 12.0], [8100.0, 1.0], [8400.0, 1.0], [8300.0, 1.0], [9000.0, 1.0], [8900.0, 1.0], [8800.0, 1.0], [9200.0, 1.0], [9600.0, 1.0], [9500.0, 2.0], [9300.0, 1.0], [9400.0, 1.0], [9700.0, 1.0], [10000.0, 2.0], [9900.0, 1.0], [9800.0, 1.0], [10100.0, 1.0], [10300.0, 2.0], [10400.0, 2.0], [10500.0, 1.0], [10700.0, 1.0], [11100.0, 1.0], [11000.0, 1.0], [10900.0, 3.0], [10800.0, 1.0], [11700.0, 2.0], [11600.0, 1.0], [12200.0, 1.0], [12700.0, 1.0], [12500.0, 1.0], [12300.0, 2.0], [12400.0, 1.0], [13100.0, 1.0], [13000.0, 1.0], [13500.0, 1.0], [13700.0, 1.0], [13600.0, 1.0], [14000.0, 1.0], [13900.0, 2.0], [14700.0, 1.0], [15100.0, 1.0], [15300.0, 2.0], [15200.0, 1.0], [15800.0, 1.0], [15600.0, 1.0], [16000.0, 1.0], [16500.0, 1.0], [17200.0, 2.0], [16700.0, 1.0], [17300.0, 1.0], [16800.0, 1.0], [17000.0, 1.0], [17700.0, 1.0], [18300.0, 1.0], [17500.0, 1.0], [18000.0, 1.0], [18200.0, 1.0], [17900.0, 1.0], [18400.0, 1.0], [17800.0, 1.0], [18500.0, 2.0], [18800.0, 1.0], [19000.0, 2.0], [19200.0, 1.0], [18600.0, 1.0], [100.0, 1.0], [200.0, 19.0], [400.0, 3.0], [500.0, 2.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[600.0, 6.0], [700.0, 3.0], [900.0, 1.0], [1000.0, 1.0], [1100.0, 5.0], [1300.0, 1.0], [1400.0, 2.0], [1700.0, 2.0], [1800.0, 1.0], [1900.0, 1.0], [2100.0, 2.0], [2200.0, 1.0], [2500.0, 2.0], [2600.0, 1.0], [2900.0, 1.0], [3100.0, 1.0], [3200.0, 1.0], [3300.0, 1.0], [3600.0, 2.0], [3900.0, 1.0], [4200.0, 1.0], [4400.0, 1.0], [4600.0, 1.0], [4800.0, 1.0], [5000.0, 9.0], [5100.0, 10.0], [5200.0, 10.0], [5300.0, 14.0], [5500.0, 10.0], [5400.0, 14.0], [5600.0, 13.0], [5700.0, 14.0], [5800.0, 9.0], [6100.0, 1.0], [5900.0, 13.0], [6400.0, 1.0], [6700.0, 1.0], [7000.0, 1.0], [7100.0, 1.0], [7400.0, 1.0], [7700.0, 1.0], [8000.0, 1.0], [8400.0, 2.0], [8700.0, 1.0], [8600.0, 1.0], [8300.0, 1.0], [9100.0, 1.0], [9000.0, 1.0], [8800.0, 1.0], [8900.0, 1.0], [9600.0, 1.0], [9400.0, 1.0], [9300.0, 1.0], [9500.0, 1.0], [9700.0, 1.0], [10100.0, 2.0], [10000.0, 1.0], [9900.0, 1.0], [9800.0, 1.0], [10500.0, 1.0], [10400.0, 1.0], [10300.0, 1.0], [10700.0, 1.0], [10900.0, 1.0], [10800.0, 1.0], [300.0, 22.0], [400.0, 2.0], [500.0, 2.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 19200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 28.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 319.0, "series": [{"data": [[0.0, 47.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 28.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 36.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 319.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.329411764705882, "minX": 1.654608702E12, "maxY": 2.0, "series": [{"data": [[1.6546087275E12, 2.0], [1.654608705E12, 1.5], [1.6546087305E12, 1.4], [1.654608708E12, 1.4444444444444444], [1.654608711E12, 1.5], [1.654608714E12, 2.0], [1.6546087335E12, 1.4333333333333331], [1.654608717E12, 2.0], [1.6546087365E12, 1.4999999999999998], [1.65460872E12, 2.0], [1.6546087395E12, 1.4999999999999998], [1.6546087035E12, 1.4], [1.654608723E12, 2.0], [1.6546087065E12, 1.5714285714285714], [1.654608726E12, 2.0], [1.654608729E12, 1.5652173913043477], [1.6546087095E12, 1.5555555555555556], [1.654608732E12, 1.329411764705882], [1.654608735E12, 1.4827586206896548], [1.6546087125E12, 1.5454545454545454], [1.654608738E12, 1.5], [1.6546087155E12, 2.0], [1.654608741E12, 1.5624999999999996], [1.6546087185E12, 2.0], [1.6546087215E12, 2.0], [1.6546087245E12, 2.0], [1.654608702E12, 1.6]], "isOverall": false, "label": "parallel bzm - Parallel", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654608741E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 396.71428571428567, "minX": 1.0, "maxY": 19210.0, "series": [{"data": [[2.0, 1784.5], [3.0, 1017.6000000000001], [4.0, 756.0], [5.0, 5689.0], [6.0, 5783.0], [7.0, 5688.0], [8.0, 5983.0], [9.0, 5081.0], [10.0, 5191.0], [11.0, 5282.0], [13.0, 5582.0], [14.0, 5376.0], [16.0, 5648.0], [18.0, 5927.0], [19.0, 5110.0], [20.0, 5201.0], [21.0, 5309.0], [22.0, 5403.0], [26.0, 5700.0], [27.0, 5800.0], [28.0, 5727.666666666667], [29.0, 5089.0], [30.0, 5199.0], [31.0, 5388.0], [33.0, 5480.0], [32.0, 5294.0], [34.0, 5589.0], [37.0, 5836.5], [39.0, 5397.0], [38.0, 5842.0], [40.0, 5302.0], [43.0, 5143.5], [45.0, 5999.0], [44.0, 5547.0], [47.0, 5700.0], [46.0, 5794.0], [48.0, 5885.0], [53.0, 5115.0], [55.0, 5414.0], [54.0, 5303.0], [57.0, 7372.0], [56.0, 6909.285714285714], [59.0, 8513.333333333334], [58.0, 5700.0], [61.0, 8762.75], [63.0, 9749.5], [67.0, 12313.5], [66.0, 11814.5], [65.0, 17021.0], [64.0, 17854.0], [71.0, 10067.0], [70.0, 15195.0], [69.0, 9378.0], [68.0, 16864.0], [74.0, 9833.0], [75.0, 5489.0], [73.0, 5940.0], [72.0, 14812.0], [79.0, 6898.333333333333], [77.0, 8699.6], [76.0, 5100.0], [78.0, 5394.0], [83.0, 5314.0], [82.0, 18407.0], [81.0, 7339.666666666667], [87.0, 17397.0], [85.0, 15200.0], [84.0, 10083.666666666666], [91.0, 15658.666666666666], [90.0, 19210.0], [89.0, 14052.0], [88.0, 15357.0], [95.0, 14038.0], [94.0, 14473.0], [93.0, 9786.0], [92.0, 12496.0], [99.0, 18397.0], [98.0, 17599.0], [97.0, 9463.333333333334], [96.0, 10344.666666666666], [103.0, 17204.0], [102.0, 5427.0], [101.0, 13196.0], [100.0, 18800.0], [107.0, 18592.0], [106.0, 5533.0], [105.0, 5079.0], [104.0, 17798.0], [110.0, 15277.0], [109.0, 16598.0], [108.0, 9453.0], [115.0, 9085.5], [112.0, 10853.0], [114.0, 7437.0], [113.0, 5195.0], [119.0, 5692.0], [118.0, 8380.5], [117.0, 6831.8], [116.0, 5740.0], [121.0, 8262.333333333334], [122.0, 11311.75], [123.0, 8944.0], [127.0, 6877.6], [126.0, 9761.5], [125.0, 9424.5], [124.0, 5138.0], [128.0, 5863.0], [1.0, 549.7777777777778]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[63.4372093023256, 7646.599999999996]], "isOverall": false, "label": "/api/statistics/neighbourhoods-Aggregated", "isController": false}, {"data": [[2.0, 527.3333333333333], [3.0, 461.3333333333333], [4.0, 5389.0], [5.0, 4374.25], [6.0, 656.0], [7.0, 4047.0], [8.0, 3346.0], [9.0, 730.0], [10.0, 2975.5], [11.0, 5181.0], [12.0, 3187.5], [13.0, 5583.0], [14.0, 3278.5], [15.0, 3462.0], [16.0, 3395.0], [17.0, 3553.0], [18.0, 5880.0], [19.0, 1158.0], [20.0, 5202.0], [21.0, 5310.0], [22.0, 3969.0], [23.0, 3480.0], [24.0, 3628.5], [25.0, 5606.0], [27.0, 3856.0], [28.0, 4463.0], [29.0, 5089.0], [30.0, 3533.0], [32.0, 4267.0], [34.0, 3883.0], [35.0, 4476.333333333333], [36.0, 5790.0], [38.0, 4792.666666666667], [40.0, 2553.0], [41.0, 4064.5], [43.0, 5197.5], [42.0, 5192.0], [45.0, 4251.5], [44.0, 5393.0], [47.0, 4421.0], [46.0, 5793.0], [49.0, 3279.0], [48.0, 5940.0], [51.0, 3323.0], [54.0, 3603.0], [55.0, 5414.0], [56.0, 5069.5], [57.0, 8159.0], [59.0, 5229.5], [58.0, 5755.5], [61.0, 5396.5], [63.0, 4202.0], [66.0, 4474.0], [67.0, 5099.0], [65.0, 10700.0], [64.0, 5588.0], [68.0, 4609.0], [70.0, 5353.0], [69.0, 10320.0], [72.0, 6927.666666666667], [74.0, 7145.0], [75.0, 6641.75], [73.0, 10929.0], [77.0, 5290.333333333333], [79.0, 7601.5], [78.0, 5302.0], [76.0, 5301.0], [83.0, 5643.0], [82.0, 6912.0], [80.0, 5660.5], [81.0, 5689.0], [84.0, 5720.0], [86.0, 5781.0], [87.0, 9949.0], [90.0, 6132.0], [94.0, 8247.0], [95.0, 5743.0], [93.0, 5526.0], [98.0, 7627.0], [97.0, 5849.0], [102.0, 7034.0], [103.0, 5426.0], [104.0, 7130.0], [108.0, 7416.0], [111.0, 9575.0], [110.0, 5529.0], [113.0, 7300.333333333333], [115.0, 5481.0], [112.0, 7271.0], [114.0, 7375.5], [117.0, 7614.666666666667], [118.0, 5465.0], [119.0, 5482.333333333333], [116.0, 7292.5], [122.0, 7520.0], [123.0, 6989.5], [120.0, 5539.0], [127.0, 6817.2], [126.0, 6900.5], [124.0, 5194.0], [125.0, 9193.0], [128.0, 5917.5], [1.0, 396.71428571428567]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}, {"data": [[54.72093023255815, 4791.446511627905]], "isOverall": false, "label": "/api/listings?geojson=true-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 128.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 288.0, "minX": 1.654608702E12, "maxY": 2507509.3333333335, "series": [{"data": [[1.6546087275E12, 1668944.0], [1.654608705E12, 1254164.0], [1.6546087305E12, 27956.0], [1.654608708E12, 2089454.6666666667], [1.654608711E12, 2090273.3333333333], [1.654608714E12, 2086180.0], [1.6546087335E12, 20998.666666666668], [1.654608717E12, 2503416.0], [1.6546087365E12, 11680.0], [1.65460872E12, 2086180.0], [1.6546087395E12, 11680.0], [1.6546087035E12, 1253345.3333333333], [1.654608723E12, 1668944.0], [1.6546087065E12, 1254982.6666666667], [1.654608726E12, 1251708.0], [1.654608729E12, 1270345.3333333333], [1.6546087095E12, 2089454.6666666667], [1.654608732E12, 101820.0], [1.654608735E12, 51265.333333333336], [1.6546087125E12, 2507509.3333333335], [1.654608738E12, 23360.0], [1.6546087155E12, 2503416.0], [1.654608741E12, 9344.0], [1.6546087185E12, 1668944.0], [1.6546087215E12, 1668944.0], [1.6546087245E12, 2086180.0], [1.654608702E12, 836928.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6546087275E12, 384.0], [1.654608705E12, 584.0], [1.6546087305E12, 2925.3333333333335], [1.654608708E12, 874.6666666666666], [1.654608711E12, 973.3333333333334], [1.654608714E12, 480.0], [1.6546087335E12, 2922.6666666666665], [1.654608717E12, 576.0], [1.6546087365E12, 1946.6666666666667], [1.65460872E12, 480.0], [1.6546087395E12, 1946.6666666666667], [1.6546087035E12, 485.3333333333333], [1.654608723E12, 384.0], [1.6546087065E12, 682.6666666666666], [1.654608726E12, 288.0], [1.654608729E12, 2237.3333333333335], [1.6546087095E12, 874.6666666666666], [1.654608732E12, 8314.666666666666], [1.654608735E12, 5661.333333333333], [1.6546087125E12, 1069.3333333333333], [1.654608738E12, 3893.3333333333335], [1.6546087155E12, 576.0], [1.654608741E12, 1557.3333333333333], [1.6546087185E12, 384.0], [1.6546087215E12, 384.0], [1.6546087245E12, 480.0], [1.654608702E12, 488.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654608741E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 252.33333333333334, "minX": 1.654608702E12, "maxY": 11683.931034482757, "series": [{"data": [[1.6546087065E12, 260.0], [1.654608705E12, 252.33333333333334], [1.6546087305E12, 8372.117647058823], [1.654608708E12, 267.75], [1.654608729E12, 8298.636363636364], [1.654608711E12, 655.0], [1.6546087095E12, 254.25], [1.654608732E12, 11683.931034482757], [1.654608735E12, 9428.228571428572], [1.6546087125E12, 453.4], [1.6546087335E12, 7767.75], [1.654608738E12, 5545.1], [1.6546087365E12, 5545.8], [1.654608741E12, 5639.375], [1.6546087395E12, 5531.0], [1.6546087035E12, 263.0], [1.654608702E12, 576.6666666666666]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.6546087275E12, 7332.0], [1.654608705E12, 354.6666666666667], [1.6546087305E12, 6609.692307692308], [1.654608708E12, 395.6], [1.654608711E12, 384.8], [1.654608714E12, 705.4], [1.6546087335E12, 6925.357142857142], [1.654608717E12, 1616.1666666666667], [1.6546087365E12, 5544.799999999999], [1.65460872E12, 2902.2], [1.6546087395E12, 5531.9], [1.6546087035E12, 450.6666666666667], [1.654608723E12, 4545.75], [1.6546087065E12, 366.0], [1.654608726E12, 6436.0], [1.654608729E12, 6856.583333333334], [1.6546087095E12, 359.4], [1.654608732E12, 6934.11111111111], [1.654608735E12, 6237.173913043478], [1.6546087125E12, 545.1666666666667], [1.654608738E12, 5546.300000000001], [1.6546087155E12, 1101.1666666666665], [1.654608741E12, 5638.375], [1.6546087185E12, 2259.75], [1.6546087215E12, 3627.5], [1.6546087245E12, 5431.6], [1.654608702E12, 1586.5]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654608741E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 252.33333333333334, "minX": 1.654608702E12, "maxY": 11683.931034482757, "series": [{"data": [[1.6546087065E12, 260.0], [1.654608705E12, 252.33333333333334], [1.6546087305E12, 8372.117647058823], [1.654608708E12, 267.75], [1.654608729E12, 8298.636363636364], [1.654608711E12, 655.0], [1.6546087095E12, 254.25], [1.654608732E12, 11683.931034482757], [1.654608735E12, 9428.114285714286], [1.6546087125E12, 453.4], [1.6546087335E12, 7767.687500000001], [1.654608738E12, 5545.1], [1.6546087365E12, 5545.8], [1.654608741E12, 5639.375], [1.6546087395E12, 5531.0], [1.6546087035E12, 263.0], [1.654608702E12, 575.3333333333334]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.6546087275E12, 7330.75], [1.654608705E12, 353.6666666666667], [1.6546087305E12, 6609.692307692308], [1.654608708E12, 394.2], [1.654608711E12, 383.8], [1.654608714E12, 704.2], [1.6546087335E12, 6925.357142857142], [1.654608717E12, 1615.1666666666667], [1.6546087365E12, 5544.700000000001], [1.65460872E12, 2900.6], [1.6546087395E12, 5531.9], [1.6546087035E12, 449.3333333333333], [1.654608723E12, 4544.5], [1.6546087065E12, 365.0], [1.654608726E12, 6435.0], [1.654608729E12, 6856.333333333332], [1.6546087095E12, 358.2], [1.654608732E12, 6934.074074074074], [1.654608735E12, 6237.04347826087], [1.6546087125E12, 544.1666666666667], [1.654608738E12, 5546.300000000001], [1.6546087155E12, 1100.0], [1.654608741E12, 5638.375], [1.6546087185E12, 2258.75], [1.6546087215E12, 3626.5], [1.6546087245E12, 5430.6], [1.654608702E12, 1583.5]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654608741E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 5.666666666666667, "minX": 1.654608702E12, "maxY": 18.0, "series": [{"data": [[1.6546087065E12, 5.75], [1.654608705E12, 6.0], [1.6546087305E12, 6.588235294117648], [1.654608708E12, 5.75], [1.654608729E12, 6.545454545454546], [1.654608711E12, 6.2], [1.6546087095E12, 6.25], [1.654608732E12, 8.310344827586208], [1.654608735E12, 7.428571428571428], [1.6546087125E12, 9.6], [1.6546087335E12, 7.25], [1.654608738E12, 6.8500000000000005], [1.6546087365E12, 6.4], [1.654608741E12, 9.0], [1.6546087395E12, 6.7], [1.6546087035E12, 7.0], [1.654608702E12, 14.666666666666666]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.6546087275E12, 7.5], [1.654608705E12, 6.0], [1.6546087305E12, 6.615384615384616], [1.654608708E12, 6.0], [1.654608711E12, 6.2], [1.654608714E12, 7.0], [1.6546087335E12, 7.285714285714286], [1.654608717E12, 7.0], [1.6546087365E12, 6.4], [1.65460872E12, 7.2], [1.6546087395E12, 6.8], [1.6546087035E12, 7.0], [1.654608723E12, 6.5], [1.6546087065E12, 5.666666666666667], [1.654608726E12, 6.666666666666667], [1.654608729E12, 6.916666666666667], [1.6546087095E12, 5.8], [1.654608732E12, 9.111111111111112], [1.654608735E12, 7.782608695652176], [1.6546087125E12, 9.666666666666666], [1.654608738E12, 6.9], [1.6546087155E12, 9.0], [1.654608741E12, 8.875], [1.6546087185E12, 7.0], [1.6546087215E12, 7.0], [1.6546087245E12, 6.6], [1.654608702E12, 18.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654608741E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 139.0, "minX": 1.654608702E12, "maxY": 8710.0, "series": [{"data": [[1.6546087065E12, 375.0], [1.6546087275E12, 7748.0], [1.654608726E12, 6749.0], [1.654608705E12, 360.0], [1.654608708E12, 509.0], [1.654608729E12, 8710.0], [1.654608711E12, 756.0], [1.6546087095E12, 368.0], [1.654608714E12, 760.0], [1.6546087125E12, 738.0], [1.654608717E12, 1867.0], [1.6546087155E12, 1158.0], [1.65460872E12, 3279.0], [1.6546087185E12, 2503.0], [1.6546087215E12, 3925.0], [1.6546087245E12, 5781.0], [1.6546087035E12, 612.0], [1.654608702E12, 1975.0], [1.654608723E12, 4898.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6546087065E12, 375.0], [1.6546087275E12, 7748.0], [1.654608726E12, 6749.0], [1.654608705E12, 360.0], [1.654608708E12, 509.0], [1.654608729E12, 8710.0], [1.654608711E12, 755.9], [1.6546087095E12, 368.0], [1.654608714E12, 760.0], [1.6546087125E12, 719.8000000000001], [1.654608717E12, 1867.0], [1.6546087155E12, 1158.0], [1.65460872E12, 3279.0], [1.6546087185E12, 2503.0], [1.6546087215E12, 3925.0], [1.6546087245E12, 5781.0], [1.6546087035E12, 612.0], [1.654608702E12, 1975.0], [1.654608723E12, 4898.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6546087065E12, 375.0], [1.6546087275E12, 7748.0], [1.654608726E12, 6749.0], [1.654608705E12, 360.0], [1.654608708E12, 509.0], [1.654608729E12, 8710.0], [1.654608711E12, 756.0], [1.6546087095E12, 368.0], [1.654608714E12, 760.0], [1.6546087125E12, 738.0], [1.654608717E12, 1867.0], [1.6546087155E12, 1158.0], [1.65460872E12, 3279.0], [1.6546087185E12, 2503.0], [1.6546087215E12, 3925.0], [1.6546087245E12, 5781.0], [1.6546087035E12, 612.0], [1.654608702E12, 1975.0], [1.654608723E12, 4898.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6546087065E12, 375.0], [1.6546087275E12, 7748.0], [1.654608726E12, 6749.0], [1.654608705E12, 360.0], [1.654608708E12, 509.0], [1.654608729E12, 8710.0], [1.654608711E12, 756.0], [1.6546087095E12, 368.0], [1.654608714E12, 760.0], [1.6546087125E12, 738.0], [1.654608717E12, 1867.0], [1.6546087155E12, 1158.0], [1.65460872E12, 3279.0], [1.6546087185E12, 2503.0], [1.6546087215E12, 3925.0], [1.6546087245E12, 5781.0], [1.6546087035E12, 612.0], [1.654608702E12, 1975.0], [1.654608723E12, 4898.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6546087065E12, 254.0], [1.6546087275E12, 7034.0], [1.654608726E12, 6132.0], [1.654608705E12, 250.0], [1.654608708E12, 256.0], [1.654608729E12, 8048.0], [1.654608711E12, 361.0], [1.6546087095E12, 239.0], [1.654608714E12, 656.0], [1.6546087125E12, 257.0], [1.654608717E12, 1398.0], [1.6546087155E12, 997.0], [1.65460872E12, 2553.0], [1.6546087185E12, 2121.0], [1.6546087215E12, 3323.0], [1.6546087245E12, 5000.0], [1.6546087035E12, 258.0], [1.654608702E12, 139.0], [1.654608723E12, 4202.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6546087065E12, 265.0], [1.6546087275E12, 7273.0], [1.654608726E12, 6427.0], [1.654608705E12, 303.5], [1.654608708E12, 357.0], [1.654608729E12, 8405.0], [1.654608711E12, 461.5], [1.6546087095E12, 352.0], [1.654608714E12, 708.0], [1.6546087125E12, 513.0], [1.654608717E12, 1590.0], [1.6546087155E12, 1122.5], [1.65460872E12, 2911.0], [1.6546087185E12, 2207.5], [1.6546087215E12, 3631.0], [1.6546087245E12, 5375.0], [1.6546087035E12, 356.0], [1.654608702E12, 1147.0], [1.654608723E12, 4541.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654608729E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 265.0, "minX": 2.0, "maxY": 9704.5, "series": [{"data": [[4.0, 520.0], [8.0, 504.5], [2.0, 6921.5], [5.0, 265.0], [20.0, 8710.0], [3.0, 3211.0], [6.0, 358.0], [7.0, 425.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 5642.0], [37.0, 5992.0], [20.0, 5582.0], [40.0, 9704.5], [21.0, 5606.0], [45.0, 9453.0], [3.0, 5082.0], [30.0, 5824.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 45.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 265.0, "minX": 2.0, "maxY": 9704.5, "series": [{"data": [[4.0, 519.0], [8.0, 504.5], [2.0, 6920.5], [5.0, 265.0], [20.0, 8709.0], [3.0, 3209.0], [6.0, 357.0], [7.0, 424.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 5642.0], [37.0, 5992.0], [20.0, 5582.0], [40.0, 9704.5], [21.0, 5605.0], [45.0, 9453.0], [3.0, 5082.0], [30.0, 5824.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 45.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.6546087005E12, "maxY": 20.0, "series": [{"data": [[1.6546087065E12, 5.333333333333333], [1.6546087275E12, 18.666666666666668], [1.654608726E12, 18.666666666666668], [1.654608705E12, 4.0], [1.6546087305E12, 20.0], [1.654608708E12, 6.666666666666667], [1.654608729E12, 20.0], [1.654608711E12, 8.0], [1.6546087095E12, 6.666666666666667], [1.654608732E12, 20.0], [1.654608714E12, 9.333333333333334], [1.654608735E12, 14.666666666666666], [1.6546087125E12, 9.333333333333334], [1.6546087335E12, 20.0], [1.654608717E12, 12.0], [1.6546087155E12, 12.0], [1.65460872E12, 13.333333333333334], [1.6546087185E12, 13.333333333333334], [1.6546087005E12, 1.3333333333333333], [1.6546087215E12, 16.0], [1.6546087245E12, 16.0], [1.6546087035E12, 2.6666666666666665], [1.654608702E12, 2.6666666666666665], [1.654608723E12, 16.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654608735E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.654608702E12, "maxY": 36.666666666666664, "series": [{"data": [[1.6546087065E12, 4.666666666666667], [1.6546087275E12, 2.6666666666666665], [1.654608726E12, 2.0], [1.654608705E12, 4.0], [1.654608708E12, 6.0], [1.654608729E12, 2.0], [1.654608711E12, 6.666666666666667], [1.6546087095E12, 6.0], [1.654608714E12, 3.3333333333333335], [1.6546087125E12, 7.333333333333333], [1.654608717E12, 4.0], [1.6546087155E12, 4.0], [1.65460872E12, 3.3333333333333335], [1.6546087185E12, 2.6666666666666665], [1.6546087215E12, 2.6666666666666665], [1.6546087245E12, 3.3333333333333335], [1.6546087035E12, 3.3333333333333335], [1.654608702E12, 3.3333333333333335], [1.654608723E12, 2.6666666666666665]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6546087305E12, 4.0], [1.654608729E12, 2.6666666666666665], [1.654608732E12, 20.0], [1.654608735E12, 6.666666666666667], [1.6546087335E12, 1.3333333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.654608738E12, 26.666666666666668], [1.6546087365E12, 13.333333333333334], [1.6546087305E12, 16.0], [1.654608741E12, 10.666666666666666], [1.654608729E12, 10.666666666666666], [1.6546087395E12, 13.333333333333334], [1.654608732E12, 36.666666666666664], [1.654608735E12, 32.0], [1.6546087335E12, 18.666666666666668]], "isOverall": false, "label": "404", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654608741E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.654608702E12, "maxY": 38.666666666666664, "series": [{"data": [[1.6546087065E12, 2.6666666666666665], [1.654608705E12, 2.0], [1.654608708E12, 2.6666666666666665], [1.654608711E12, 3.3333333333333335], [1.6546087095E12, 2.6666666666666665], [1.6546087035E12, 1.3333333333333333], [1.654608702E12, 2.0], [1.6546087125E12, 3.3333333333333335]], "isOverall": false, "label": "/api/statistics/neighbourhoods-success", "isController": false}, {"data": [[1.6546087065E12, 2.0], [1.6546087275E12, 2.6666666666666665], [1.654608726E12, 2.0], [1.654608705E12, 2.0], [1.654608708E12, 3.3333333333333335], [1.654608729E12, 2.0], [1.654608711E12, 3.3333333333333335], [1.6546087095E12, 3.3333333333333335], [1.654608714E12, 3.3333333333333335], [1.6546087125E12, 4.0], [1.654608717E12, 4.0], [1.6546087155E12, 4.0], [1.65460872E12, 3.3333333333333335], [1.6546087185E12, 2.6666666666666665], [1.6546087215E12, 2.6666666666666665], [1.6546087245E12, 3.3333333333333335], [1.6546087035E12, 2.0], [1.654608702E12, 1.3333333333333333], [1.654608723E12, 2.6666666666666665]], "isOverall": false, "label": "/api/listings?geojson=true-success", "isController": false}, {"data": [[1.654608738E12, 13.333333333333334], [1.6546087365E12, 6.666666666666667], [1.6546087305E12, 8.666666666666666], [1.654608741E12, 5.333333333333333], [1.654608729E12, 6.0], [1.6546087395E12, 6.666666666666667], [1.654608732E12, 18.0], [1.654608735E12, 15.333333333333334], [1.6546087335E12, 9.333333333333334]], "isOverall": false, "label": "/api/listings?geojson=true-failure", "isController": false}, {"data": [[1.654608738E12, 13.333333333333334], [1.6546087365E12, 6.666666666666667], [1.6546087305E12, 11.333333333333334], [1.654608741E12, 5.333333333333333], [1.654608729E12, 7.333333333333333], [1.6546087395E12, 6.666666666666667], [1.654608732E12, 38.666666666666664], [1.654608735E12, 23.333333333333332], [1.6546087335E12, 10.666666666666666]], "isOverall": false, "label": "/api/statistics/neighbourhoods-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654608741E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.654608702E12, "maxY": 56.666666666666664, "series": [{"data": [[1.6546087065E12, 4.666666666666667], [1.6546087275E12, 2.6666666666666665], [1.654608726E12, 2.0], [1.654608705E12, 4.0], [1.654608708E12, 6.0], [1.654608729E12, 2.0], [1.654608711E12, 6.666666666666667], [1.6546087095E12, 6.0], [1.654608714E12, 3.3333333333333335], [1.6546087125E12, 7.333333333333333], [1.654608717E12, 4.0], [1.6546087155E12, 4.0], [1.65460872E12, 3.3333333333333335], [1.6546087185E12, 2.6666666666666665], [1.6546087215E12, 2.6666666666666665], [1.6546087245E12, 3.3333333333333335], [1.6546087035E12, 3.3333333333333335], [1.654608702E12, 3.3333333333333335], [1.654608723E12, 2.6666666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.654608738E12, 26.666666666666668], [1.6546087365E12, 13.333333333333334], [1.6546087305E12, 20.0], [1.654608741E12, 10.666666666666666], [1.654608729E12, 13.333333333333334], [1.6546087395E12, 13.333333333333334], [1.654608732E12, 56.666666666666664], [1.654608735E12, 38.666666666666664], [1.6546087335E12, 20.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654608741E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

