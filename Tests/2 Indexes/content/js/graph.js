/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 192.0, "minX": 0.0, "maxY": 23799.0, "series": [{"data": [[0.0, 192.0], [0.1, 192.0], [0.2, 192.0], [0.3, 192.0], [0.4, 192.0], [0.5, 194.0], [0.6, 194.0], [0.7, 194.0], [0.8, 194.0], [0.9, 194.0], [1.0, 195.0], [1.1, 195.0], [1.2, 195.0], [1.3, 195.0], [1.4, 196.0], [1.5, 196.0], [1.6, 196.0], [1.7, 196.0], [1.8, 196.0], [1.9, 198.0], [2.0, 198.0], [2.1, 198.0], [2.2, 198.0], [2.3, 198.0], [2.4, 198.0], [2.5, 198.0], [2.6, 198.0], [2.7, 198.0], [2.8, 199.0], [2.9, 199.0], [3.0, 199.0], [3.1, 199.0], [3.2, 199.0], [3.3, 199.0], [3.4, 199.0], [3.5, 199.0], [3.6, 199.0], [3.7, 199.0], [3.8, 199.0], [3.9, 199.0], [4.0, 199.0], [4.1, 199.0], [4.2, 200.0], [4.3, 200.0], [4.4, 200.0], [4.5, 200.0], [4.6, 200.0], [4.7, 201.0], [4.8, 201.0], [4.9, 201.0], [5.0, 201.0], [5.1, 201.0], [5.2, 202.0], [5.3, 202.0], [5.4, 202.0], [5.5, 202.0], [5.6, 203.0], [5.7, 203.0], [5.8, 203.0], [5.9, 203.0], [6.0, 203.0], [6.1, 206.0], [6.2, 206.0], [6.3, 206.0], [6.4, 206.0], [6.5, 206.0], [6.6, 206.0], [6.7, 206.0], [6.8, 206.0], [6.9, 206.0], [7.0, 211.0], [7.1, 211.0], [7.2, 211.0], [7.3, 211.0], [7.4, 211.0], [7.5, 215.0], [7.6, 215.0], [7.7, 215.0], [7.8, 215.0], [7.9, 215.0], [8.0, 217.0], [8.1, 217.0], [8.2, 217.0], [8.3, 217.0], [8.4, 223.0], [8.5, 223.0], [8.6, 223.0], [8.7, 223.0], [8.8, 223.0], [8.9, 228.0], [9.0, 228.0], [9.1, 228.0], [9.2, 228.0], [9.3, 228.0], [9.4, 238.0], [9.5, 238.0], [9.6, 238.0], [9.7, 238.0], [9.8, 247.0], [9.9, 247.0], [10.0, 247.0], [10.1, 247.0], [10.2, 247.0], [10.3, 248.0], [10.4, 248.0], [10.5, 248.0], [10.6, 248.0], [10.7, 255.0], [10.8, 255.0], [10.9, 255.0], [11.0, 255.0], [11.1, 255.0], [11.2, 261.0], [11.3, 261.0], [11.4, 261.0], [11.5, 261.0], [11.6, 261.0], [11.7, 262.0], [11.8, 262.0], [11.9, 262.0], [12.0, 262.0], [12.1, 263.0], [12.2, 263.0], [12.3, 263.0], [12.4, 263.0], [12.5, 263.0], [12.6, 267.0], [12.7, 267.0], [12.8, 267.0], [12.9, 267.0], [13.0, 267.0], [13.1, 269.0], [13.2, 269.0], [13.3, 269.0], [13.4, 269.0], [13.5, 273.0], [13.6, 273.0], [13.7, 273.0], [13.8, 273.0], [13.9, 273.0], [14.0, 281.0], [14.1, 281.0], [14.2, 281.0], [14.3, 281.0], [14.4, 281.0], [14.5, 282.0], [14.6, 282.0], [14.7, 282.0], [14.8, 282.0], [14.9, 284.0], [15.0, 284.0], [15.1, 284.0], [15.2, 284.0], [15.3, 284.0], [15.4, 286.0], [15.5, 286.0], [15.6, 286.0], [15.7, 286.0], [15.8, 286.0], [15.9, 287.0], [16.0, 287.0], [16.1, 287.0], [16.2, 287.0], [16.3, 290.0], [16.4, 290.0], [16.5, 290.0], [16.6, 290.0], [16.7, 290.0], [16.8, 295.0], [16.9, 295.0], [17.0, 295.0], [17.1, 295.0], [17.2, 295.0], [17.3, 302.0], [17.4, 302.0], [17.5, 302.0], [17.6, 302.0], [17.7, 323.0], [17.8, 323.0], [17.9, 323.0], [18.0, 323.0], [18.1, 323.0], [18.2, 326.0], [18.3, 326.0], [18.4, 326.0], [18.5, 326.0], [18.6, 326.0], [18.7, 340.0], [18.8, 340.0], [18.9, 340.0], [19.0, 340.0], [19.1, 341.0], [19.2, 341.0], [19.3, 341.0], [19.4, 341.0], [19.5, 341.0], [19.6, 344.0], [19.7, 344.0], [19.8, 344.0], [19.9, 344.0], [20.0, 344.0], [20.1, 349.0], [20.2, 349.0], [20.3, 349.0], [20.4, 349.0], [20.5, 355.0], [20.6, 355.0], [20.7, 355.0], [20.8, 355.0], [20.9, 355.0], [21.0, 356.0], [21.1, 356.0], [21.2, 356.0], [21.3, 356.0], [21.4, 357.0], [21.5, 357.0], [21.6, 357.0], [21.7, 357.0], [21.8, 357.0], [21.9, 361.0], [22.0, 361.0], [22.1, 361.0], [22.2, 361.0], [22.3, 361.0], [22.4, 365.0], [22.5, 365.0], [22.6, 365.0], [22.7, 365.0], [22.8, 369.0], [22.9, 369.0], [23.0, 369.0], [23.1, 369.0], [23.2, 369.0], [23.3, 373.0], [23.4, 373.0], [23.5, 373.0], [23.6, 373.0], [23.7, 373.0], [23.8, 374.0], [23.9, 374.0], [24.0, 374.0], [24.1, 374.0], [24.2, 375.0], [24.3, 375.0], [24.4, 375.0], [24.5, 375.0], [24.6, 375.0], [24.7, 376.0], [24.8, 376.0], [24.9, 376.0], [25.0, 376.0], [25.1, 376.0], [25.2, 376.0], [25.3, 376.0], [25.4, 376.0], [25.5, 376.0], [25.6, 381.0], [25.7, 381.0], [25.8, 381.0], [25.9, 381.0], [26.0, 381.0], [26.1, 382.0], [26.2, 382.0], [26.3, 382.0], [26.4, 382.0], [26.5, 382.0], [26.6, 392.0], [26.7, 392.0], [26.8, 392.0], [26.9, 392.0], [27.0, 398.0], [27.1, 398.0], [27.2, 398.0], [27.3, 398.0], [27.4, 398.0], [27.5, 402.0], [27.6, 402.0], [27.7, 402.0], [27.8, 402.0], [27.9, 402.0], [28.0, 405.0], [28.1, 405.0], [28.2, 405.0], [28.3, 405.0], [28.4, 408.0], [28.5, 408.0], [28.6, 408.0], [28.7, 408.0], [28.8, 408.0], [28.9, 410.0], [29.0, 410.0], [29.1, 410.0], [29.2, 410.0], [29.3, 410.0], [29.4, 414.0], [29.5, 414.0], [29.6, 414.0], [29.7, 414.0], [29.8, 420.0], [29.9, 420.0], [30.0, 420.0], [30.1, 420.0], [30.2, 420.0], [30.3, 420.0], [30.4, 420.0], [30.5, 420.0], [30.6, 420.0], [30.7, 424.0], [30.8, 424.0], [30.9, 424.0], [31.0, 424.0], [31.1, 424.0], [31.2, 429.0], [31.3, 429.0], [31.4, 429.0], [31.5, 429.0], [31.6, 429.0], [31.7, 438.0], [31.8, 438.0], [31.9, 438.0], [32.0, 438.0], [32.1, 442.0], [32.2, 442.0], [32.3, 442.0], [32.4, 442.0], [32.5, 442.0], [32.6, 446.0], [32.7, 446.0], [32.8, 446.0], [32.9, 446.0], [33.0, 446.0], [33.1, 450.0], [33.2, 450.0], [33.3, 450.0], [33.4, 450.0], [33.5, 453.0], [33.6, 453.0], [33.7, 453.0], [33.8, 453.0], [33.9, 453.0], [34.0, 458.0], [34.1, 458.0], [34.2, 458.0], [34.3, 458.0], [34.4, 458.0], [34.5, 468.0], [34.6, 468.0], [34.7, 468.0], [34.8, 468.0], [34.9, 472.0], [35.0, 472.0], [35.1, 472.0], [35.2, 472.0], [35.3, 472.0], [35.4, 472.0], [35.5, 472.0], [35.6, 472.0], [35.7, 472.0], [35.8, 472.0], [35.9, 475.0], [36.0, 475.0], [36.1, 475.0], [36.2, 475.0], [36.3, 485.0], [36.4, 485.0], [36.5, 485.0], [36.6, 485.0], [36.7, 485.0], [36.8, 498.0], [36.9, 498.0], [37.0, 498.0], [37.1, 498.0], [37.2, 498.0], [37.3, 500.0], [37.4, 500.0], [37.5, 500.0], [37.6, 500.0], [37.7, 505.0], [37.8, 505.0], [37.9, 505.0], [38.0, 505.0], [38.1, 505.0], [38.2, 506.0], [38.3, 506.0], [38.4, 506.0], [38.5, 506.0], [38.6, 506.0], [38.7, 517.0], [38.8, 517.0], [38.9, 517.0], [39.0, 517.0], [39.1, 521.0], [39.2, 521.0], [39.3, 521.0], [39.4, 521.0], [39.5, 521.0], [39.6, 523.0], [39.7, 523.0], [39.8, 523.0], [39.9, 523.0], [40.0, 523.0], [40.1, 524.0], [40.2, 524.0], [40.3, 524.0], [40.4, 524.0], [40.5, 527.0], [40.6, 527.0], [40.7, 527.0], [40.8, 527.0], [40.9, 527.0], [41.0, 533.0], [41.1, 533.0], [41.2, 533.0], [41.3, 533.0], [41.4, 535.0], [41.5, 535.0], [41.6, 535.0], [41.7, 535.0], [41.8, 535.0], [41.9, 543.0], [42.0, 543.0], [42.1, 543.0], [42.2, 543.0], [42.3, 543.0], [42.4, 558.0], [42.5, 558.0], [42.6, 558.0], [42.7, 558.0], [42.8, 559.0], [42.9, 559.0], [43.0, 559.0], [43.1, 559.0], [43.2, 559.0], [43.3, 569.0], [43.4, 569.0], [43.5, 569.0], [43.6, 569.0], [43.7, 569.0], [43.8, 583.0], [43.9, 583.0], [44.0, 583.0], [44.1, 583.0], [44.2, 594.0], [44.3, 594.0], [44.4, 594.0], [44.5, 594.0], [44.6, 594.0], [44.7, 595.0], [44.8, 595.0], [44.9, 595.0], [45.0, 595.0], [45.1, 595.0], [45.2, 599.0], [45.3, 599.0], [45.4, 599.0], [45.5, 599.0], [45.6, 607.0], [45.7, 607.0], [45.8, 607.0], [45.9, 607.0], [46.0, 607.0], [46.1, 623.0], [46.2, 623.0], [46.3, 623.0], [46.4, 623.0], [46.5, 623.0], [46.6, 655.0], [46.7, 655.0], [46.8, 655.0], [46.9, 655.0], [47.0, 663.0], [47.1, 663.0], [47.2, 663.0], [47.3, 663.0], [47.4, 663.0], [47.5, 663.0], [47.6, 663.0], [47.7, 663.0], [47.8, 663.0], [47.9, 663.0], [48.0, 684.0], [48.1, 684.0], [48.2, 684.0], [48.3, 684.0], [48.4, 696.0], [48.5, 696.0], [48.6, 696.0], [48.7, 696.0], [48.8, 696.0], [48.9, 702.0], [49.0, 702.0], [49.1, 702.0], [49.2, 702.0], [49.3, 702.0], [49.4, 704.0], [49.5, 704.0], [49.6, 704.0], [49.7, 704.0], [49.8, 735.0], [49.9, 735.0], [50.0, 735.0], [50.1, 735.0], [50.2, 735.0], [50.3, 735.0], [50.4, 735.0], [50.5, 735.0], [50.6, 735.0], [50.7, 743.0], [50.8, 743.0], [50.9, 743.0], [51.0, 743.0], [51.1, 743.0], [51.2, 759.0], [51.3, 759.0], [51.4, 759.0], [51.5, 759.0], [51.6, 759.0], [51.7, 774.0], [51.8, 774.0], [51.9, 774.0], [52.0, 774.0], [52.1, 776.0], [52.2, 776.0], [52.3, 776.0], [52.4, 776.0], [52.5, 776.0], [52.6, 779.0], [52.7, 779.0], [52.8, 779.0], [52.9, 779.0], [53.0, 779.0], [53.1, 782.0], [53.2, 782.0], [53.3, 782.0], [53.4, 782.0], [53.5, 787.0], [53.6, 787.0], [53.7, 787.0], [53.8, 787.0], [53.9, 787.0], [54.0, 789.0], [54.1, 789.0], [54.2, 789.0], [54.3, 789.0], [54.4, 789.0], [54.5, 790.0], [54.6, 790.0], [54.7, 790.0], [54.8, 790.0], [54.9, 799.0], [55.0, 799.0], [55.1, 799.0], [55.2, 799.0], [55.3, 799.0], [55.4, 809.0], [55.5, 809.0], [55.6, 809.0], [55.7, 809.0], [55.8, 809.0], [55.9, 816.0], [56.0, 816.0], [56.1, 816.0], [56.2, 816.0], [56.3, 819.0], [56.4, 819.0], [56.5, 819.0], [56.6, 819.0], [56.7, 819.0], [56.8, 846.0], [56.9, 846.0], [57.0, 846.0], [57.1, 846.0], [57.2, 846.0], [57.3, 851.0], [57.4, 851.0], [57.5, 851.0], [57.6, 851.0], [57.7, 859.0], [57.8, 859.0], [57.9, 859.0], [58.0, 859.0], [58.1, 859.0], [58.2, 871.0], [58.3, 871.0], [58.4, 871.0], [58.5, 871.0], [58.6, 871.0], [58.7, 876.0], [58.8, 876.0], [58.9, 876.0], [59.0, 876.0], [59.1, 889.0], [59.2, 889.0], [59.3, 889.0], [59.4, 889.0], [59.5, 889.0], [59.6, 892.0], [59.7, 892.0], [59.8, 892.0], [59.9, 892.0], [60.0, 892.0], [60.1, 908.0], [60.2, 908.0], [60.3, 908.0], [60.4, 908.0], [60.5, 923.0], [60.6, 923.0], [60.7, 923.0], [60.8, 923.0], [60.9, 923.0], [61.0, 928.0], [61.1, 928.0], [61.2, 928.0], [61.3, 928.0], [61.4, 935.0], [61.5, 935.0], [61.6, 935.0], [61.7, 935.0], [61.8, 935.0], [61.9, 953.0], [62.0, 953.0], [62.1, 953.0], [62.2, 953.0], [62.3, 953.0], [62.4, 959.0], [62.5, 959.0], [62.6, 959.0], [62.7, 959.0], [62.8, 980.0], [62.9, 980.0], [63.0, 980.0], [63.1, 980.0], [63.2, 980.0], [63.3, 1002.0], [63.4, 1002.0], [63.5, 1002.0], [63.6, 1002.0], [63.7, 1002.0], [63.8, 1039.0], [63.9, 1039.0], [64.0, 1039.0], [64.1, 1039.0], [64.2, 1041.0], [64.3, 1041.0], [64.4, 1041.0], [64.5, 1041.0], [64.6, 1041.0], [64.7, 1081.0], [64.8, 1081.0], [64.9, 1081.0], [65.0, 1081.0], [65.1, 1081.0], [65.2, 1352.0], [65.3, 1352.0], [65.4, 1352.0], [65.5, 1352.0], [65.6, 1397.0], [65.7, 1397.0], [65.8, 1397.0], [65.9, 1397.0], [66.0, 1397.0], [66.1, 1400.0], [66.2, 1400.0], [66.3, 1400.0], [66.4, 1400.0], [66.5, 1400.0], [66.6, 1489.0], [66.7, 1489.0], [66.8, 1489.0], [66.9, 1489.0], [67.0, 1677.0], [67.1, 1677.0], [67.2, 1677.0], [67.3, 1677.0], [67.4, 1677.0], [67.5, 1680.0], [67.6, 1680.0], [67.7, 1680.0], [67.8, 1680.0], [67.9, 1680.0], [68.0, 1689.0], [68.1, 1689.0], [68.2, 1689.0], [68.3, 1689.0], [68.4, 1690.0], [68.5, 1690.0], [68.6, 1690.0], [68.7, 1690.0], [68.8, 1690.0], [68.9, 1730.0], [69.0, 1730.0], [69.1, 1730.0], [69.2, 1730.0], [69.3, 1730.0], [69.4, 1738.0], [69.5, 1738.0], [69.6, 1738.0], [69.7, 1738.0], [69.8, 1770.0], [69.9, 1770.0], [70.0, 1770.0], [70.1, 1770.0], [70.2, 1770.0], [70.3, 1772.0], [70.4, 1772.0], [70.5, 1772.0], [70.6, 1772.0], [70.7, 1786.0], [70.8, 1786.0], [70.9, 1786.0], [71.0, 1786.0], [71.1, 1786.0], [71.2, 1841.0], [71.3, 1841.0], [71.4, 1841.0], [71.5, 1841.0], [71.6, 1841.0], [71.7, 1909.0], [71.8, 1909.0], [71.9, 1909.0], [72.0, 1909.0], [72.1, 1910.0], [72.2, 1910.0], [72.3, 1910.0], [72.4, 1910.0], [72.5, 1910.0], [72.6, 1921.0], [72.7, 1921.0], [72.8, 1921.0], [72.9, 1921.0], [73.0, 1921.0], [73.1, 2138.0], [73.2, 2138.0], [73.3, 2138.0], [73.4, 2138.0], [73.5, 2147.0], [73.6, 2147.0], [73.7, 2147.0], [73.8, 2147.0], [73.9, 2147.0], [74.0, 3267.0], [74.1, 3267.0], [74.2, 3267.0], [74.3, 3267.0], [74.4, 3267.0], [74.5, 3447.0], [74.6, 3447.0], [74.7, 3447.0], [74.8, 3447.0], [74.9, 3572.0], [75.0, 3572.0], [75.1, 3572.0], [75.2, 3572.0], [75.3, 3572.0], [75.4, 3760.0], [75.5, 3760.0], [75.6, 3760.0], [75.7, 3760.0], [75.8, 3760.0], [75.9, 3843.0], [76.0, 3843.0], [76.1, 3843.0], [76.2, 3843.0], [76.3, 3934.0], [76.4, 3934.0], [76.5, 3934.0], [76.6, 3934.0], [76.7, 3934.0], [76.8, 4325.0], [76.9, 4325.0], [77.0, 4325.0], [77.1, 4325.0], [77.2, 4325.0], [77.3, 4644.0], [77.4, 4644.0], [77.5, 4644.0], [77.6, 4644.0], [77.7, 4724.0], [77.8, 4724.0], [77.9, 4724.0], [78.0, 4724.0], [78.1, 4724.0], [78.2, 4771.0], [78.3, 4771.0], [78.4, 4771.0], [78.5, 4771.0], [78.6, 4771.0], [78.7, 4819.0], [78.8, 4819.0], [78.9, 4819.0], [79.0, 4819.0], [79.1, 5110.0], [79.2, 5110.0], [79.3, 5110.0], [79.4, 5110.0], [79.5, 5110.0], [79.6, 5281.0], [79.7, 5281.0], [79.8, 5281.0], [79.9, 5281.0], [80.0, 5349.0], [80.1, 5349.0], [80.2, 5349.0], [80.3, 5349.0], [80.4, 5349.0], [80.5, 5781.0], [80.6, 5781.0], [80.7, 5781.0], [80.8, 5781.0], [80.9, 5781.0], [81.0, 6124.0], [81.1, 6124.0], [81.2, 6124.0], [81.3, 6124.0], [81.4, 6269.0], [81.5, 6269.0], [81.6, 6269.0], [81.7, 6269.0], [81.8, 6269.0], [81.9, 6327.0], [82.0, 6327.0], [82.1, 6327.0], [82.2, 6327.0], [82.3, 6327.0], [82.4, 7533.0], [82.5, 7533.0], [82.6, 7533.0], [82.7, 7533.0], [82.8, 7670.0], [82.9, 7670.0], [83.0, 7670.0], [83.1, 7670.0], [83.2, 7670.0], [83.3, 7788.0], [83.4, 7788.0], [83.5, 7788.0], [83.6, 7788.0], [83.7, 7788.0], [83.8, 7795.0], [83.9, 7795.0], [84.0, 7795.0], [84.1, 7795.0], [84.2, 8032.0], [84.3, 8032.0], [84.4, 8032.0], [84.5, 8032.0], [84.6, 8032.0], [84.7, 8037.0], [84.8, 8037.0], [84.9, 8037.0], [85.0, 8037.0], [85.1, 8037.0], [85.2, 9326.0], [85.3, 9326.0], [85.4, 9326.0], [85.5, 9326.0], [85.6, 9338.0], [85.7, 9338.0], [85.8, 9338.0], [85.9, 9338.0], [86.0, 9338.0], [86.1, 9395.0], [86.2, 9395.0], [86.3, 9395.0], [86.4, 9395.0], [86.5, 9395.0], [86.6, 9691.0], [86.7, 9691.0], [86.8, 9691.0], [86.9, 9691.0], [87.0, 9951.0], [87.1, 9951.0], [87.2, 9951.0], [87.3, 9951.0], [87.4, 9951.0], [87.5, 10431.0], [87.6, 10431.0], [87.7, 10431.0], [87.8, 10431.0], [87.9, 10431.0], [88.0, 10895.0], [88.1, 10895.0], [88.2, 10895.0], [88.3, 10895.0], [88.4, 11003.0], [88.5, 11003.0], [88.6, 11003.0], [88.7, 11003.0], [88.8, 11003.0], [88.9, 11344.0], [89.0, 11344.0], [89.1, 11344.0], [89.2, 11344.0], [89.3, 11344.0], [89.4, 11682.0], [89.5, 11682.0], [89.6, 11682.0], [89.7, 11682.0], [89.8, 11909.0], [89.9, 11909.0], [90.0, 11909.0], [90.1, 11909.0], [90.2, 11909.0], [90.3, 11923.0], [90.4, 11923.0], [90.5, 11923.0], [90.6, 11923.0], [90.7, 11942.0], [90.8, 11942.0], [90.9, 11942.0], [91.0, 11942.0], [91.1, 11942.0], [91.2, 11992.0], [91.3, 11992.0], [91.4, 11992.0], [91.5, 11992.0], [91.6, 11992.0], [91.7, 12032.0], [91.8, 12032.0], [91.9, 12032.0], [92.0, 12032.0], [92.1, 12119.0], [92.2, 12119.0], [92.3, 12119.0], [92.4, 12119.0], [92.5, 12119.0], [92.6, 12330.0], [92.7, 12330.0], [92.8, 12330.0], [92.9, 12330.0], [93.0, 12330.0], [93.1, 12393.0], [93.2, 12393.0], [93.3, 12393.0], [93.4, 12393.0], [93.5, 12407.0], [93.6, 12407.0], [93.7, 12407.0], [93.8, 12407.0], [93.9, 12407.0], [94.0, 12426.0], [94.1, 12426.0], [94.2, 12426.0], [94.3, 12426.0], [94.4, 12426.0], [94.5, 12470.0], [94.6, 12470.0], [94.7, 12470.0], [94.8, 12470.0], [94.9, 12539.0], [95.0, 12539.0], [95.1, 12539.0], [95.2, 12539.0], [95.3, 12539.0], [95.4, 12564.0], [95.5, 12564.0], [95.6, 12564.0], [95.7, 12564.0], [95.8, 12564.0], [95.9, 12628.0], [96.0, 12628.0], [96.1, 12628.0], [96.2, 12628.0], [96.3, 12633.0], [96.4, 12633.0], [96.5, 12633.0], [96.6, 12633.0], [96.7, 12633.0], [96.8, 12634.0], [96.9, 12634.0], [97.0, 12634.0], [97.1, 12634.0], [97.2, 12634.0], [97.3, 12636.0], [97.4, 12636.0], [97.5, 12636.0], [97.6, 12636.0], [97.7, 12687.0], [97.8, 12687.0], [97.9, 12687.0], [98.0, 12687.0], [98.1, 12687.0], [98.2, 12696.0], [98.3, 12696.0], [98.4, 12696.0], [98.5, 12696.0], [98.6, 12696.0], [98.7, 12741.0], [98.8, 12741.0], [98.9, 12741.0], [99.0, 12741.0], [99.1, 12746.0], [99.2, 12746.0], [99.3, 12746.0], [99.4, 12746.0], [99.5, 12746.0], [99.6, 12799.0], [99.7, 12799.0], [99.8, 12799.0], [99.9, 12799.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[0.0, 299.0], [0.1, 299.0], [0.2, 299.0], [0.3, 299.0], [0.4, 299.0], [0.5, 300.0], [0.6, 300.0], [0.7, 300.0], [0.8, 300.0], [0.9, 300.0], [1.0, 301.0], [1.1, 301.0], [1.2, 301.0], [1.3, 301.0], [1.4, 304.0], [1.5, 304.0], [1.6, 304.0], [1.7, 304.0], [1.8, 304.0], [1.9, 306.0], [2.0, 306.0], [2.1, 306.0], [2.2, 306.0], [2.3, 306.0], [2.4, 306.0], [2.5, 306.0], [2.6, 306.0], [2.7, 306.0], [2.8, 307.0], [2.9, 307.0], [3.0, 307.0], [3.1, 307.0], [3.2, 307.0], [3.3, 307.0], [3.4, 307.0], [3.5, 307.0], [3.6, 307.0], [3.7, 307.0], [3.8, 307.0], [3.9, 307.0], [4.0, 307.0], [4.1, 307.0], [4.2, 308.0], [4.3, 308.0], [4.4, 308.0], [4.5, 308.0], [4.6, 308.0], [4.7, 309.0], [4.8, 309.0], [4.9, 309.0], [5.0, 309.0], [5.1, 309.0], [5.2, 309.0], [5.3, 309.0], [5.4, 309.0], [5.5, 309.0], [5.6, 311.0], [5.7, 311.0], [5.8, 311.0], [5.9, 311.0], [6.0, 311.0], [6.1, 311.0], [6.2, 311.0], [6.3, 311.0], [6.4, 311.0], [6.5, 311.0], [6.6, 312.0], [6.7, 312.0], [6.8, 312.0], [6.9, 312.0], [7.0, 329.0], [7.1, 329.0], [7.2, 329.0], [7.3, 329.0], [7.4, 329.0], [7.5, 338.0], [7.6, 338.0], [7.7, 338.0], [7.8, 338.0], [7.9, 338.0], [8.0, 350.0], [8.1, 350.0], [8.2, 350.0], [8.3, 350.0], [8.4, 357.0], [8.5, 357.0], [8.6, 357.0], [8.7, 357.0], [8.8, 357.0], [8.9, 360.0], [9.0, 360.0], [9.1, 360.0], [9.2, 360.0], [9.3, 360.0], [9.4, 363.0], [9.5, 363.0], [9.6, 363.0], [9.7, 363.0], [9.8, 378.0], [9.9, 378.0], [10.0, 378.0], [10.1, 378.0], [10.2, 378.0], [10.3, 400.0], [10.4, 400.0], [10.5, 400.0], [10.6, 400.0], [10.7, 412.0], [10.8, 412.0], [10.9, 412.0], [11.0, 412.0], [11.1, 412.0], [11.2, 418.0], [11.3, 418.0], [11.4, 418.0], [11.5, 418.0], [11.6, 418.0], [11.7, 422.0], [11.8, 422.0], [11.9, 422.0], [12.0, 422.0], [12.1, 422.0], [12.2, 422.0], [12.3, 422.0], [12.4, 422.0], [12.5, 422.0], [12.6, 438.0], [12.7, 438.0], [12.8, 438.0], [12.9, 438.0], [13.0, 438.0], [13.1, 451.0], [13.2, 451.0], [13.3, 451.0], [13.4, 451.0], [13.5, 460.0], [13.6, 460.0], [13.7, 460.0], [13.8, 460.0], [13.9, 460.0], [14.0, 465.0], [14.1, 465.0], [14.2, 465.0], [14.3, 465.0], [14.4, 465.0], [14.5, 501.0], [14.6, 501.0], [14.7, 501.0], [14.8, 501.0], [14.9, 515.0], [15.0, 515.0], [15.1, 515.0], [15.2, 515.0], [15.3, 515.0], [15.4, 559.0], [15.5, 559.0], [15.6, 559.0], [15.7, 559.0], [15.8, 559.0], [15.9, 579.0], [16.0, 579.0], [16.1, 579.0], [16.2, 579.0], [16.3, 587.0], [16.4, 587.0], [16.5, 587.0], [16.6, 587.0], [16.7, 587.0], [16.8, 589.0], [16.9, 589.0], [17.0, 589.0], [17.1, 589.0], [17.2, 589.0], [17.3, 594.0], [17.4, 594.0], [17.5, 594.0], [17.6, 594.0], [17.7, 604.0], [17.8, 604.0], [17.9, 604.0], [18.0, 604.0], [18.1, 604.0], [18.2, 605.0], [18.3, 605.0], [18.4, 605.0], [18.5, 605.0], [18.6, 605.0], [18.7, 630.0], [18.8, 630.0], [18.9, 630.0], [19.0, 630.0], [19.1, 667.0], [19.2, 667.0], [19.3, 667.0], [19.4, 667.0], [19.5, 667.0], [19.6, 838.0], [19.7, 838.0], [19.8, 838.0], [19.9, 838.0], [20.0, 838.0], [20.1, 1024.0], [20.2, 1024.0], [20.3, 1024.0], [20.4, 1024.0], [20.5, 1314.0], [20.6, 1314.0], [20.7, 1314.0], [20.8, 1314.0], [20.9, 1314.0], [21.0, 1338.0], [21.1, 1338.0], [21.2, 1338.0], [21.3, 1338.0], [21.4, 1357.0], [21.5, 1357.0], [21.6, 1357.0], [21.7, 1357.0], [21.8, 1357.0], [21.9, 1428.0], [22.0, 1428.0], [22.1, 1428.0], [22.2, 1428.0], [22.3, 1428.0], [22.4, 1582.0], [22.5, 1582.0], [22.6, 1582.0], [22.7, 1582.0], [22.8, 1679.0], [22.9, 1679.0], [23.0, 1679.0], [23.1, 1679.0], [23.2, 1679.0], [23.3, 1766.0], [23.4, 1766.0], [23.5, 1766.0], [23.6, 1766.0], [23.7, 1766.0], [23.8, 1966.0], [23.9, 1966.0], [24.0, 1966.0], [24.1, 1966.0], [24.2, 1986.0], [24.3, 1986.0], [24.4, 1986.0], [24.5, 1986.0], [24.6, 1986.0], [24.7, 2132.0], [24.8, 2132.0], [24.9, 2132.0], [25.0, 2132.0], [25.1, 2132.0], [25.2, 2178.0], [25.3, 2178.0], [25.4, 2178.0], [25.5, 2178.0], [25.6, 2298.0], [25.7, 2298.0], [25.8, 2298.0], [25.9, 2298.0], [26.0, 2298.0], [26.1, 2540.0], [26.2, 2540.0], [26.3, 2540.0], [26.4, 2540.0], [26.5, 2540.0], [26.6, 2585.0], [26.7, 2585.0], [26.8, 2585.0], [26.9, 2585.0], [27.0, 2843.0], [27.1, 2843.0], [27.2, 2843.0], [27.3, 2843.0], [27.4, 2843.0], [27.5, 2921.0], [27.6, 2921.0], [27.7, 2921.0], [27.8, 2921.0], [27.9, 2921.0], [28.0, 3365.0], [28.1, 3365.0], [28.2, 3365.0], [28.3, 3365.0], [28.4, 3441.0], [28.5, 3441.0], [28.6, 3441.0], [28.7, 3441.0], [28.8, 3441.0], [28.9, 3553.0], [29.0, 3553.0], [29.1, 3553.0], [29.2, 3553.0], [29.3, 3553.0], [29.4, 3695.0], [29.5, 3695.0], [29.6, 3695.0], [29.7, 3695.0], [29.8, 3881.0], [29.9, 3881.0], [30.0, 3881.0], [30.1, 3881.0], [30.2, 3881.0], [30.3, 4246.0], [30.4, 4246.0], [30.5, 4246.0], [30.6, 4246.0], [30.7, 4469.0], [30.8, 4469.0], [30.9, 4469.0], [31.0, 4469.0], [31.1, 4469.0], [31.2, 4653.0], [31.3, 4653.0], [31.4, 4653.0], [31.5, 4653.0], [31.6, 4653.0], [31.7, 5055.0], [31.8, 5055.0], [31.9, 5055.0], [32.0, 5055.0], [32.1, 5262.0], [32.2, 5262.0], [32.3, 5262.0], [32.4, 5262.0], [32.5, 5262.0], [32.6, 5635.0], [32.7, 5635.0], [32.8, 5635.0], [32.9, 5635.0], [33.0, 5635.0], [33.1, 6169.0], [33.2, 6169.0], [33.3, 6169.0], [33.4, 6169.0], [33.5, 6202.0], [33.6, 6202.0], [33.7, 6202.0], [33.8, 6202.0], [33.9, 6202.0], [34.0, 6322.0], [34.1, 6322.0], [34.2, 6322.0], [34.3, 6322.0], [34.4, 6322.0], [34.5, 6581.0], [34.6, 6581.0], [34.7, 6581.0], [34.8, 6581.0], [34.9, 7083.0], [35.0, 7083.0], [35.1, 7083.0], [35.2, 7083.0], [35.3, 7083.0], [35.4, 8079.0], [35.5, 8079.0], [35.6, 8079.0], [35.7, 8079.0], [35.8, 8079.0], [35.9, 8859.0], [36.0, 8859.0], [36.1, 8859.0], [36.2, 8859.0], [36.3, 9086.0], [36.4, 9086.0], [36.5, 9086.0], [36.6, 9086.0], [36.7, 9086.0], [36.8, 9309.0], [36.9, 9309.0], [37.0, 9309.0], [37.1, 9309.0], [37.2, 9309.0], [37.3, 10611.0], [37.4, 10611.0], [37.5, 10611.0], [37.6, 10611.0], [37.7, 10900.0], [37.8, 10900.0], [37.9, 10900.0], [38.0, 10900.0], [38.1, 10900.0], [38.2, 11317.0], [38.3, 11317.0], [38.4, 11317.0], [38.5, 11317.0], [38.6, 11317.0], [38.7, 12307.0], [38.8, 12307.0], [38.9, 12307.0], [39.0, 12307.0], [39.1, 12548.0], [39.2, 12548.0], [39.3, 12548.0], [39.4, 12548.0], [39.5, 12548.0], [39.6, 13325.0], [39.7, 13325.0], [39.8, 13325.0], [39.9, 13325.0], [40.0, 13325.0], [40.1, 13542.0], [40.2, 13542.0], [40.3, 13542.0], [40.4, 13542.0], [40.5, 13863.0], [40.6, 13863.0], [40.7, 13863.0], [40.8, 13863.0], [40.9, 13863.0], [41.0, 13963.0], [41.1, 13963.0], [41.2, 13963.0], [41.3, 13963.0], [41.4, 14186.0], [41.5, 14186.0], [41.6, 14186.0], [41.7, 14186.0], [41.8, 14186.0], [41.9, 14241.0], [42.0, 14241.0], [42.1, 14241.0], [42.2, 14241.0], [42.3, 14241.0], [42.4, 14735.0], [42.5, 14735.0], [42.6, 14735.0], [42.7, 14735.0], [42.8, 15888.0], [42.9, 15888.0], [43.0, 15888.0], [43.1, 15888.0], [43.2, 15888.0], [43.3, 16008.0], [43.4, 16008.0], [43.5, 16008.0], [43.6, 16008.0], [43.7, 16008.0], [43.8, 16028.0], [43.9, 16028.0], [44.0, 16028.0], [44.1, 16028.0], [44.2, 16056.0], [44.3, 16056.0], [44.4, 16056.0], [44.5, 16056.0], [44.6, 16056.0], [44.7, 16247.0], [44.8, 16247.0], [44.9, 16247.0], [45.0, 16247.0], [45.1, 16247.0], [45.2, 16268.0], [45.3, 16268.0], [45.4, 16268.0], [45.5, 16268.0], [45.6, 17167.0], [45.7, 17167.0], [45.8, 17167.0], [45.9, 17167.0], [46.0, 17167.0], [46.1, 17202.0], [46.2, 17202.0], [46.3, 17202.0], [46.4, 17202.0], [46.5, 17202.0], [46.6, 18000.0], [46.7, 18000.0], [46.8, 18000.0], [46.9, 18000.0], [47.0, 18314.0], [47.1, 18314.0], [47.2, 18314.0], [47.3, 18314.0], [47.4, 18314.0], [47.5, 18530.0], [47.6, 18530.0], [47.7, 18530.0], [47.8, 18530.0], [47.9, 18530.0], [48.0, 18590.0], [48.1, 18590.0], [48.2, 18590.0], [48.3, 18590.0], [48.4, 18834.0], [48.5, 18834.0], [48.6, 18834.0], [48.7, 18834.0], [48.8, 18834.0], [48.9, 18913.0], [49.0, 18913.0], [49.1, 18913.0], [49.2, 18913.0], [49.3, 18913.0], [49.4, 19165.0], [49.5, 19165.0], [49.6, 19165.0], [49.7, 19165.0], [49.8, 19409.0], [49.9, 19409.0], [50.0, 19409.0], [50.1, 19409.0], [50.2, 19409.0], [50.3, 19616.0], [50.4, 19616.0], [50.5, 19616.0], [50.6, 19616.0], [50.7, 19662.0], [50.8, 19662.0], [50.9, 19662.0], [51.0, 19662.0], [51.1, 19662.0], [51.2, 19858.0], [51.3, 19858.0], [51.4, 19858.0], [51.5, 19858.0], [51.6, 19858.0], [51.7, 19873.0], [51.8, 19873.0], [51.9, 19873.0], [52.0, 19873.0], [52.1, 19935.0], [52.2, 19935.0], [52.3, 19935.0], [52.4, 19935.0], [52.5, 19935.0], [52.6, 20000.0], [52.7, 20000.0], [52.8, 20000.0], [52.9, 20000.0], [53.0, 20000.0], [53.1, 20419.0], [53.2, 20419.0], [53.3, 20419.0], [53.4, 20419.0], [53.5, 20493.0], [53.6, 20493.0], [53.7, 20493.0], [53.8, 20493.0], [53.9, 20493.0], [54.0, 20526.0], [54.1, 20526.0], [54.2, 20526.0], [54.3, 20526.0], [54.4, 20526.0], [54.5, 20571.0], [54.6, 20571.0], [54.7, 20571.0], [54.8, 20571.0], [54.9, 20662.0], [55.0, 20662.0], [55.1, 20662.0], [55.2, 20662.0], [55.3, 20662.0], [55.4, 20732.0], [55.5, 20732.0], [55.6, 20732.0], [55.7, 20732.0], [55.8, 20732.0], [55.9, 20829.0], [56.0, 20829.0], [56.1, 20829.0], [56.2, 20829.0], [56.3, 20903.0], [56.4, 20903.0], [56.5, 20903.0], [56.6, 20903.0], [56.7, 20903.0], [56.8, 20927.0], [56.9, 20927.0], [57.0, 20927.0], [57.1, 20927.0], [57.2, 20927.0], [57.3, 20958.0], [57.4, 20958.0], [57.5, 20958.0], [57.6, 20958.0], [57.7, 20991.0], [57.8, 20991.0], [57.9, 20991.0], [58.0, 20991.0], [58.1, 20991.0], [58.2, 21018.0], [58.3, 21018.0], [58.4, 21018.0], [58.5, 21018.0], [58.6, 21018.0], [58.7, 21075.0], [58.8, 21075.0], [58.9, 21075.0], [59.0, 21075.0], [59.1, 21112.0], [59.2, 21112.0], [59.3, 21112.0], [59.4, 21112.0], [59.5, 21112.0], [59.6, 21162.0], [59.7, 21162.0], [59.8, 21162.0], [59.9, 21162.0], [60.0, 21162.0], [60.1, 21199.0], [60.2, 21199.0], [60.3, 21199.0], [60.4, 21199.0], [60.5, 21210.0], [60.6, 21210.0], [60.7, 21210.0], [60.8, 21210.0], [60.9, 21210.0], [61.0, 21224.0], [61.1, 21224.0], [61.2, 21224.0], [61.3, 21224.0], [61.4, 21251.0], [61.5, 21251.0], [61.6, 21251.0], [61.7, 21251.0], [61.8, 21251.0], [61.9, 21252.0], [62.0, 21252.0], [62.1, 21252.0], [62.2, 21252.0], [62.3, 21252.0], [62.4, 21321.0], [62.5, 21321.0], [62.6, 21321.0], [62.7, 21321.0], [62.8, 21339.0], [62.9, 21339.0], [63.0, 21339.0], [63.1, 21339.0], [63.2, 21339.0], [63.3, 21356.0], [63.4, 21356.0], [63.5, 21356.0], [63.6, 21356.0], [63.7, 21356.0], [63.8, 21395.0], [63.9, 21395.0], [64.0, 21395.0], [64.1, 21395.0], [64.2, 21421.0], [64.3, 21421.0], [64.4, 21421.0], [64.5, 21421.0], [64.6, 21421.0], [64.7, 21427.0], [64.8, 21427.0], [64.9, 21427.0], [65.0, 21427.0], [65.1, 21427.0], [65.2, 21454.0], [65.3, 21454.0], [65.4, 21454.0], [65.5, 21454.0], [65.6, 21509.0], [65.7, 21509.0], [65.8, 21509.0], [65.9, 21509.0], [66.0, 21509.0], [66.1, 21510.0], [66.2, 21510.0], [66.3, 21510.0], [66.4, 21510.0], [66.5, 21510.0], [66.6, 21546.0], [66.7, 21546.0], [66.8, 21546.0], [66.9, 21546.0], [67.0, 21653.0], [67.1, 21653.0], [67.2, 21653.0], [67.3, 21653.0], [67.4, 21653.0], [67.5, 21656.0], [67.6, 21656.0], [67.7, 21656.0], [67.8, 21656.0], [67.9, 21656.0], [68.0, 21666.0], [68.1, 21666.0], [68.2, 21666.0], [68.3, 21666.0], [68.4, 21724.0], [68.5, 21724.0], [68.6, 21724.0], [68.7, 21724.0], [68.8, 21724.0], [68.9, 21750.0], [69.0, 21750.0], [69.1, 21750.0], [69.2, 21750.0], [69.3, 21750.0], [69.4, 21756.0], [69.5, 21756.0], [69.6, 21756.0], [69.7, 21756.0], [69.8, 21764.0], [69.9, 21764.0], [70.0, 21764.0], [70.1, 21764.0], [70.2, 21764.0], [70.3, 21778.0], [70.4, 21778.0], [70.5, 21778.0], [70.6, 21778.0], [70.7, 21785.0], [70.8, 21785.0], [70.9, 21785.0], [71.0, 21785.0], [71.1, 21785.0], [71.2, 21803.0], [71.3, 21803.0], [71.4, 21803.0], [71.5, 21803.0], [71.6, 21803.0], [71.7, 21820.0], [71.8, 21820.0], [71.9, 21820.0], [72.0, 21820.0], [72.1, 21836.0], [72.2, 21836.0], [72.3, 21836.0], [72.4, 21836.0], [72.5, 21836.0], [72.6, 21838.0], [72.7, 21838.0], [72.8, 21838.0], [72.9, 21838.0], [73.0, 21838.0], [73.1, 21874.0], [73.2, 21874.0], [73.3, 21874.0], [73.4, 21874.0], [73.5, 21881.0], [73.6, 21881.0], [73.7, 21881.0], [73.8, 21881.0], [73.9, 21881.0], [74.0, 21888.0], [74.1, 21888.0], [74.2, 21888.0], [74.3, 21888.0], [74.4, 21888.0], [74.5, 21895.0], [74.6, 21895.0], [74.7, 21895.0], [74.8, 21895.0], [74.9, 21917.0], [75.0, 21917.0], [75.1, 21917.0], [75.2, 21917.0], [75.3, 21917.0], [75.4, 21925.0], [75.5, 21925.0], [75.6, 21925.0], [75.7, 21925.0], [75.8, 21925.0], [75.9, 21927.0], [76.0, 21927.0], [76.1, 21927.0], [76.2, 21927.0], [76.3, 21945.0], [76.4, 21945.0], [76.5, 21945.0], [76.6, 21945.0], [76.7, 21945.0], [76.8, 22019.0], [76.9, 22019.0], [77.0, 22019.0], [77.1, 22019.0], [77.2, 22019.0], [77.3, 22047.0], [77.4, 22047.0], [77.5, 22047.0], [77.6, 22047.0], [77.7, 22090.0], [77.8, 22090.0], [77.9, 22090.0], [78.0, 22090.0], [78.1, 22090.0], [78.2, 22093.0], [78.3, 22093.0], [78.4, 22093.0], [78.5, 22093.0], [78.6, 22093.0], [78.7, 22147.0], [78.8, 22147.0], [78.9, 22147.0], [79.0, 22147.0], [79.1, 22151.0], [79.2, 22151.0], [79.3, 22151.0], [79.4, 22151.0], [79.5, 22151.0], [79.6, 22163.0], [79.7, 22163.0], [79.8, 22163.0], [79.9, 22163.0], [80.0, 22178.0], [80.1, 22178.0], [80.2, 22178.0], [80.3, 22178.0], [80.4, 22178.0], [80.5, 22180.0], [80.6, 22180.0], [80.7, 22180.0], [80.8, 22180.0], [80.9, 22180.0], [81.0, 22191.0], [81.1, 22191.0], [81.2, 22191.0], [81.3, 22191.0], [81.4, 22196.0], [81.5, 22196.0], [81.6, 22196.0], [81.7, 22196.0], [81.8, 22196.0], [81.9, 22234.0], [82.0, 22234.0], [82.1, 22234.0], [82.2, 22234.0], [82.3, 22234.0], [82.4, 22286.0], [82.5, 22286.0], [82.6, 22286.0], [82.7, 22286.0], [82.8, 22307.0], [82.9, 22307.0], [83.0, 22307.0], [83.1, 22307.0], [83.2, 22307.0], [83.3, 22444.0], [83.4, 22444.0], [83.5, 22444.0], [83.6, 22444.0], [83.7, 22444.0], [83.8, 22461.0], [83.9, 22461.0], [84.0, 22461.0], [84.1, 22461.0], [84.2, 22485.0], [84.3, 22485.0], [84.4, 22485.0], [84.5, 22485.0], [84.6, 22485.0], [84.7, 22493.0], [84.8, 22493.0], [84.9, 22493.0], [85.0, 22493.0], [85.1, 22493.0], [85.2, 22499.0], [85.3, 22499.0], [85.4, 22499.0], [85.5, 22499.0], [85.6, 22523.0], [85.7, 22523.0], [85.8, 22523.0], [85.9, 22523.0], [86.0, 22523.0], [86.1, 22530.0], [86.2, 22530.0], [86.3, 22530.0], [86.4, 22530.0], [86.5, 22530.0], [86.6, 22565.0], [86.7, 22565.0], [86.8, 22565.0], [86.9, 22565.0], [87.0, 22576.0], [87.1, 22576.0], [87.2, 22576.0], [87.3, 22576.0], [87.4, 22576.0], [87.5, 22587.0], [87.6, 22587.0], [87.7, 22587.0], [87.8, 22587.0], [87.9, 22587.0], [88.0, 22591.0], [88.1, 22591.0], [88.2, 22591.0], [88.3, 22591.0], [88.4, 22599.0], [88.5, 22599.0], [88.6, 22599.0], [88.7, 22599.0], [88.8, 22599.0], [88.9, 22640.0], [89.0, 22640.0], [89.1, 22640.0], [89.2, 22640.0], [89.3, 22640.0], [89.4, 22685.0], [89.5, 22685.0], [89.6, 22685.0], [89.7, 22685.0], [89.8, 22713.0], [89.9, 22713.0], [90.0, 22713.0], [90.1, 22713.0], [90.2, 22713.0], [90.3, 22758.0], [90.4, 22758.0], [90.5, 22758.0], [90.6, 22758.0], [90.7, 22767.0], [90.8, 22767.0], [90.9, 22767.0], [91.0, 22767.0], [91.1, 22767.0], [91.2, 22791.0], [91.3, 22791.0], [91.4, 22791.0], [91.5, 22791.0], [91.6, 22791.0], [91.7, 22798.0], [91.8, 22798.0], [91.9, 22798.0], [92.0, 22798.0], [92.1, 22811.0], [92.2, 22811.0], [92.3, 22811.0], [92.4, 22811.0], [92.5, 22811.0], [92.6, 22858.0], [92.7, 22858.0], [92.8, 22858.0], [92.9, 22858.0], [93.0, 22858.0], [93.1, 22903.0], [93.2, 22903.0], [93.3, 22903.0], [93.4, 22903.0], [93.5, 22904.0], [93.6, 22904.0], [93.7, 22904.0], [93.8, 22904.0], [93.9, 22904.0], [94.0, 22932.0], [94.1, 22932.0], [94.2, 22932.0], [94.3, 22932.0], [94.4, 22932.0], [94.5, 22933.0], [94.6, 22933.0], [94.7, 22933.0], [94.8, 22933.0], [94.9, 22944.0], [95.0, 22944.0], [95.1, 22944.0], [95.2, 22944.0], [95.3, 22944.0], [95.4, 22982.0], [95.5, 22982.0], [95.6, 22982.0], [95.7, 22982.0], [95.8, 22982.0], [95.9, 22986.0], [96.0, 22986.0], [96.1, 22986.0], [96.2, 22986.0], [96.3, 23140.0], [96.4, 23140.0], [96.5, 23140.0], [96.6, 23140.0], [96.7, 23140.0], [96.8, 23148.0], [96.9, 23148.0], [97.0, 23148.0], [97.1, 23148.0], [97.2, 23148.0], [97.3, 23302.0], [97.4, 23302.0], [97.5, 23302.0], [97.6, 23302.0], [97.7, 23304.0], [97.8, 23304.0], [97.9, 23304.0], [98.0, 23304.0], [98.1, 23304.0], [98.2, 23359.0], [98.3, 23359.0], [98.4, 23359.0], [98.5, 23359.0], [98.6, 23359.0], [98.7, 23400.0], [98.8, 23400.0], [98.9, 23400.0], [99.0, 23400.0], [99.1, 23432.0], [99.2, 23432.0], [99.3, 23432.0], [99.4, 23432.0], [99.5, 23432.0], [99.6, 23799.0], [99.7, 23799.0], [99.8, 23799.0], [99.9, 23799.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 28.0, "series": [{"data": [[600.0, 7.0], [700.0, 14.0], [800.0, 10.0], [900.0, 7.0], [1000.0, 4.0], [1300.0, 2.0], [1400.0, 2.0], [1600.0, 4.0], [1700.0, 5.0], [1800.0, 1.0], [1900.0, 3.0], [2100.0, 2.0], [3200.0, 1.0], [3400.0, 1.0], [3500.0, 1.0], [3700.0, 1.0], [3800.0, 1.0], [3900.0, 1.0], [4300.0, 1.0], [4600.0, 1.0], [4800.0, 1.0], [4700.0, 2.0], [5100.0, 1.0], [5300.0, 1.0], [5200.0, 1.0], [5700.0, 1.0], [6100.0, 1.0], [6300.0, 1.0], [6200.0, 1.0], [7500.0, 1.0], [7600.0, 1.0], [7700.0, 2.0], [8000.0, 2.0], [9300.0, 3.0], [9600.0, 1.0], [9900.0, 1.0], [10400.0, 1.0], [11000.0, 1.0], [10800.0, 1.0], [11600.0, 1.0], [11300.0, 1.0], [11900.0, 4.0], [12100.0, 1.0], [12000.0, 1.0], [12400.0, 3.0], [12600.0, 6.0], [12700.0, 3.0], [12500.0, 2.0], [12300.0, 2.0], [100.0, 9.0], [200.0, 28.0], [300.0, 22.0], [400.0, 21.0], [500.0, 18.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[600.0, 4.0], [800.0, 1.0], [1000.0, 1.0], [1300.0, 3.0], [1400.0, 1.0], [1500.0, 1.0], [1600.0, 1.0], [1700.0, 1.0], [1900.0, 2.0], [2100.0, 2.0], [2200.0, 1.0], [2500.0, 2.0], [2800.0, 1.0], [2900.0, 1.0], [3300.0, 1.0], [3400.0, 1.0], [3500.0, 1.0], [3600.0, 1.0], [3800.0, 1.0], [4200.0, 1.0], [4400.0, 1.0], [4600.0, 1.0], [5000.0, 1.0], [5200.0, 1.0], [5600.0, 1.0], [6100.0, 1.0], [6200.0, 1.0], [6300.0, 1.0], [6500.0, 1.0], [7000.0, 1.0], [8000.0, 1.0], [9000.0, 1.0], [8800.0, 1.0], [9300.0, 1.0], [10600.0, 1.0], [10900.0, 1.0], [11300.0, 1.0], [12300.0, 1.0], [12500.0, 1.0], [13300.0, 1.0], [13800.0, 1.0], [13500.0, 1.0], [13900.0, 1.0], [14200.0, 1.0], [14100.0, 1.0], [14700.0, 1.0], [15800.0, 1.0], [16000.0, 3.0], [16200.0, 2.0], [17100.0, 1.0], [17200.0, 1.0], [18000.0, 1.0], [18300.0, 1.0], [18500.0, 2.0], [18800.0, 1.0], [18900.0, 1.0], [19100.0, 1.0], [19400.0, 1.0], [19800.0, 2.0], [20000.0, 1.0], [19600.0, 2.0], [20400.0, 2.0], [19900.0, 1.0], [21300.0, 4.0], [20900.0, 4.0], [20800.0, 1.0], [20600.0, 1.0], [20700.0, 1.0], [20500.0, 2.0], [21000.0, 2.0], [21200.0, 4.0], [21100.0, 3.0], [21400.0, 3.0], [21500.0, 3.0], [21600.0, 3.0], [21700.0, 6.0], [22000.0, 4.0], [22100.0, 7.0], [21900.0, 4.0], [22500.0, 7.0], [22400.0, 5.0], [22300.0, 1.0], [22200.0, 2.0], [21800.0, 8.0], [22700.0, 5.0], [22800.0, 2.0], [22900.0, 7.0], [23100.0, 2.0], [23300.0, 3.0], [23400.0, 2.0], [22600.0, 2.0], [23700.0, 1.0], [200.0, 1.0], [300.0, 21.0], [400.0, 9.0], [500.0, 7.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 23700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 80.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 238.0, "series": [{"data": [[0.0, 112.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 80.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 238.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.654607532E12, "maxY": 2.0, "series": [{"data": [[1.6546075755E12, 1.6153846153846154], [1.654607553E12, 1.7333333333333334], [1.6546075785E12, 1.5999999999999996], [1.654607556E12, 1.8124999999999998], [1.6546075335E12, 1.6666666666666667], [1.654607559E12, 1.9166666666666665], [1.6546075365E12, 1.5], [1.654607562E12, 1.7857142857142858], [1.6546075395E12, 1.5555555555555556], [1.6546075815E12, 1.0], [1.654607565E12, 1.625], [1.6546075425E12, 1.5], [1.6546075845E12, 1.0], [1.654607568E12, 1.8], [1.6546075455E12, 1.5384615384615385], [1.6546075485E12, 1.6249999999999998], [1.6546075515E12, 1.7499999999999996], [1.654607571E12, 1.6], [1.6546075545E12, 1.7142857142857144], [1.654607532E12, 1.5], [1.654607574E12, 1.2999999999999998], [1.654607535E12, 1.5], [1.654607577E12, 1.5], [1.654607538E12, 1.4444444444444444], [1.65460758E12, 1.0], [1.6546075575E12, 1.7999999999999996], [1.654607541E12, 1.4545454545454546], [1.654607583E12, 1.0], [1.6546075605E12, 1.7272727272727273], [1.654607544E12, 1.5384615384615385], [1.654607586E12, 1.0], [1.6546075635E12, 2.0], [1.6546075665E12, 1.5833333333333333], [1.6546075695E12, 1.3333333333333333], [1.654607547E12, 1.6153846153846156], [1.6546075725E12, 1.5714285714285714], [1.65460755E12, 1.642857142857143]], "isOverall": false, "label": "parallel bzm - Parallel", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654607586E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 212.37500000000003, "minX": 1.0, "maxY": 23432.0, "series": [{"data": [[2.0, 320.25], [3.0, 291.125], [5.0, 533.5], [6.0, 353.0], [8.0, 341.6666666666667], [9.0, 519.3333333333334], [10.0, 423.0], [11.0, 365.0], [12.0, 423.6666666666667], [13.0, 387.5], [14.0, 425.5], [15.0, 360.5], [17.0, 526.6666666666666], [18.0, 427.0], [19.0, 383.0], [20.0, 369.0], [21.0, 527.0], [22.0, 558.0], [23.0, 534.0], [24.0, 496.5], [25.0, 506.0], [26.0, 507.5], [27.0, 471.5], [28.0, 436.5], [29.0, 410.0], [31.0, 523.0], [32.0, 528.5], [33.0, 507.3333333333333], [35.0, 583.0], [37.0, 790.0], [38.0, 817.5], [39.0, 774.0], [40.0, 732.5], [41.0, 744.0], [43.0, 787.0], [44.0, 689.6666666666666], [45.0, 623.0], [48.0, 793.0], [49.0, 718.5], [50.0, 732.6666666666666], [52.0, 799.0], [53.0, 762.0], [54.0, 684.0], [56.0, 980.0], [57.0, 863.5], [58.0, 922.5], [59.0, 816.0], [61.0, 928.0], [62.0, 959.0], [63.0, 794.0], [67.0, 1039.0], [68.0, 946.6666666666666], [70.0, 935.0], [71.0, 963.5], [72.0, 1002.0], [78.0, 1376.0], [77.0, 1489.0], [79.0, 1397.0], [84.0, 1748.0], [89.0, 1824.0], [90.0, 7205.0], [91.0, 8266.8], [88.0, 12361.5], [94.0, 1725.0], [95.0, 7268.5], [93.0, 12746.0], [92.0, 12701.75], [97.0, 12426.0], [96.0, 12687.0], [100.0, 9990.6], [102.0, 11818.333333333334], [105.0, 11288.5], [109.0, 11003.0], [108.0, 10431.0], [112.0, 6620.25], [115.0, 5081.333333333333], [114.0, 9353.0], [118.0, 3888.5], [117.0, 7763.6], [123.0, 6240.0], [124.0, 5184.0], [126.0, 4644.0], [127.0, 4856.0], [1.0, 212.37500000000003]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[51.19069767441861, 2845.2418604651166]], "isOverall": false, "label": "/api/statistics/neighbourhoods-Aggregated", "isController": false}, {"data": [[2.0, 3801.75], [3.0, 2205.416666666667], [4.0, 4723.6], [5.0, 10928.0], [6.0, 11093.0], [7.0, 21339.0], [8.0, 11269.0], [9.0, 6387.5], [10.0, 11546.0], [11.0, 8370.333333333332], [12.0, 8569.333333333332], [13.0, 21546.0], [14.0, 8698.333333333332], [15.0, 12031.0], [16.0, 21820.0], [17.0, 12207.0], [18.0, 12764.5], [19.0, 21778.0], [20.0, 9189.0], [21.0, 22461.0], [22.0, 21838.0], [23.0, 23148.0], [24.0, 9680.0], [25.0, 21509.0], [26.0, 13070.0], [27.0, 12558.0], [28.0, 21917.0], [29.0, 13038.5], [30.0, 21395.0], [31.0, 21251.0], [32.0, 12728.0], [33.0, 21653.0], [34.0, 13178.5], [35.0, 13201.5], [37.0, 22019.0], [36.0, 21895.0], [39.0, 13616.5], [38.0, 21925.0], [41.0, 13549.0], [40.0, 22191.0], [43.0, 22151.0], [42.0, 22640.0], [44.0, 13907.5], [45.0, 22307.0], [47.0, 21881.0], [46.0, 23302.0], [49.0, 14367.0], [48.0, 22485.0], [50.0, 14400.5], [51.0, 14304.0], [53.0, 22591.0], [52.0, 21945.0], [54.0, 14781.5], [55.0, 22685.0], [57.0, 22904.0], [56.0, 22444.0], [59.0, 14970.5], [58.0, 22163.0], [61.0, 22523.0], [60.0, 22932.0], [63.0, 22499.0], [62.0, 22903.0], [67.0, 23432.0], [66.0, 22493.0], [65.0, 22986.0], [64.0, 23400.0], [70.0, 15939.0], [71.0, 22758.0], [69.0, 22576.0], [68.0, 22798.0], [75.0, 23140.0], [74.0, 23359.0], [73.0, 22767.0], [72.0, 23304.0], [78.0, 15808.0], [79.0, 15835.0], [77.0, 22791.0], [76.0, 22933.0], [83.0, 22713.0], [82.0, 21927.0], [81.0, 22093.0], [80.0, 22047.0], [85.0, 15699.5], [87.0, 21454.0], [86.0, 21656.0], [84.0, 22147.0], [91.0, 21724.0], [90.0, 21252.0], [89.0, 20958.0], [88.0, 21199.0], [95.0, 20571.0], [94.0, 21356.0], [93.0, 20903.0], [92.0, 21321.0], [99.0, 15636.5], [98.0, 15659.5], [97.0, 20526.0], [96.0, 21075.0], [100.0, 16154.0], [103.0, 19616.0], [102.0, 19935.0], [101.0, 19873.0], [107.0, 19409.0], [106.0, 20000.0], [105.0, 20077.5], [111.0, 18530.0], [110.0, 19858.0], [109.0, 18913.0], [108.0, 19165.0], [115.0, 18000.0], [114.0, 18314.0], [113.0, 18590.0], [112.0, 18834.0], [116.0, 14754.5], [118.0, 14408.0], [119.0, 16056.0], [117.0, 17167.0], [123.0, 16028.0], [122.0, 16008.0], [121.0, 15888.0], [120.0, 16247.0], [126.0, 14052.0], [127.0, 13610.0], [125.0, 14186.0], [124.0, 14735.0], [1.0, 310.9411764705883]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}, {"data": [[47.800000000000004, 13697.711627906974]], "isOverall": false, "label": "/api/listings?geojson=true-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 127.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 197.33333333333334, "minX": 1.654607532E12, "maxY": 1.1255634E7, "series": [{"data": [[1.6546075755E12, 2088040.6666666667], [1.654607553E12, 1672539.3333333333], [1.6546075785E12, 2505374.0], [1.654607556E12, 1256580.0], [1.6546075335E12, 417791.3333333333], [1.654607559E12, 421913.3333333333], [1.6546075365E12, 1252000.0], [1.654607562E12, 1255664.0], [1.6546075395E12, 1669791.3333333333], [1.6546075815E12, 4168753.3333333335], [1.654607565E12, 1252916.0], [1.6546075425E12, 2504000.0], [1.6546075845E12, 7920631.333333333], [1.654607568E12, 418707.3333333333], [1.6546075455E12, 2504458.0], [1.6546075485E12, 2505832.0], [1.6546075515E12, 1672997.3333333333], [1.654607571E12, 835124.6666666666], [1.6546075545E12, 1672081.3333333333], [1.654607532E12, 834666.6666666666], [1.654607574E12, 2919501.3333333335], [1.654607535E12, 1252000.0], [1.654607577E12, 3338666.6666666665], [1.654607538E12, 2086208.6666666667], [1.65460758E12, 3751878.0], [1.6546075575E12, 1256122.0], [1.654607541E12, 2503542.0], [1.654607583E12, 8754382.0], [1.6546075605E12, 1254290.0], [1.654607544E12, 2504458.0], [1.654607586E12, 1.1255634E7], [1.6546075635E12, 916.0], [1.6546075665E12, 2087582.6666666667], [1.6546075695E12, 2502626.0], [1.654607547E12, 2088040.6666666667], [1.6546075725E12, 1252458.0], [1.65460755E12, 2088498.6666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6546075755E12, 1269.3333333333333], [1.654607553E12, 1469.3333333333333], [1.6546075785E12, 1464.0], [1.654607556E12, 1570.6666666666667], [1.6546075335E12, 293.3333333333333], [1.654607559E12, 1181.3333333333333], [1.6546075365E12, 584.0], [1.654607562E12, 1373.3333333333333], [1.6546075395E12, 877.3333333333334], [1.6546075815E12, 960.0], [1.654607565E12, 781.3333333333334], [1.6546075425E12, 1168.0], [1.6546075845E12, 1824.0], [1.654607568E12, 490.6666666666667], [1.6546075455E12, 1266.6666666666667], [1.6546075485E12, 1562.6666666666667], [1.6546075515E12, 1568.0], [1.654607571E12, 488.0], [1.6546075545E12, 1370.6666666666667], [1.654607532E12, 389.3333333333333], [1.654607574E12, 968.0], [1.654607535E12, 584.0], [1.654607577E12, 1557.3333333333333], [1.654607538E12, 874.6666666666666], [1.65460758E12, 864.0], [1.6546075575E12, 1472.0], [1.654607541E12, 1069.3333333333333], [1.654607583E12, 2016.0], [1.6546075605E12, 1077.3333333333333], [1.654607544E12, 1266.6666666666667], [1.654607586E12, 2592.0], [1.6546075635E12, 197.33333333333334], [1.6546075665E12, 1170.6666666666667], [1.6546075695E12, 872.0], [1.654607547E12, 1269.3333333333333], [1.6546075725E12, 682.6666666666666], [1.65460755E12, 1368.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654607586E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 199.0, "minX": 1.654607532E12, "maxY": 23022.5, "series": [{"data": [[1.6546075755E12, 11725.75], [1.654607553E12, 484.2727272727273], [1.6546075785E12, 12518.666666666666], [1.654607556E12, 725.3076923076924], [1.6546075335E12, 200.0], [1.654607559E12, 935.4545454545455], [1.6546075365E12, 199.0], [1.654607562E12, 1855.0909090909092], [1.6546075395E12, 199.6], [1.654607565E12, 3861.8], [1.6546075425E12, 253.0], [1.654607568E12, 6125.25], [1.6546075455E12, 291.7142857142857], [1.6546075485E12, 445.3], [1.6546075515E12, 474.5], [1.654607571E12, 7952.333333333333], [1.6546075545E12, 676.9000000000001], [1.654607532E12, 246.5], [1.654607574E12, 10461.666666666666], [1.654607535E12, 200.0], [1.654607577E12, 12586.625], [1.654607538E12, 257.75], [1.6546075575E12, 838.5], [1.654607541E12, 315.8], [1.6546075605E12, 1578.75], [1.654607544E12, 287.2857142857143], [1.6546075635E12, 3419.5], [1.6546075665E12, 4956.857142857143], [1.6546075695E12, 7666.0], [1.654607547E12, 393.87499999999994], [1.6546075725E12, 9437.5], [1.65460755E12, 415.8888888888889]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.6546075755E12, 19915.8], [1.654607553E12, 3843.75], [1.6546075785E12, 21318.0], [1.654607556E12, 6002.0], [1.6546075335E12, 306.0], [1.654607559E12, 8079.0], [1.6546075365E12, 306.6666666666667], [1.654607562E12, 10942.666666666666], [1.6546075395E12, 301.5], [1.6546075815E12, 23022.5], [1.654607565E12, 12906.0], [1.6546075425E12, 409.66666666666663], [1.6546075845E12, 21993.894736842107], [1.654607568E12, 14735.0], [1.6546075455E12, 607.3333333333334], [1.6546075485E12, 1734.5], [1.6546075515E12, 3142.5], [1.654607571E12, 17184.5], [1.6546075545E12, 4859.75], [1.654607532E12, 335.5], [1.654607574E12, 19244.14285714286], [1.654607535E12, 316.3333333333333], [1.654607577E12, 20812.875], [1.654607538E12, 360.2], [1.65460758E12, 22223.777777777777], [1.6546075575E12, 6662.0], [1.654607541E12, 453.16666666666663], [1.654607583E12, 22645.523809523806], [1.6546075605E12, 9084.666666666666], [1.654607544E12, 452.6666666666667], [1.654607586E12, 21674.592592592595], [1.6546075665E12, 13851.4], [1.6546075695E12, 16082.5], [1.654607547E12, 1174.2], [1.6546075725E12, 18301.333333333332], [1.65460755E12, 2346.6]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654607586E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 198.66666666666666, "minX": 1.654607532E12, "maxY": 23021.3, "series": [{"data": [[1.6546075755E12, 11725.75], [1.654607553E12, 484.2727272727273], [1.6546075785E12, 12518.666666666666], [1.654607556E12, 725.3076923076924], [1.6546075335E12, 200.0], [1.654607559E12, 935.3636363636364], [1.6546075365E12, 198.66666666666666], [1.654607562E12, 1855.0], [1.6546075395E12, 199.6], [1.654607565E12, 3861.6], [1.6546075425E12, 253.0], [1.654607568E12, 6125.0], [1.6546075455E12, 291.7142857142857], [1.6546075485E12, 445.2], [1.6546075515E12, 474.4166666666667], [1.654607571E12, 7952.333333333333], [1.6546075545E12, 676.9000000000001], [1.654607532E12, 246.5], [1.654607574E12, 10461.666666666666], [1.654607535E12, 200.0], [1.654607577E12, 12586.5], [1.654607538E12, 257.75], [1.6546075575E12, 838.5], [1.654607541E12, 315.8], [1.6546075605E12, 1578.75], [1.654607544E12, 287.2857142857143], [1.6546075635E12, 3419.5], [1.6546075665E12, 4956.857142857143], [1.6546075695E12, 7666.0], [1.654607547E12, 393.87499999999994], [1.6546075725E12, 9437.5], [1.65460755E12, 415.66666666666674]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.6546075755E12, 19898.8], [1.654607553E12, 3842.0], [1.6546075785E12, 21315.0], [1.654607556E12, 6000.666666666667], [1.6546075335E12, 305.0], [1.654607559E12, 8078.0], [1.6546075365E12, 305.3333333333333], [1.654607562E12, 10936.333333333334], [1.6546075395E12, 300.0], [1.6546075815E12, 23021.3], [1.654607565E12, 12899.333333333334], [1.6546075425E12, 408.3333333333333], [1.6546075845E12, 21992.21052631579], [1.654607568E12, 14733.0], [1.6546075455E12, 605.3333333333333], [1.6546075485E12, 1733.1666666666665], [1.6546075515E12, 3140.75], [1.654607571E12, 17183.0], [1.6546075545E12, 4858.25], [1.654607532E12, 334.5], [1.654607574E12, 19240.714285714286], [1.654607535E12, 315.0], [1.654607577E12, 20804.375], [1.654607538E12, 358.4], [1.65460758E12, 22222.0], [1.6546075575E12, 6660.666666666667], [1.654607541E12, 451.6666666666667], [1.654607583E12, 22644.04761904762], [1.6546075605E12, 9082.666666666666], [1.654607544E12, 450.8333333333333], [1.654607586E12, 21671.999999999996], [1.6546075665E12, 13850.0], [1.6546075695E12, 16080.666666666668], [1.654607547E12, 1172.4], [1.6546075725E12, 18298.0], [1.65460755E12, 2345.2]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654607586E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.654607532E12, "maxY": 1286.5, "series": [{"data": [[1.6546075755E12, 542.7500000000001], [1.654607553E12, 9.545454545454545], [1.6546075785E12, 19.444444444444443], [1.654607556E12, 19.46153846153846], [1.6546075335E12, 6.0], [1.654607559E12, 36.18181818181818], [1.6546075365E12, 6.0], [1.654607562E12, 18.272727272727273], [1.6546075395E12, 6.0], [1.654607565E12, 79.6], [1.6546075425E12, 7.333333333333333], [1.654607568E12, 140.25], [1.6546075455E12, 16.428571428571427], [1.6546075485E12, 10.399999999999999], [1.6546075515E12, 18.916666666666664], [1.654607571E12, 251.0], [1.6546075545E12, 19.400000000000002], [1.654607532E12, 12.5], [1.654607574E12, 813.6666666666666], [1.654607535E12, 6.0], [1.654607577E12, 69.00000000000001], [1.654607538E12, 7.0], [1.6546075575E12, 13.166666666666668], [1.654607541E12, 32.2], [1.6546075605E12, 10.125], [1.654607544E12, 8.428571428571429], [1.6546075635E12, 241.5], [1.6546075665E12, 93.57142857142857], [1.6546075695E12, 167.0], [1.654607547E12, 28.75], [1.6546075725E12, 1286.5], [1.65460755E12, 9.333333333333334]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.6546075755E12, 15.4], [1.654607553E12, 9.5], [1.6546075785E12, 50.666666666666664], [1.654607556E12, 46.33333333333333], [1.6546075335E12, 6.0], [1.654607559E12, 10.0], [1.6546075365E12, 6.0], [1.654607562E12, 9.666666666666666], [1.6546075395E12, 6.0], [1.6546075815E12, 10.8], [1.654607565E12, 9.666666666666666], [1.6546075425E12, 7.5], [1.6546075845E12, 464.4736842105263], [1.654607568E12, 9.0], [1.6546075455E12, 17.333333333333336], [1.6546075485E12, 13.333333333333332], [1.6546075515E12, 9.5], [1.654607571E12, 21.5], [1.6546075545E12, 9.25], [1.654607532E12, 12.5], [1.654607574E12, 9.714285714285714], [1.654607535E12, 6.0], [1.654607577E12, 9.75], [1.654607538E12, 6.6], [1.65460758E12, 20.0], [1.6546075575E12, 10.0], [1.654607541E12, 25.333333333333336], [1.654607583E12, 49.04761904761906], [1.6546075605E12, 9.0], [1.654607544E12, 8.333333333333334], [1.654607586E12, 230.29629629629625], [1.6546075665E12, 9.8], [1.6546075695E12, 21.5], [1.654607547E12, 36.2], [1.6546075725E12, 41.666666666666664], [1.65460755E12, 11.4]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654607586E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 192.0, "minX": 1.654607532E12, "maxY": 23799.0, "series": [{"data": [[1.6546075755E12, 20493.0], [1.654607553E12, 4246.0], [1.6546075785E12, 21724.0], [1.654607556E12, 6202.0], [1.6546075335E12, 306.0], [1.654607559E12, 8079.0], [1.6546075365E12, 309.0], [1.654607562E12, 11317.0], [1.6546075395E12, 306.0], [1.6546075815E12, 23799.0], [1.654607565E12, 13863.0], [1.6546075425E12, 501.0], [1.6546075845E12, 23302.0], [1.654607568E12, 14735.0], [1.6546075455E12, 667.0], [1.6546075485E12, 1986.0], [1.6546075515E12, 3441.0], [1.654607571E12, 17202.0], [1.6546075545E12, 5262.0], [1.654607532E12, 360.0], [1.654607574E12, 20000.0], [1.654607535E12, 329.0], [1.654607577E12, 21356.0], [1.654607538E12, 515.0], [1.65460758E12, 22811.0], [1.6546075575E12, 7083.0], [1.654607541E12, 594.0], [1.654607583E12, 23432.0], [1.6546075605E12, 9309.0], [1.654607544E12, 587.0], [1.654607586E12, 23148.0], [1.6546075635E12, 3572.0], [1.6546075665E12, 14241.0], [1.6546075695E12, 16268.0], [1.654607547E12, 1357.0], [1.6546075725E12, 18590.0], [1.65460755E12, 2585.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6546075755E12, 20269.8], [1.654607553E12, 4027.0], [1.6546075785E12, 21562.0], [1.654607556E12, 6178.9], [1.6546075335E12, 306.0], [1.654607559E12, 5979.600000000008], [1.6546075365E12, 309.0], [1.654607562E12, 11108.5], [1.6546075395E12, 306.0], [1.6546075815E12, 23755.0], [1.654607565E12, 13863.0], [1.6546075425E12, 488.70000000000005], [1.6546075845E12, 22640.0], [1.654607568E12, 14735.0], [1.6546075455E12, 652.2], [1.6546075485E12, 1972.0], [1.6546075515E12, 3387.8], [1.654607571E12, 17202.0], [1.6546075545E12, 5158.5], [1.654607532E12, 360.0], [1.654607574E12, 19985.8], [1.654607535E12, 329.0], [1.654607577E12, 21159.3], [1.654607538E12, 515.0], [1.65460758E12, 22811.0], [1.6546075575E12, 6781.8], [1.654607541E12, 593.0], [1.654607583E12, 23317.2], [1.6546075605E12, 9264.4], [1.654607544E12, 532.5999999999999], [1.654607586E12, 22658.4], [1.6546075635E12, 3572.0], [1.6546075665E12, 14224.5], [1.6546075695E12, 16268.0], [1.654607547E12, 1349.4], [1.6546075725E12, 18590.0], [1.65460755E12, 2562.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6546075755E12, 20493.0], [1.654607553E12, 4246.0], [1.6546075785E12, 21724.0], [1.654607556E12, 6202.0], [1.6546075335E12, 306.0], [1.654607559E12, 8079.0], [1.6546075365E12, 309.0], [1.654607562E12, 11317.0], [1.6546075395E12, 306.0], [1.6546075815E12, 23799.0], [1.654607565E12, 13863.0], [1.6546075425E12, 501.0], [1.6546075845E12, 23302.0], [1.654607568E12, 14735.0], [1.6546075455E12, 667.0], [1.6546075485E12, 1986.0], [1.6546075515E12, 3441.0], [1.654607571E12, 17202.0], [1.6546075545E12, 5262.0], [1.654607532E12, 360.0], [1.654607574E12, 20000.0], [1.654607535E12, 329.0], [1.654607577E12, 21356.0], [1.654607538E12, 515.0], [1.65460758E12, 22811.0], [1.6546075575E12, 7083.0], [1.654607541E12, 594.0], [1.654607583E12, 23432.0], [1.6546075605E12, 9309.0], [1.654607544E12, 587.0], [1.654607586E12, 23148.0], [1.6546075635E12, 3572.0], [1.6546075665E12, 14241.0], [1.6546075695E12, 16268.0], [1.654607547E12, 1357.0], [1.6546075725E12, 18590.0], [1.65460755E12, 2585.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6546075755E12, 20493.0], [1.654607553E12, 4246.0], [1.6546075785E12, 21724.0], [1.654607556E12, 6202.0], [1.6546075335E12, 306.0], [1.654607559E12, 8079.0], [1.6546075365E12, 309.0], [1.654607562E12, 11317.0], [1.6546075395E12, 306.0], [1.6546075815E12, 23799.0], [1.654607565E12, 13863.0], [1.6546075425E12, 501.0], [1.6546075845E12, 23302.0], [1.654607568E12, 14735.0], [1.6546075455E12, 667.0], [1.6546075485E12, 1986.0], [1.6546075515E12, 3441.0], [1.654607571E12, 17202.0], [1.6546075545E12, 5262.0], [1.654607532E12, 360.0], [1.654607574E12, 20000.0], [1.654607535E12, 329.0], [1.654607577E12, 21356.0], [1.654607538E12, 515.0], [1.65460758E12, 22811.0], [1.6546075575E12, 7083.0], [1.654607541E12, 594.0], [1.654607583E12, 23428.8], [1.6546075605E12, 9309.0], [1.654607544E12, 587.0], [1.654607586E12, 23066.399999999998], [1.6546075635E12, 3572.0], [1.6546075665E12, 14241.0], [1.6546075695E12, 16268.0], [1.654607547E12, 1357.0], [1.6546075725E12, 18590.0], [1.65460755E12, 2585.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6546075755E12, 10895.0], [1.654607553E12, 410.0], [1.6546075785E12, 12330.0], [1.654607556E12, 599.0], [1.6546075335E12, 194.0], [1.654607559E12, 779.0], [1.6546075365E12, 198.0], [1.654607562E12, 1677.0], [1.6546075395E12, 195.0], [1.6546075815E12, 22576.0], [1.654607565E12, 3447.0], [1.6546075425E12, 217.0], [1.6546075845E12, 21210.0], [1.654607568E12, 5781.0], [1.6546075455E12, 273.0], [1.6546075485E12, 357.0], [1.6546075515E12, 369.0], [1.654607571E12, 7788.0], [1.6546075545E12, 468.0], [1.654607532E12, 211.0], [1.654607574E12, 9951.0], [1.654607535E12, 198.0], [1.654607577E12, 12032.0], [1.654607538E12, 192.0], [1.65460758E12, 21656.0], [1.6546075575E12, 684.0], [1.654607541E12, 201.0], [1.654607583E12, 21881.0], [1.6546075605E12, 1352.0], [1.654607544E12, 255.0], [1.654607586E12, 20732.0], [1.6546075635E12, 3267.0], [1.6546075665E12, 4644.0], [1.6546075695E12, 7533.0], [1.654607547E12, 323.0], [1.6546075725E12, 9326.0], [1.65460755E12, 356.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6546075755E12, 11992.0], [1.654607553E12, 517.0], [1.6546075785E12, 12636.0], [1.654607556E12, 739.0], [1.6546075335E12, 206.0], [1.654607559E12, 947.0], [1.6546075365E12, 252.0], [1.654607562E12, 1909.5], [1.6546075395E12, 206.0], [1.6546075815E12, 22865.5], [1.654607565E12, 4129.5], [1.6546075425E12, 349.5], [1.6546075845E12, 21925.0], [1.654607568E12, 6269.0], [1.6546075455E12, 326.0], [1.6546075485E12, 496.5], [1.6546075515E12, 531.0], [1.654607571E12, 8037.0], [1.6546075545E12, 783.0], [1.654607532E12, 296.5], [1.654607574E12, 18873.5], [1.654607535E12, 255.5], [1.654607577E12, 16609.0], [1.654607538E12, 307.0], [1.65460758E12, 22093.0], [1.6546075575E12, 892.0], [1.654607541E12, 420.0], [1.654607583E12, 22591.0], [1.6546075605E12, 1690.0], [1.654607544E12, 400.0], [1.654607586E12, 21666.0], [1.6546075635E12, 3419.5], [1.6546075665E12, 5315.0], [1.6546075695E12, 16008.0], [1.654607547E12, 472.0], [1.6546075725E12, 9691.0], [1.65460755E12, 487.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654607586E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 308.5, "minX": 2.0, "maxY": 22880.5, "series": [{"data": [[2.0, 308.5], [8.0, 1216.5], [9.0, 422.0], [10.0, 788.5], [11.0, 21653.0], [3.0, 7910.0], [12.0, 22880.5], [13.0, 782.0], [4.0, 6298.0], [16.0, 21383.0], [17.0, 22307.0], [19.0, 12741.0], [5.0, 9691.0], [6.0, 422.0], [7.0, 11932.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 19.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 307.5, "minX": 2.0, "maxY": 22878.5, "series": [{"data": [[2.0, 307.5], [8.0, 1216.5], [9.0, 421.0], [10.0, 788.5], [11.0, 21651.0], [3.0, 7910.0], [12.0, 22878.5], [13.0, 782.0], [4.0, 6298.0], [16.0, 21381.0], [17.0, 22306.0], [19.0, 12741.0], [5.0, 9691.0], [6.0, 422.0], [7.0, 11932.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 19.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.6546075305E12, "maxY": 20.0, "series": [{"data": [[1.654607553E12, 16.0], [1.654607556E12, 18.666666666666668], [1.6546075335E12, 2.6666666666666665], [1.654607559E12, 20.0], [1.6546075365E12, 4.0], [1.654607562E12, 20.0], [1.6546075395E12, 5.333333333333333], [1.654607565E12, 20.0], [1.6546075425E12, 8.0], [1.6546075455E12, 10.666666666666666], [1.6546075485E12, 12.0], [1.6546075515E12, 14.666666666666666], [1.6546075545E12, 16.0], [1.654607532E12, 1.3333333333333333], [1.654607535E12, 4.0], [1.654607538E12, 6.666666666666667], [1.6546075575E12, 17.333333333333332], [1.654607541E12, 8.0], [1.6546075605E12, 20.0], [1.654607544E12, 10.666666666666666], [1.6546075635E12, 20.0], [1.6546075665E12, 4.0], [1.654607547E12, 12.0], [1.6546075305E12, 1.3333333333333333], [1.65460755E12, 13.333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6546075665E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.654607532E12, "maxY": 18.0, "series": [{"data": [[1.6546075755E12, 8.666666666666666], [1.654607553E12, 10.0], [1.6546075785E12, 10.0], [1.654607556E12, 10.666666666666666], [1.6546075335E12, 2.0], [1.654607559E12, 8.0], [1.6546075365E12, 4.0], [1.654607562E12, 9.333333333333334], [1.6546075395E12, 6.0], [1.6546075815E12, 6.666666666666667], [1.654607565E12, 5.333333333333333], [1.6546075425E12, 8.0], [1.6546075845E12, 12.666666666666666], [1.654607568E12, 3.3333333333333335], [1.6546075455E12, 8.666666666666666], [1.6546075485E12, 10.666666666666666], [1.6546075515E12, 10.666666666666666], [1.654607571E12, 3.3333333333333335], [1.6546075545E12, 9.333333333333334], [1.654607532E12, 2.6666666666666665], [1.654607574E12, 6.666666666666667], [1.654607535E12, 4.0], [1.654607577E12, 10.666666666666666], [1.654607538E12, 6.0], [1.65460758E12, 6.0], [1.6546075575E12, 10.0], [1.654607541E12, 7.333333333333333], [1.654607583E12, 14.0], [1.6546075605E12, 7.333333333333333], [1.654607544E12, 8.666666666666666], [1.654607586E12, 18.0], [1.6546075635E12, 1.3333333333333333], [1.6546075665E12, 8.0], [1.6546075695E12, 6.0], [1.654607547E12, 8.666666666666666], [1.6546075725E12, 4.666666666666667], [1.65460755E12, 9.333333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654607586E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.654607532E12, "maxY": 18.0, "series": [{"data": [[1.6546075755E12, 5.333333333333333], [1.654607553E12, 7.333333333333333], [1.6546075785E12, 6.0], [1.654607556E12, 8.666666666666666], [1.6546075335E12, 1.3333333333333333], [1.654607559E12, 7.333333333333333], [1.6546075365E12, 2.0], [1.654607562E12, 7.333333333333333], [1.6546075395E12, 3.3333333333333335], [1.654607565E12, 3.3333333333333335], [1.6546075425E12, 4.0], [1.654607568E12, 2.6666666666666665], [1.6546075455E12, 4.666666666666667], [1.6546075485E12, 6.666666666666667], [1.6546075515E12, 8.0], [1.654607571E12, 2.0], [1.6546075545E12, 6.666666666666667], [1.654607532E12, 1.3333333333333333], [1.654607574E12, 2.0], [1.654607535E12, 2.0], [1.654607577E12, 5.333333333333333], [1.654607538E12, 2.6666666666666665], [1.6546075575E12, 8.0], [1.654607541E12, 3.3333333333333335], [1.6546075605E12, 5.333333333333333], [1.654607544E12, 4.666666666666667], [1.6546075635E12, 1.3333333333333333], [1.6546075665E12, 4.666666666666667], [1.6546075695E12, 2.0], [1.654607547E12, 5.333333333333333], [1.6546075725E12, 2.6666666666666665], [1.65460755E12, 6.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods-success", "isController": false}, {"data": [[1.6546075755E12, 3.3333333333333335], [1.654607553E12, 2.6666666666666665], [1.6546075785E12, 4.0], [1.654607556E12, 2.0], [1.6546075335E12, 0.6666666666666666], [1.654607559E12, 0.6666666666666666], [1.6546075365E12, 2.0], [1.654607562E12, 2.0], [1.6546075395E12, 2.6666666666666665], [1.6546075815E12, 6.666666666666667], [1.654607565E12, 2.0], [1.6546075425E12, 4.0], [1.6546075845E12, 12.666666666666666], [1.654607568E12, 0.6666666666666666], [1.6546075455E12, 4.0], [1.6546075485E12, 4.0], [1.6546075515E12, 2.6666666666666665], [1.654607571E12, 1.3333333333333333], [1.6546075545E12, 2.6666666666666665], [1.654607532E12, 1.3333333333333333], [1.654607574E12, 4.666666666666667], [1.654607535E12, 2.0], [1.654607577E12, 5.333333333333333], [1.654607538E12, 3.3333333333333335], [1.65460758E12, 6.0], [1.6546075575E12, 2.0], [1.654607541E12, 4.0], [1.654607583E12, 14.0], [1.6546075605E12, 2.0], [1.654607544E12, 4.0], [1.654607586E12, 18.0], [1.6546075665E12, 3.3333333333333335], [1.6546075695E12, 4.0], [1.654607547E12, 3.3333333333333335], [1.6546075725E12, 2.0], [1.65460755E12, 3.3333333333333335]], "isOverall": false, "label": "/api/listings?geojson=true-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654607586E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.654607532E12, "maxY": 18.0, "series": [{"data": [[1.6546075755E12, 8.666666666666666], [1.654607553E12, 10.0], [1.6546075785E12, 10.0], [1.654607556E12, 10.666666666666666], [1.6546075335E12, 2.0], [1.654607559E12, 8.0], [1.6546075365E12, 4.0], [1.654607562E12, 9.333333333333334], [1.6546075395E12, 6.0], [1.6546075815E12, 6.666666666666667], [1.654607565E12, 5.333333333333333], [1.6546075425E12, 8.0], [1.6546075845E12, 12.666666666666666], [1.654607568E12, 3.3333333333333335], [1.6546075455E12, 8.666666666666666], [1.6546075485E12, 10.666666666666666], [1.6546075515E12, 10.666666666666666], [1.654607571E12, 3.3333333333333335], [1.6546075545E12, 9.333333333333334], [1.654607532E12, 2.6666666666666665], [1.654607574E12, 6.666666666666667], [1.654607535E12, 4.0], [1.654607577E12, 10.666666666666666], [1.654607538E12, 6.0], [1.65460758E12, 6.0], [1.6546075575E12, 10.0], [1.654607541E12, 7.333333333333333], [1.654607583E12, 14.0], [1.6546075605E12, 7.333333333333333], [1.654607544E12, 8.666666666666666], [1.654607586E12, 18.0], [1.6546075635E12, 1.3333333333333333], [1.6546075665E12, 8.0], [1.6546075695E12, 6.0], [1.654607547E12, 8.666666666666666], [1.6546075725E12, 4.666666666666667], [1.65460755E12, 9.333333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654607586E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

