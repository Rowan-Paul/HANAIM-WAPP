/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 181.0, "minX": 0.0, "maxY": 24905.0, "series": [{"data": [[0.0, 181.0], [0.1, 181.0], [0.2, 181.0], [0.3, 181.0], [0.4, 181.0], [0.5, 184.0], [0.6, 184.0], [0.7, 184.0], [0.8, 184.0], [0.9, 184.0], [1.0, 184.0], [1.1, 184.0], [1.2, 184.0], [1.3, 184.0], [1.4, 188.0], [1.5, 188.0], [1.6, 188.0], [1.7, 188.0], [1.8, 188.0], [1.9, 188.0], [2.0, 188.0], [2.1, 188.0], [2.2, 188.0], [2.3, 188.0], [2.4, 194.0], [2.5, 194.0], [2.6, 194.0], [2.7, 194.0], [2.8, 198.0], [2.9, 198.0], [3.0, 198.0], [3.1, 198.0], [3.2, 198.0], [3.3, 198.0], [3.4, 198.0], [3.5, 198.0], [3.6, 198.0], [3.7, 198.0], [3.8, 199.0], [3.9, 199.0], [4.0, 199.0], [4.1, 199.0], [4.2, 200.0], [4.3, 200.0], [4.4, 200.0], [4.5, 200.0], [4.6, 200.0], [4.7, 202.0], [4.8, 202.0], [4.9, 202.0], [5.0, 202.0], [5.1, 202.0], [5.2, 203.0], [5.3, 203.0], [5.4, 203.0], [5.5, 203.0], [5.6, 203.0], [5.7, 203.0], [5.8, 203.0], [5.9, 203.0], [6.0, 203.0], [6.1, 204.0], [6.2, 204.0], [6.3, 204.0], [6.4, 204.0], [6.5, 204.0], [6.6, 206.0], [6.7, 206.0], [6.8, 206.0], [6.9, 206.0], [7.0, 213.0], [7.1, 213.0], [7.2, 213.0], [7.3, 213.0], [7.4, 213.0], [7.5, 215.0], [7.6, 215.0], [7.7, 215.0], [7.8, 215.0], [7.9, 215.0], [8.0, 215.0], [8.1, 215.0], [8.2, 215.0], [8.3, 215.0], [8.4, 218.0], [8.5, 218.0], [8.6, 218.0], [8.7, 218.0], [8.8, 218.0], [8.9, 219.0], [9.0, 219.0], [9.1, 219.0], [9.2, 219.0], [9.3, 219.0], [9.4, 223.0], [9.5, 223.0], [9.6, 223.0], [9.7, 223.0], [9.8, 235.0], [9.9, 235.0], [10.0, 235.0], [10.1, 235.0], [10.2, 235.0], [10.3, 235.0], [10.4, 235.0], [10.5, 235.0], [10.6, 235.0], [10.7, 243.0], [10.8, 243.0], [10.9, 243.0], [11.0, 243.0], [11.1, 243.0], [11.2, 255.0], [11.3, 255.0], [11.4, 255.0], [11.5, 255.0], [11.6, 255.0], [11.7, 264.0], [11.8, 264.0], [11.9, 264.0], [12.0, 264.0], [12.1, 269.0], [12.2, 269.0], [12.3, 269.0], [12.4, 269.0], [12.5, 269.0], [12.6, 275.0], [12.7, 275.0], [12.8, 275.0], [12.9, 275.0], [13.0, 275.0], [13.1, 278.0], [13.2, 278.0], [13.3, 278.0], [13.4, 278.0], [13.5, 280.0], [13.6, 280.0], [13.7, 280.0], [13.8, 280.0], [13.9, 280.0], [14.0, 282.0], [14.1, 282.0], [14.2, 282.0], [14.3, 282.0], [14.4, 282.0], [14.5, 283.0], [14.6, 283.0], [14.7, 283.0], [14.8, 283.0], [14.9, 286.0], [15.0, 286.0], [15.1, 286.0], [15.2, 286.0], [15.3, 286.0], [15.4, 289.0], [15.5, 289.0], [15.6, 289.0], [15.7, 289.0], [15.8, 289.0], [15.9, 291.0], [16.0, 291.0], [16.1, 291.0], [16.2, 291.0], [16.3, 291.0], [16.4, 291.0], [16.5, 291.0], [16.6, 291.0], [16.7, 291.0], [16.8, 291.0], [16.9, 291.0], [17.0, 291.0], [17.1, 291.0], [17.2, 291.0], [17.3, 293.0], [17.4, 293.0], [17.5, 293.0], [17.6, 293.0], [17.7, 299.0], [17.8, 299.0], [17.9, 299.0], [18.0, 299.0], [18.1, 299.0], [18.2, 301.0], [18.3, 301.0], [18.4, 301.0], [18.5, 301.0], [18.6, 301.0], [18.7, 304.0], [18.8, 304.0], [18.9, 304.0], [19.0, 304.0], [19.1, 305.0], [19.2, 305.0], [19.3, 305.0], [19.4, 305.0], [19.5, 305.0], [19.6, 306.0], [19.7, 306.0], [19.8, 306.0], [19.9, 306.0], [20.0, 306.0], [20.1, 306.0], [20.2, 306.0], [20.3, 306.0], [20.4, 306.0], [20.5, 309.0], [20.6, 309.0], [20.7, 309.0], [20.8, 309.0], [20.9, 309.0], [21.0, 310.0], [21.1, 310.0], [21.2, 310.0], [21.3, 310.0], [21.4, 322.0], [21.5, 322.0], [21.6, 322.0], [21.7, 322.0], [21.8, 322.0], [21.9, 333.0], [22.0, 333.0], [22.1, 333.0], [22.2, 333.0], [22.3, 333.0], [22.4, 334.0], [22.5, 334.0], [22.6, 334.0], [22.7, 334.0], [22.8, 338.0], [22.9, 338.0], [23.0, 338.0], [23.1, 338.0], [23.2, 338.0], [23.3, 345.0], [23.4, 345.0], [23.5, 345.0], [23.6, 345.0], [23.7, 345.0], [23.8, 346.0], [23.9, 346.0], [24.0, 346.0], [24.1, 346.0], [24.2, 354.0], [24.3, 354.0], [24.4, 354.0], [24.5, 354.0], [24.6, 354.0], [24.7, 356.0], [24.8, 356.0], [24.9, 356.0], [25.0, 356.0], [25.1, 356.0], [25.2, 356.0], [25.3, 356.0], [25.4, 356.0], [25.5, 356.0], [25.6, 356.0], [25.7, 356.0], [25.8, 356.0], [25.9, 356.0], [26.0, 356.0], [26.1, 370.0], [26.2, 370.0], [26.3, 370.0], [26.4, 370.0], [26.5, 370.0], [26.6, 378.0], [26.7, 378.0], [26.8, 378.0], [26.9, 378.0], [27.0, 388.0], [27.1, 388.0], [27.2, 388.0], [27.3, 388.0], [27.4, 388.0], [27.5, 393.0], [27.6, 393.0], [27.7, 393.0], [27.8, 393.0], [27.9, 393.0], [28.0, 404.0], [28.1, 404.0], [28.2, 404.0], [28.3, 404.0], [28.4, 411.0], [28.5, 411.0], [28.6, 411.0], [28.7, 411.0], [28.8, 411.0], [28.9, 413.0], [29.0, 413.0], [29.1, 413.0], [29.2, 413.0], [29.3, 413.0], [29.4, 427.0], [29.5, 427.0], [29.6, 427.0], [29.7, 427.0], [29.8, 429.0], [29.9, 429.0], [30.0, 429.0], [30.1, 429.0], [30.2, 429.0], [30.3, 433.0], [30.4, 433.0], [30.5, 433.0], [30.6, 433.0], [30.7, 445.0], [30.8, 445.0], [30.9, 445.0], [31.0, 445.0], [31.1, 445.0], [31.2, 447.0], [31.3, 447.0], [31.4, 447.0], [31.5, 447.0], [31.6, 447.0], [31.7, 450.0], [31.8, 450.0], [31.9, 450.0], [32.0, 450.0], [32.1, 450.0], [32.2, 450.0], [32.3, 450.0], [32.4, 450.0], [32.5, 450.0], [32.6, 458.0], [32.7, 458.0], [32.8, 458.0], [32.9, 458.0], [33.0, 458.0], [33.1, 464.0], [33.2, 464.0], [33.3, 464.0], [33.4, 464.0], [33.5, 474.0], [33.6, 474.0], [33.7, 474.0], [33.8, 474.0], [33.9, 474.0], [34.0, 490.0], [34.1, 490.0], [34.2, 490.0], [34.3, 490.0], [34.4, 490.0], [34.5, 494.0], [34.6, 494.0], [34.7, 494.0], [34.8, 494.0], [34.9, 498.0], [35.0, 498.0], [35.1, 498.0], [35.2, 498.0], [35.3, 498.0], [35.4, 518.0], [35.5, 518.0], [35.6, 518.0], [35.7, 518.0], [35.8, 518.0], [35.9, 522.0], [36.0, 522.0], [36.1, 522.0], [36.2, 522.0], [36.3, 522.0], [36.4, 522.0], [36.5, 522.0], [36.6, 522.0], [36.7, 522.0], [36.8, 524.0], [36.9, 524.0], [37.0, 524.0], [37.1, 524.0], [37.2, 524.0], [37.3, 524.0], [37.4, 524.0], [37.5, 524.0], [37.6, 524.0], [37.7, 532.0], [37.8, 532.0], [37.9, 532.0], [38.0, 532.0], [38.1, 532.0], [38.2, 535.0], [38.3, 535.0], [38.4, 535.0], [38.5, 535.0], [38.6, 535.0], [38.7, 539.0], [38.8, 539.0], [38.9, 539.0], [39.0, 539.0], [39.1, 543.0], [39.2, 543.0], [39.3, 543.0], [39.4, 543.0], [39.5, 543.0], [39.6, 543.0], [39.7, 543.0], [39.8, 543.0], [39.9, 543.0], [40.0, 543.0], [40.1, 552.0], [40.2, 552.0], [40.3, 552.0], [40.4, 552.0], [40.5, 559.0], [40.6, 559.0], [40.7, 559.0], [40.8, 559.0], [40.9, 559.0], [41.0, 559.0], [41.1, 559.0], [41.2, 559.0], [41.3, 559.0], [41.4, 561.0], [41.5, 561.0], [41.6, 561.0], [41.7, 561.0], [41.8, 561.0], [41.9, 566.0], [42.0, 566.0], [42.1, 566.0], [42.2, 566.0], [42.3, 566.0], [42.4, 566.0], [42.5, 566.0], [42.6, 566.0], [42.7, 566.0], [42.8, 572.0], [42.9, 572.0], [43.0, 572.0], [43.1, 572.0], [43.2, 572.0], [43.3, 581.0], [43.4, 581.0], [43.5, 581.0], [43.6, 581.0], [43.7, 581.0], [43.8, 586.0], [43.9, 586.0], [44.0, 586.0], [44.1, 586.0], [44.2, 588.0], [44.3, 588.0], [44.4, 588.0], [44.5, 588.0], [44.6, 588.0], [44.7, 593.0], [44.8, 593.0], [44.9, 593.0], [45.0, 593.0], [45.1, 593.0], [45.2, 595.0], [45.3, 595.0], [45.4, 595.0], [45.5, 595.0], [45.6, 597.0], [45.7, 597.0], [45.8, 597.0], [45.9, 597.0], [46.0, 597.0], [46.1, 598.0], [46.2, 598.0], [46.3, 598.0], [46.4, 598.0], [46.5, 598.0], [46.6, 600.0], [46.7, 600.0], [46.8, 600.0], [46.9, 600.0], [47.0, 604.0], [47.1, 604.0], [47.2, 604.0], [47.3, 604.0], [47.4, 604.0], [47.5, 621.0], [47.6, 621.0], [47.7, 621.0], [47.8, 621.0], [47.9, 621.0], [48.0, 637.0], [48.1, 637.0], [48.2, 637.0], [48.3, 637.0], [48.4, 640.0], [48.5, 640.0], [48.6, 640.0], [48.7, 640.0], [48.8, 640.0], [48.9, 642.0], [49.0, 642.0], [49.1, 642.0], [49.2, 642.0], [49.3, 642.0], [49.4, 644.0], [49.5, 644.0], [49.6, 644.0], [49.7, 644.0], [49.8, 647.0], [49.9, 647.0], [50.0, 647.0], [50.1, 647.0], [50.2, 647.0], [50.3, 656.0], [50.4, 656.0], [50.5, 656.0], [50.6, 656.0], [50.7, 660.0], [50.8, 660.0], [50.9, 660.0], [51.0, 660.0], [51.1, 660.0], [51.2, 663.0], [51.3, 663.0], [51.4, 663.0], [51.5, 663.0], [51.6, 663.0], [51.7, 669.0], [51.8, 669.0], [51.9, 669.0], [52.0, 669.0], [52.1, 675.0], [52.2, 675.0], [52.3, 675.0], [52.4, 675.0], [52.5, 675.0], [52.6, 679.0], [52.7, 679.0], [52.8, 679.0], [52.9, 679.0], [53.0, 679.0], [53.1, 682.0], [53.2, 682.0], [53.3, 682.0], [53.4, 682.0], [53.5, 704.0], [53.6, 704.0], [53.7, 704.0], [53.8, 704.0], [53.9, 704.0], [54.0, 705.0], [54.1, 705.0], [54.2, 705.0], [54.3, 705.0], [54.4, 705.0], [54.5, 705.0], [54.6, 705.0], [54.7, 705.0], [54.8, 705.0], [54.9, 708.0], [55.0, 708.0], [55.1, 708.0], [55.2, 708.0], [55.3, 708.0], [55.4, 729.0], [55.5, 729.0], [55.6, 729.0], [55.7, 729.0], [55.8, 729.0], [55.9, 737.0], [56.0, 737.0], [56.1, 737.0], [56.2, 737.0], [56.3, 746.0], [56.4, 746.0], [56.5, 746.0], [56.6, 746.0], [56.7, 746.0], [56.8, 748.0], [56.9, 748.0], [57.0, 748.0], [57.1, 748.0], [57.2, 748.0], [57.3, 748.0], [57.4, 748.0], [57.5, 748.0], [57.6, 748.0], [57.7, 779.0], [57.8, 779.0], [57.9, 779.0], [58.0, 779.0], [58.1, 779.0], [58.2, 812.0], [58.3, 812.0], [58.4, 812.0], [58.5, 812.0], [58.6, 812.0], [58.7, 821.0], [58.8, 821.0], [58.9, 821.0], [59.0, 821.0], [59.1, 837.0], [59.2, 837.0], [59.3, 837.0], [59.4, 837.0], [59.5, 837.0], [59.6, 847.0], [59.7, 847.0], [59.8, 847.0], [59.9, 847.0], [60.0, 847.0], [60.1, 850.0], [60.2, 850.0], [60.3, 850.0], [60.4, 850.0], [60.5, 851.0], [60.6, 851.0], [60.7, 851.0], [60.8, 851.0], [60.9, 851.0], [61.0, 854.0], [61.1, 854.0], [61.2, 854.0], [61.3, 854.0], [61.4, 860.0], [61.5, 860.0], [61.6, 860.0], [61.7, 860.0], [61.8, 860.0], [61.9, 869.0], [62.0, 869.0], [62.1, 869.0], [62.2, 869.0], [62.3, 869.0], [62.4, 905.0], [62.5, 905.0], [62.6, 905.0], [62.7, 905.0], [62.8, 920.0], [62.9, 920.0], [63.0, 920.0], [63.1, 920.0], [63.2, 920.0], [63.3, 922.0], [63.4, 922.0], [63.5, 922.0], [63.6, 922.0], [63.7, 922.0], [63.8, 925.0], [63.9, 925.0], [64.0, 925.0], [64.1, 925.0], [64.2, 930.0], [64.3, 930.0], [64.4, 930.0], [64.5, 930.0], [64.6, 930.0], [64.7, 933.0], [64.8, 933.0], [64.9, 933.0], [65.0, 933.0], [65.1, 933.0], [65.2, 936.0], [65.3, 936.0], [65.4, 936.0], [65.5, 936.0], [65.6, 956.0], [65.7, 956.0], [65.8, 956.0], [65.9, 956.0], [66.0, 956.0], [66.1, 965.0], [66.2, 965.0], [66.3, 965.0], [66.4, 965.0], [66.5, 965.0], [66.6, 997.0], [66.7, 997.0], [66.8, 997.0], [66.9, 997.0], [67.0, 1011.0], [67.1, 1011.0], [67.2, 1011.0], [67.3, 1011.0], [67.4, 1011.0], [67.5, 1015.0], [67.6, 1015.0], [67.7, 1015.0], [67.8, 1015.0], [67.9, 1015.0], [68.0, 1032.0], [68.1, 1032.0], [68.2, 1032.0], [68.3, 1032.0], [68.4, 1038.0], [68.5, 1038.0], [68.6, 1038.0], [68.7, 1038.0], [68.8, 1038.0], [68.9, 1061.0], [69.0, 1061.0], [69.1, 1061.0], [69.2, 1061.0], [69.3, 1061.0], [69.4, 1069.0], [69.5, 1069.0], [69.6, 1069.0], [69.7, 1069.0], [69.8, 1075.0], [69.9, 1075.0], [70.0, 1075.0], [70.1, 1075.0], [70.2, 1075.0], [70.3, 1077.0], [70.4, 1077.0], [70.5, 1077.0], [70.6, 1077.0], [70.7, 1095.0], [70.8, 1095.0], [70.9, 1095.0], [71.0, 1095.0], [71.1, 1095.0], [71.2, 1118.0], [71.3, 1118.0], [71.4, 1118.0], [71.5, 1118.0], [71.6, 1118.0], [71.7, 1139.0], [71.8, 1139.0], [71.9, 1139.0], [72.0, 1139.0], [72.1, 1151.0], [72.2, 1151.0], [72.3, 1151.0], [72.4, 1151.0], [72.5, 1151.0], [72.6, 1208.0], [72.7, 1208.0], [72.8, 1208.0], [72.9, 1208.0], [73.0, 1208.0], [73.1, 1225.0], [73.2, 1225.0], [73.3, 1225.0], [73.4, 1225.0], [73.5, 1249.0], [73.6, 1249.0], [73.7, 1249.0], [73.8, 1249.0], [73.9, 1249.0], [74.0, 1258.0], [74.1, 1258.0], [74.2, 1258.0], [74.3, 1258.0], [74.4, 1258.0], [74.5, 1262.0], [74.6, 1262.0], [74.7, 1262.0], [74.8, 1262.0], [74.9, 1359.0], [75.0, 1359.0], [75.1, 1359.0], [75.2, 1359.0], [75.3, 1359.0], [75.4, 1361.0], [75.5, 1361.0], [75.6, 1361.0], [75.7, 1361.0], [75.8, 1361.0], [75.9, 1414.0], [76.0, 1414.0], [76.1, 1414.0], [76.2, 1414.0], [76.3, 1470.0], [76.4, 1470.0], [76.5, 1470.0], [76.6, 1470.0], [76.7, 1470.0], [76.8, 1513.0], [76.9, 1513.0], [77.0, 1513.0], [77.1, 1513.0], [77.2, 1513.0], [77.3, 1773.0], [77.4, 1773.0], [77.5, 1773.0], [77.6, 1773.0], [77.7, 2336.0], [77.8, 2336.0], [77.9, 2336.0], [78.0, 2336.0], [78.1, 2336.0], [78.2, 3456.0], [78.3, 3456.0], [78.4, 3456.0], [78.5, 3456.0], [78.6, 3456.0], [78.7, 5316.0], [78.8, 5316.0], [78.9, 5316.0], [79.0, 5316.0], [79.1, 5423.0], [79.2, 5423.0], [79.3, 5423.0], [79.4, 5423.0], [79.5, 5423.0], [79.6, 6309.0], [79.7, 6309.0], [79.8, 6309.0], [79.9, 6309.0], [80.0, 6336.0], [80.1, 6336.0], [80.2, 6336.0], [80.3, 6336.0], [80.4, 6336.0], [80.5, 6359.0], [80.6, 6359.0], [80.7, 6359.0], [80.8, 6359.0], [80.9, 6359.0], [81.0, 6382.0], [81.1, 6382.0], [81.2, 6382.0], [81.3, 6382.0], [81.4, 6447.0], [81.5, 6447.0], [81.6, 6447.0], [81.7, 6447.0], [81.8, 6447.0], [81.9, 6576.0], [82.0, 6576.0], [82.1, 6576.0], [82.2, 6576.0], [82.3, 6576.0], [82.4, 6682.0], [82.5, 6682.0], [82.6, 6682.0], [82.7, 6682.0], [82.8, 6688.0], [82.9, 6688.0], [83.0, 6688.0], [83.1, 6688.0], [83.2, 6688.0], [83.3, 6722.0], [83.4, 6722.0], [83.5, 6722.0], [83.6, 6722.0], [83.7, 6722.0], [83.8, 7132.0], [83.9, 7132.0], [84.0, 7132.0], [84.1, 7132.0], [84.2, 7256.0], [84.3, 7256.0], [84.4, 7256.0], [84.5, 7256.0], [84.6, 7256.0], [84.7, 7615.0], [84.8, 7615.0], [84.9, 7615.0], [85.0, 7615.0], [85.1, 7615.0], [85.2, 7964.0], [85.3, 7964.0], [85.4, 7964.0], [85.5, 7964.0], [85.6, 8586.0], [85.7, 8586.0], [85.8, 8586.0], [85.9, 8586.0], [86.0, 8586.0], [86.1, 8728.0], [86.2, 8728.0], [86.3, 8728.0], [86.4, 8728.0], [86.5, 8728.0], [86.6, 8760.0], [86.7, 8760.0], [86.8, 8760.0], [86.9, 8760.0], [87.0, 9473.0], [87.1, 9473.0], [87.2, 9473.0], [87.3, 9473.0], [87.4, 9473.0], [87.5, 9522.0], [87.6, 9522.0], [87.7, 9522.0], [87.8, 9522.0], [87.9, 9522.0], [88.0, 9658.0], [88.1, 9658.0], [88.2, 9658.0], [88.3, 9658.0], [88.4, 9661.0], [88.5, 9661.0], [88.6, 9661.0], [88.7, 9661.0], [88.8, 9661.0], [88.9, 9832.0], [89.0, 9832.0], [89.1, 9832.0], [89.2, 9832.0], [89.3, 9832.0], [89.4, 10232.0], [89.5, 10232.0], [89.6, 10232.0], [89.7, 10232.0], [89.8, 10397.0], [89.9, 10397.0], [90.0, 10397.0], [90.1, 10397.0], [90.2, 10397.0], [90.3, 10610.0], [90.4, 10610.0], [90.5, 10610.0], [90.6, 10610.0], [90.7, 10801.0], [90.8, 10801.0], [90.9, 10801.0], [91.0, 10801.0], [91.1, 10801.0], [91.2, 11255.0], [91.3, 11255.0], [91.4, 11255.0], [91.5, 11255.0], [91.6, 11255.0], [91.7, 11551.0], [91.8, 11551.0], [91.9, 11551.0], [92.0, 11551.0], [92.1, 11888.0], [92.2, 11888.0], [92.3, 11888.0], [92.4, 11888.0], [92.5, 11888.0], [92.6, 11952.0], [92.7, 11952.0], [92.8, 11952.0], [92.9, 11952.0], [93.0, 11952.0], [93.1, 12046.0], [93.2, 12046.0], [93.3, 12046.0], [93.4, 12046.0], [93.5, 12051.0], [93.6, 12051.0], [93.7, 12051.0], [93.8, 12051.0], [93.9, 12051.0], [94.0, 12063.0], [94.1, 12063.0], [94.2, 12063.0], [94.3, 12063.0], [94.4, 12063.0], [94.5, 12155.0], [94.6, 12155.0], [94.7, 12155.0], [94.8, 12155.0], [94.9, 12281.0], [95.0, 12281.0], [95.1, 12281.0], [95.2, 12281.0], [95.3, 12281.0], [95.4, 12310.0], [95.5, 12310.0], [95.6, 12310.0], [95.7, 12310.0], [95.8, 12310.0], [95.9, 12328.0], [96.0, 12328.0], [96.1, 12328.0], [96.2, 12328.0], [96.3, 12328.0], [96.4, 12328.0], [96.5, 12328.0], [96.6, 12328.0], [96.7, 12328.0], [96.8, 12432.0], [96.9, 12432.0], [97.0, 12432.0], [97.1, 12432.0], [97.2, 12432.0], [97.3, 12439.0], [97.4, 12439.0], [97.5, 12439.0], [97.6, 12439.0], [97.7, 12485.0], [97.8, 12485.0], [97.9, 12485.0], [98.0, 12485.0], [98.1, 12485.0], [98.2, 12622.0], [98.3, 12622.0], [98.4, 12622.0], [98.5, 12622.0], [98.6, 12622.0], [98.7, 12665.0], [98.8, 12665.0], [98.9, 12665.0], [99.0, 12665.0], [99.1, 12925.0], [99.2, 12925.0], [99.3, 12925.0], [99.4, 12925.0], [99.5, 12925.0], [99.6, 12933.0], [99.7, 12933.0], [99.8, 12933.0], [99.9, 12933.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[0.0, 298.0], [0.1, 298.0], [0.2, 298.0], [0.3, 298.0], [0.4, 298.0], [0.5, 300.0], [0.6, 300.0], [0.7, 300.0], [0.8, 300.0], [0.9, 300.0], [1.0, 303.0], [1.1, 303.0], [1.2, 303.0], [1.3, 303.0], [1.4, 304.0], [1.5, 304.0], [1.6, 304.0], [1.7, 304.0], [1.8, 304.0], [1.9, 304.0], [2.0, 304.0], [2.1, 304.0], [2.2, 304.0], [2.3, 304.0], [2.4, 305.0], [2.5, 305.0], [2.6, 305.0], [2.7, 305.0], [2.8, 305.0], [2.9, 305.0], [3.0, 305.0], [3.1, 305.0], [3.2, 305.0], [3.3, 306.0], [3.4, 306.0], [3.5, 306.0], [3.6, 306.0], [3.7, 306.0], [3.8, 306.0], [3.9, 306.0], [4.0, 306.0], [4.1, 306.0], [4.2, 307.0], [4.3, 307.0], [4.4, 307.0], [4.5, 307.0], [4.6, 307.0], [4.7, 307.0], [4.8, 307.0], [4.9, 307.0], [5.0, 307.0], [5.1, 307.0], [5.2, 308.0], [5.3, 308.0], [5.4, 308.0], [5.5, 308.0], [5.6, 313.0], [5.7, 313.0], [5.8, 313.0], [5.9, 313.0], [6.0, 313.0], [6.1, 318.0], [6.2, 318.0], [6.3, 318.0], [6.4, 318.0], [6.5, 318.0], [6.6, 325.0], [6.7, 325.0], [6.8, 325.0], [6.9, 325.0], [7.0, 347.0], [7.1, 347.0], [7.2, 347.0], [7.3, 347.0], [7.4, 347.0], [7.5, 354.0], [7.6, 354.0], [7.7, 354.0], [7.8, 354.0], [7.9, 354.0], [8.0, 354.0], [8.1, 354.0], [8.2, 354.0], [8.3, 354.0], [8.4, 375.0], [8.5, 375.0], [8.6, 375.0], [8.7, 375.0], [8.8, 375.0], [8.9, 380.0], [9.0, 380.0], [9.1, 380.0], [9.2, 380.0], [9.3, 380.0], [9.4, 409.0], [9.5, 409.0], [9.6, 409.0], [9.7, 409.0], [9.8, 422.0], [9.9, 422.0], [10.0, 422.0], [10.1, 422.0], [10.2, 422.0], [10.3, 426.0], [10.4, 426.0], [10.5, 426.0], [10.6, 426.0], [10.7, 436.0], [10.8, 436.0], [10.9, 436.0], [11.0, 436.0], [11.1, 436.0], [11.2, 463.0], [11.3, 463.0], [11.4, 463.0], [11.5, 463.0], [11.6, 463.0], [11.7, 465.0], [11.8, 465.0], [11.9, 465.0], [12.0, 465.0], [12.1, 468.0], [12.2, 468.0], [12.3, 468.0], [12.4, 468.0], [12.5, 468.0], [12.6, 470.0], [12.7, 470.0], [12.8, 470.0], [12.9, 470.0], [13.0, 470.0], [13.1, 475.0], [13.2, 475.0], [13.3, 475.0], [13.4, 475.0], [13.5, 476.0], [13.6, 476.0], [13.7, 476.0], [13.8, 476.0], [13.9, 476.0], [14.0, 482.0], [14.1, 482.0], [14.2, 482.0], [14.3, 482.0], [14.4, 482.0], [14.5, 493.0], [14.6, 493.0], [14.7, 493.0], [14.8, 493.0], [14.9, 502.0], [15.0, 502.0], [15.1, 502.0], [15.2, 502.0], [15.3, 502.0], [15.4, 509.0], [15.5, 509.0], [15.6, 509.0], [15.7, 509.0], [15.8, 509.0], [15.9, 518.0], [16.0, 518.0], [16.1, 518.0], [16.2, 518.0], [16.3, 521.0], [16.4, 521.0], [16.5, 521.0], [16.6, 521.0], [16.7, 521.0], [16.8, 529.0], [16.9, 529.0], [17.0, 529.0], [17.1, 529.0], [17.2, 529.0], [17.3, 539.0], [17.4, 539.0], [17.5, 539.0], [17.6, 539.0], [17.7, 555.0], [17.8, 555.0], [17.9, 555.0], [18.0, 555.0], [18.1, 555.0], [18.2, 575.0], [18.3, 575.0], [18.4, 575.0], [18.5, 575.0], [18.6, 575.0], [18.7, 613.0], [18.8, 613.0], [18.9, 613.0], [19.0, 613.0], [19.1, 633.0], [19.2, 633.0], [19.3, 633.0], [19.4, 633.0], [19.5, 633.0], [19.6, 647.0], [19.7, 647.0], [19.8, 647.0], [19.9, 647.0], [20.0, 647.0], [20.1, 671.0], [20.2, 671.0], [20.3, 671.0], [20.4, 671.0], [20.5, 729.0], [20.6, 729.0], [20.7, 729.0], [20.8, 729.0], [20.9, 729.0], [21.0, 731.0], [21.1, 731.0], [21.2, 731.0], [21.3, 731.0], [21.4, 771.0], [21.5, 771.0], [21.6, 771.0], [21.7, 771.0], [21.8, 771.0], [21.9, 1037.0], [22.0, 1037.0], [22.1, 1037.0], [22.2, 1037.0], [22.3, 1037.0], [22.4, 1096.0], [22.5, 1096.0], [22.6, 1096.0], [22.7, 1096.0], [22.8, 1270.0], [22.9, 1270.0], [23.0, 1270.0], [23.1, 1270.0], [23.2, 1270.0], [23.3, 1426.0], [23.4, 1426.0], [23.5, 1426.0], [23.6, 1426.0], [23.7, 1426.0], [23.8, 1553.0], [23.9, 1553.0], [24.0, 1553.0], [24.1, 1553.0], [24.2, 1558.0], [24.3, 1558.0], [24.4, 1558.0], [24.5, 1558.0], [24.6, 1558.0], [24.7, 1658.0], [24.8, 1658.0], [24.9, 1658.0], [25.0, 1658.0], [25.1, 1658.0], [25.2, 1809.0], [25.3, 1809.0], [25.4, 1809.0], [25.5, 1809.0], [25.6, 1881.0], [25.7, 1881.0], [25.8, 1881.0], [25.9, 1881.0], [26.0, 1881.0], [26.1, 1910.0], [26.2, 1910.0], [26.3, 1910.0], [26.4, 1910.0], [26.5, 1910.0], [26.6, 2079.0], [26.7, 2079.0], [26.8, 2079.0], [26.9, 2079.0], [27.0, 2445.0], [27.1, 2445.0], [27.2, 2445.0], [27.3, 2445.0], [27.4, 2445.0], [27.5, 2633.0], [27.6, 2633.0], [27.7, 2633.0], [27.8, 2633.0], [27.9, 2633.0], [28.0, 2783.0], [28.1, 2783.0], [28.2, 2783.0], [28.3, 2783.0], [28.4, 3223.0], [28.5, 3223.0], [28.6, 3223.0], [28.7, 3223.0], [28.8, 3223.0], [28.9, 3416.0], [29.0, 3416.0], [29.1, 3416.0], [29.2, 3416.0], [29.3, 3416.0], [29.4, 3734.0], [29.5, 3734.0], [29.6, 3734.0], [29.7, 3734.0], [29.8, 3788.0], [29.9, 3788.0], [30.0, 3788.0], [30.1, 3788.0], [30.2, 3788.0], [30.3, 3894.0], [30.4, 3894.0], [30.5, 3894.0], [30.6, 3894.0], [30.7, 4010.0], [30.8, 4010.0], [30.9, 4010.0], [31.0, 4010.0], [31.1, 4010.0], [31.2, 4424.0], [31.3, 4424.0], [31.4, 4424.0], [31.5, 4424.0], [31.6, 4424.0], [31.7, 4743.0], [31.8, 4743.0], [31.9, 4743.0], [32.0, 4743.0], [32.1, 5108.0], [32.2, 5108.0], [32.3, 5108.0], [32.4, 5108.0], [32.5, 5108.0], [32.6, 5322.0], [32.7, 5322.0], [32.8, 5322.0], [32.9, 5322.0], [33.0, 5322.0], [33.1, 5648.0], [33.2, 5648.0], [33.3, 5648.0], [33.4, 5648.0], [33.5, 6142.0], [33.6, 6142.0], [33.7, 6142.0], [33.8, 6142.0], [33.9, 6142.0], [34.0, 6203.0], [34.1, 6203.0], [34.2, 6203.0], [34.3, 6203.0], [34.4, 6203.0], [34.5, 6611.0], [34.6, 6611.0], [34.7, 6611.0], [34.8, 6611.0], [34.9, 7126.0], [35.0, 7126.0], [35.1, 7126.0], [35.2, 7126.0], [35.3, 7126.0], [35.4, 7370.0], [35.5, 7370.0], [35.6, 7370.0], [35.7, 7370.0], [35.8, 7370.0], [35.9, 7467.0], [36.0, 7467.0], [36.1, 7467.0], [36.2, 7467.0], [36.3, 8021.0], [36.4, 8021.0], [36.5, 8021.0], [36.6, 8021.0], [36.7, 8021.0], [36.8, 8163.0], [36.9, 8163.0], [37.0, 8163.0], [37.1, 8163.0], [37.2, 8163.0], [37.3, 8702.0], [37.4, 8702.0], [37.5, 8702.0], [37.6, 8702.0], [37.7, 9780.0], [37.8, 9780.0], [37.9, 9780.0], [38.0, 9780.0], [38.1, 9780.0], [38.2, 10756.0], [38.3, 10756.0], [38.4, 10756.0], [38.5, 10756.0], [38.6, 10756.0], [38.7, 11042.0], [38.8, 11042.0], [38.9, 11042.0], [39.0, 11042.0], [39.1, 11775.0], [39.2, 11775.0], [39.3, 11775.0], [39.4, 11775.0], [39.5, 11775.0], [39.6, 12061.0], [39.7, 12061.0], [39.8, 12061.0], [39.9, 12061.0], [40.0, 12061.0], [40.1, 12342.0], [40.2, 12342.0], [40.3, 12342.0], [40.4, 12342.0], [40.5, 12557.0], [40.6, 12557.0], [40.7, 12557.0], [40.8, 12557.0], [40.9, 12557.0], [41.0, 12715.0], [41.1, 12715.0], [41.2, 12715.0], [41.3, 12715.0], [41.4, 12839.0], [41.5, 12839.0], [41.6, 12839.0], [41.7, 12839.0], [41.8, 12839.0], [41.9, 14125.0], [42.0, 14125.0], [42.1, 14125.0], [42.2, 14125.0], [42.3, 14125.0], [42.4, 15066.0], [42.5, 15066.0], [42.6, 15066.0], [42.7, 15066.0], [42.8, 15153.0], [42.9, 15153.0], [43.0, 15153.0], [43.1, 15153.0], [43.2, 15153.0], [43.3, 15159.0], [43.4, 15159.0], [43.5, 15159.0], [43.6, 15159.0], [43.7, 15159.0], [43.8, 15409.0], [43.9, 15409.0], [44.0, 15409.0], [44.1, 15409.0], [44.2, 15947.0], [44.3, 15947.0], [44.4, 15947.0], [44.5, 15947.0], [44.6, 15947.0], [44.7, 16219.0], [44.8, 16219.0], [44.9, 16219.0], [45.0, 16219.0], [45.1, 16219.0], [45.2, 16282.0], [45.3, 16282.0], [45.4, 16282.0], [45.5, 16282.0], [45.6, 16298.0], [45.7, 16298.0], [45.8, 16298.0], [45.9, 16298.0], [46.0, 16298.0], [46.1, 16590.0], [46.2, 16590.0], [46.3, 16590.0], [46.4, 16590.0], [46.5, 16590.0], [46.6, 16670.0], [46.7, 16670.0], [46.8, 16670.0], [46.9, 16670.0], [47.0, 17141.0], [47.1, 17141.0], [47.2, 17141.0], [47.3, 17141.0], [47.4, 17141.0], [47.5, 17603.0], [47.6, 17603.0], [47.7, 17603.0], [47.8, 17603.0], [47.9, 17603.0], [48.0, 18169.0], [48.1, 18169.0], [48.2, 18169.0], [48.3, 18169.0], [48.4, 18213.0], [48.5, 18213.0], [48.6, 18213.0], [48.7, 18213.0], [48.8, 18213.0], [48.9, 18329.0], [49.0, 18329.0], [49.1, 18329.0], [49.2, 18329.0], [49.3, 18329.0], [49.4, 18393.0], [49.5, 18393.0], [49.6, 18393.0], [49.7, 18393.0], [49.8, 18398.0], [49.9, 18398.0], [50.0, 18398.0], [50.1, 18398.0], [50.2, 18398.0], [50.3, 18424.0], [50.4, 18424.0], [50.5, 18424.0], [50.6, 18424.0], [50.7, 18749.0], [50.8, 18749.0], [50.9, 18749.0], [51.0, 18749.0], [51.1, 18749.0], [51.2, 18882.0], [51.3, 18882.0], [51.4, 18882.0], [51.5, 18882.0], [51.6, 18882.0], [51.7, 18934.0], [51.8, 18934.0], [51.9, 18934.0], [52.0, 18934.0], [52.1, 19144.0], [52.2, 19144.0], [52.3, 19144.0], [52.4, 19144.0], [52.5, 19144.0], [52.6, 19222.0], [52.7, 19222.0], [52.8, 19222.0], [52.9, 19222.0], [53.0, 19222.0], [53.1, 19458.0], [53.2, 19458.0], [53.3, 19458.0], [53.4, 19458.0], [53.5, 19747.0], [53.6, 19747.0], [53.7, 19747.0], [53.8, 19747.0], [53.9, 19747.0], [54.0, 19982.0], [54.1, 19982.0], [54.2, 19982.0], [54.3, 19982.0], [54.4, 19982.0], [54.5, 20005.0], [54.6, 20005.0], [54.7, 20005.0], [54.8, 20005.0], [54.9, 20017.0], [55.0, 20017.0], [55.1, 20017.0], [55.2, 20017.0], [55.3, 20017.0], [55.4, 20068.0], [55.5, 20068.0], [55.6, 20068.0], [55.7, 20068.0], [55.8, 20068.0], [55.9, 20488.0], [56.0, 20488.0], [56.1, 20488.0], [56.2, 20488.0], [56.3, 20604.0], [56.4, 20604.0], [56.5, 20604.0], [56.6, 20604.0], [56.7, 20604.0], [56.8, 20686.0], [56.9, 20686.0], [57.0, 20686.0], [57.1, 20686.0], [57.2, 20686.0], [57.3, 20708.0], [57.4, 20708.0], [57.5, 20708.0], [57.6, 20708.0], [57.7, 21105.0], [57.8, 21105.0], [57.9, 21105.0], [58.0, 21105.0], [58.1, 21105.0], [58.2, 21246.0], [58.3, 21246.0], [58.4, 21246.0], [58.5, 21246.0], [58.6, 21246.0], [58.7, 21349.0], [58.8, 21349.0], [58.9, 21349.0], [59.0, 21349.0], [59.1, 21439.0], [59.2, 21439.0], [59.3, 21439.0], [59.4, 21439.0], [59.5, 21439.0], [59.6, 21531.0], [59.7, 21531.0], [59.8, 21531.0], [59.9, 21531.0], [60.0, 21531.0], [60.1, 21620.0], [60.2, 21620.0], [60.3, 21620.0], [60.4, 21620.0], [60.5, 21644.0], [60.6, 21644.0], [60.7, 21644.0], [60.8, 21644.0], [60.9, 21644.0], [61.0, 21679.0], [61.1, 21679.0], [61.2, 21679.0], [61.3, 21679.0], [61.4, 21706.0], [61.5, 21706.0], [61.6, 21706.0], [61.7, 21706.0], [61.8, 21706.0], [61.9, 21725.0], [62.0, 21725.0], [62.1, 21725.0], [62.2, 21725.0], [62.3, 21725.0], [62.4, 21735.0], [62.5, 21735.0], [62.6, 21735.0], [62.7, 21735.0], [62.8, 21805.0], [62.9, 21805.0], [63.0, 21805.0], [63.1, 21805.0], [63.2, 21805.0], [63.3, 21848.0], [63.4, 21848.0], [63.5, 21848.0], [63.6, 21848.0], [63.7, 21848.0], [63.8, 21872.0], [63.9, 21872.0], [64.0, 21872.0], [64.1, 21872.0], [64.2, 21873.0], [64.3, 21873.0], [64.4, 21873.0], [64.5, 21873.0], [64.6, 21873.0], [64.7, 22014.0], [64.8, 22014.0], [64.9, 22014.0], [65.0, 22014.0], [65.1, 22014.0], [65.2, 22030.0], [65.3, 22030.0], [65.4, 22030.0], [65.5, 22030.0], [65.6, 22034.0], [65.7, 22034.0], [65.8, 22034.0], [65.9, 22034.0], [66.0, 22034.0], [66.1, 22036.0], [66.2, 22036.0], [66.3, 22036.0], [66.4, 22036.0], [66.5, 22036.0], [66.6, 22077.0], [66.7, 22077.0], [66.8, 22077.0], [66.9, 22077.0], [67.0, 22090.0], [67.1, 22090.0], [67.2, 22090.0], [67.3, 22090.0], [67.4, 22090.0], [67.5, 22177.0], [67.6, 22177.0], [67.7, 22177.0], [67.8, 22177.0], [67.9, 22177.0], [68.0, 22194.0], [68.1, 22194.0], [68.2, 22194.0], [68.3, 22194.0], [68.4, 22211.0], [68.5, 22211.0], [68.6, 22211.0], [68.7, 22211.0], [68.8, 22211.0], [68.9, 22233.0], [69.0, 22233.0], [69.1, 22233.0], [69.2, 22233.0], [69.3, 22233.0], [69.4, 22234.0], [69.5, 22234.0], [69.6, 22234.0], [69.7, 22234.0], [69.8, 22239.0], [69.9, 22239.0], [70.0, 22239.0], [70.1, 22239.0], [70.2, 22239.0], [70.3, 22259.0], [70.4, 22259.0], [70.5, 22259.0], [70.6, 22259.0], [70.7, 22274.0], [70.8, 22274.0], [70.9, 22274.0], [71.0, 22274.0], [71.1, 22274.0], [71.2, 22327.0], [71.3, 22327.0], [71.4, 22327.0], [71.5, 22327.0], [71.6, 22327.0], [71.7, 22353.0], [71.8, 22353.0], [71.9, 22353.0], [72.0, 22353.0], [72.1, 22377.0], [72.2, 22377.0], [72.3, 22377.0], [72.4, 22377.0], [72.5, 22377.0], [72.6, 22381.0], [72.7, 22381.0], [72.8, 22381.0], [72.9, 22381.0], [73.0, 22381.0], [73.1, 22416.0], [73.2, 22416.0], [73.3, 22416.0], [73.4, 22416.0], [73.5, 22432.0], [73.6, 22432.0], [73.7, 22432.0], [73.8, 22432.0], [73.9, 22432.0], [74.0, 22438.0], [74.1, 22438.0], [74.2, 22438.0], [74.3, 22438.0], [74.4, 22438.0], [74.5, 22444.0], [74.6, 22444.0], [74.7, 22444.0], [74.8, 22444.0], [74.9, 22448.0], [75.0, 22448.0], [75.1, 22448.0], [75.2, 22448.0], [75.3, 22448.0], [75.4, 22452.0], [75.5, 22452.0], [75.6, 22452.0], [75.7, 22452.0], [75.8, 22452.0], [75.9, 22455.0], [76.0, 22455.0], [76.1, 22455.0], [76.2, 22455.0], [76.3, 22464.0], [76.4, 22464.0], [76.5, 22464.0], [76.6, 22464.0], [76.7, 22464.0], [76.8, 22470.0], [76.9, 22470.0], [77.0, 22470.0], [77.1, 22470.0], [77.2, 22470.0], [77.3, 22495.0], [77.4, 22495.0], [77.5, 22495.0], [77.6, 22495.0], [77.7, 22502.0], [77.8, 22502.0], [77.9, 22502.0], [78.0, 22502.0], [78.1, 22502.0], [78.2, 22519.0], [78.3, 22519.0], [78.4, 22519.0], [78.5, 22519.0], [78.6, 22519.0], [78.7, 22545.0], [78.8, 22545.0], [78.9, 22545.0], [79.0, 22545.0], [79.1, 22563.0], [79.2, 22563.0], [79.3, 22563.0], [79.4, 22563.0], [79.5, 22563.0], [79.6, 22567.0], [79.7, 22567.0], [79.8, 22567.0], [79.9, 22567.0], [80.0, 22604.0], [80.1, 22604.0], [80.2, 22604.0], [80.3, 22604.0], [80.4, 22604.0], [80.5, 22618.0], [80.6, 22618.0], [80.7, 22618.0], [80.8, 22618.0], [80.9, 22618.0], [81.0, 22651.0], [81.1, 22651.0], [81.2, 22651.0], [81.3, 22651.0], [81.4, 22667.0], [81.5, 22667.0], [81.6, 22667.0], [81.7, 22667.0], [81.8, 22667.0], [81.9, 22686.0], [82.0, 22686.0], [82.1, 22686.0], [82.2, 22686.0], [82.3, 22686.0], [82.4, 22717.0], [82.5, 22717.0], [82.6, 22717.0], [82.7, 22717.0], [82.8, 22723.0], [82.9, 22723.0], [83.0, 22723.0], [83.1, 22723.0], [83.2, 22723.0], [83.3, 22724.0], [83.4, 22724.0], [83.5, 22724.0], [83.6, 22724.0], [83.7, 22724.0], [83.8, 22728.0], [83.9, 22728.0], [84.0, 22728.0], [84.1, 22728.0], [84.2, 22750.0], [84.3, 22750.0], [84.4, 22750.0], [84.5, 22750.0], [84.6, 22750.0], [84.7, 22780.0], [84.8, 22780.0], [84.9, 22780.0], [85.0, 22780.0], [85.1, 22780.0], [85.2, 22807.0], [85.3, 22807.0], [85.4, 22807.0], [85.5, 22807.0], [85.6, 22823.0], [85.7, 22823.0], [85.8, 22823.0], [85.9, 22823.0], [86.0, 22823.0], [86.1, 22825.0], [86.2, 22825.0], [86.3, 22825.0], [86.4, 22825.0], [86.5, 22825.0], [86.6, 22874.0], [86.7, 22874.0], [86.8, 22874.0], [86.9, 22874.0], [87.0, 22886.0], [87.1, 22886.0], [87.2, 22886.0], [87.3, 22886.0], [87.4, 22886.0], [87.5, 22924.0], [87.6, 22924.0], [87.7, 22924.0], [87.8, 22924.0], [87.9, 22924.0], [88.0, 22930.0], [88.1, 22930.0], [88.2, 22930.0], [88.3, 22930.0], [88.4, 22941.0], [88.5, 22941.0], [88.6, 22941.0], [88.7, 22941.0], [88.8, 22941.0], [88.9, 22951.0], [89.0, 22951.0], [89.1, 22951.0], [89.2, 22951.0], [89.3, 22951.0], [89.4, 23018.0], [89.5, 23018.0], [89.6, 23018.0], [89.7, 23018.0], [89.8, 23034.0], [89.9, 23034.0], [90.0, 23034.0], [90.1, 23034.0], [90.2, 23034.0], [90.3, 23042.0], [90.4, 23042.0], [90.5, 23042.0], [90.6, 23042.0], [90.7, 23085.0], [90.8, 23085.0], [90.9, 23085.0], [91.0, 23085.0], [91.1, 23085.0], [91.2, 23153.0], [91.3, 23153.0], [91.4, 23153.0], [91.5, 23153.0], [91.6, 23153.0], [91.7, 23187.0], [91.8, 23187.0], [91.9, 23187.0], [92.0, 23187.0], [92.1, 23188.0], [92.2, 23188.0], [92.3, 23188.0], [92.4, 23188.0], [92.5, 23188.0], [92.6, 23252.0], [92.7, 23252.0], [92.8, 23252.0], [92.9, 23252.0], [93.0, 23252.0], [93.1, 23314.0], [93.2, 23314.0], [93.3, 23314.0], [93.4, 23314.0], [93.5, 23331.0], [93.6, 23331.0], [93.7, 23331.0], [93.8, 23331.0], [93.9, 23331.0], [94.0, 23362.0], [94.1, 23362.0], [94.2, 23362.0], [94.3, 23362.0], [94.4, 23362.0], [94.5, 23375.0], [94.6, 23375.0], [94.7, 23375.0], [94.8, 23375.0], [94.9, 23412.0], [95.0, 23412.0], [95.1, 23412.0], [95.2, 23412.0], [95.3, 23412.0], [95.4, 23438.0], [95.5, 23438.0], [95.6, 23438.0], [95.7, 23438.0], [95.8, 23438.0], [95.9, 23463.0], [96.0, 23463.0], [96.1, 23463.0], [96.2, 23463.0], [96.3, 23510.0], [96.4, 23510.0], [96.5, 23510.0], [96.6, 23510.0], [96.7, 23510.0], [96.8, 23553.0], [96.9, 23553.0], [97.0, 23553.0], [97.1, 23553.0], [97.2, 23553.0], [97.3, 23684.0], [97.4, 23684.0], [97.5, 23684.0], [97.6, 23684.0], [97.7, 23703.0], [97.8, 23703.0], [97.9, 23703.0], [98.0, 23703.0], [98.1, 23703.0], [98.2, 23915.0], [98.3, 23915.0], [98.4, 23915.0], [98.5, 23915.0], [98.6, 23915.0], [98.7, 24341.0], [98.8, 24341.0], [98.9, 24341.0], [99.0, 24341.0], [99.1, 24510.0], [99.2, 24510.0], [99.3, 24510.0], [99.4, 24510.0], [99.5, 24510.0], [99.6, 24905.0], [99.7, 24905.0], [99.8, 24905.0], [99.9, 24905.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 30.0, "series": [{"data": [[600.0, 15.0], [700.0, 10.0], [800.0, 9.0], [900.0, 10.0], [1000.0, 9.0], [1100.0, 3.0], [1200.0, 5.0], [1300.0, 2.0], [1400.0, 2.0], [1500.0, 1.0], [1700.0, 1.0], [2300.0, 1.0], [3400.0, 1.0], [5300.0, 1.0], [5400.0, 1.0], [6300.0, 4.0], [6600.0, 2.0], [6400.0, 1.0], [6500.0, 1.0], [6700.0, 1.0], [7100.0, 1.0], [7200.0, 1.0], [7600.0, 1.0], [7900.0, 1.0], [8700.0, 2.0], [8500.0, 1.0], [9500.0, 1.0], [9400.0, 1.0], [9600.0, 2.0], [9800.0, 1.0], [10200.0, 1.0], [10300.0, 1.0], [10600.0, 1.0], [10800.0, 1.0], [11200.0, 1.0], [11500.0, 1.0], [11800.0, 1.0], [11900.0, 1.0], [12000.0, 3.0], [12100.0, 1.0], [12200.0, 1.0], [12400.0, 3.0], [12300.0, 3.0], [12600.0, 2.0], [12900.0, 2.0], [100.0, 9.0], [200.0, 30.0], [300.0, 21.0], [400.0, 16.0], [500.0, 24.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[200.0, 1.0], [300.0, 19.0], [400.0, 12.0], [500.0, 8.0], [600.0, 4.0], [700.0, 3.0], [1000.0, 2.0], [1200.0, 1.0], [1400.0, 1.0], [1500.0, 2.0], [1600.0, 1.0], [1800.0, 2.0], [1900.0, 1.0], [2000.0, 1.0], [2400.0, 1.0], [2600.0, 1.0], [2700.0, 1.0], [3200.0, 1.0], [3400.0, 1.0], [3700.0, 2.0], [3800.0, 1.0], [4000.0, 1.0], [4400.0, 1.0], [4700.0, 1.0], [5100.0, 1.0], [5300.0, 1.0], [5600.0, 1.0], [6100.0, 1.0], [6200.0, 1.0], [6600.0, 1.0], [7100.0, 1.0], [7300.0, 1.0], [7400.0, 1.0], [8000.0, 1.0], [8100.0, 1.0], [8700.0, 1.0], [9700.0, 1.0], [10700.0, 1.0], [11000.0, 1.0], [11700.0, 1.0], [12000.0, 1.0], [12500.0, 1.0], [12300.0, 1.0], [12700.0, 1.0], [12800.0, 1.0], [14100.0, 1.0], [15100.0, 2.0], [15000.0, 1.0], [15400.0, 1.0], [15900.0, 1.0], [16200.0, 3.0], [16500.0, 1.0], [16600.0, 1.0], [17100.0, 1.0], [17600.0, 1.0], [18400.0, 1.0], [18300.0, 3.0], [18100.0, 1.0], [18200.0, 1.0], [18900.0, 1.0], [18800.0, 1.0], [18700.0, 1.0], [19100.0, 1.0], [19400.0, 1.0], [19200.0, 1.0], [20000.0, 3.0], [19900.0, 1.0], [19700.0, 1.0], [20400.0, 1.0], [20600.0, 2.0], [21100.0, 1.0], [20700.0, 1.0], [21500.0, 1.0], [21400.0, 1.0], [21300.0, 1.0], [21200.0, 1.0], [22000.0, 6.0], [21800.0, 4.0], [22400.0, 10.0], [21600.0, 3.0], [22200.0, 6.0], [21700.0, 3.0], [22300.0, 4.0], [22500.0, 5.0], [22100.0, 2.0], [23300.0, 4.0], [22800.0, 5.0], [23100.0, 3.0], [22900.0, 4.0], [23400.0, 3.0], [23500.0, 2.0], [22600.0, 5.0], [22700.0, 6.0], [23000.0, 4.0], [23200.0, 1.0], [23600.0, 1.0], [24300.0, 1.0], [23900.0, 1.0], [23700.0, 1.0], [24500.0, 1.0], [24900.0, 1.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 24900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 108.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 214.0, "series": [{"data": [[0.0, 108.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 108.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 214.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.6546078815E12, "maxY": 1.9166666666666667, "series": [{"data": [[1.654607895E12, 1.5714285714285716], [1.654607937E12, 1.0], [1.654607898E12, 1.6428571428571428], [1.6546079175E12, 1.6923076923076923], [1.654607901E12, 1.75], [1.6546079205E12, 1.5714285714285714], [1.6546078815E12, 1.6], [1.654607904E12, 1.7857142857142856], [1.6546079235E12, 1.4444444444444444], [1.6546078845E12, 1.5], [1.6546079265E12, 1.588235294117647], [1.6546079295E12, 1.0], [1.6546078875E12, 1.5], [1.654607907E12, 1.7142857142857144], [1.6546079325E12, 1.0], [1.6546078905E12, 1.5454545454545454], [1.65460791E12, 1.9166666666666667], [1.6546079355E12, 1.0], [1.654607913E12, 1.2], [1.6546078935E12, 1.5], [1.654607916E12, 1.6666666666666667], [1.654607919E12, 1.4285714285714286], [1.6546078965E12, 1.5714285714285714], [1.654607922E12, 1.4545454545454544], [1.6546078995E12, 1.7333333333333334], [1.654607925E12, 1.4545454545454544], [1.6546079025E12, 1.7222222222222219], [1.6546079055E12, 1.8124999999999998], [1.654607928E12, 1.4], [1.654607883E12, 1.5], [1.6546079085E12, 1.833333333333333], [1.654607886E12, 1.4285714285714286], [1.6546079115E12, 1.9], [1.654607931E12, 1.0], [1.654607889E12, 1.5], [1.6546079145E12, 1.25], [1.654607934E12, 1.0], [1.654607892E12, 1.5]], "isOverall": false, "label": "parallel bzm - Parallel", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654607937E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 239.04000000000002, "minX": 1.0, "maxY": 24341.0, "series": [{"data": [[2.0, 293.4545454545455], [3.0, 298.45454545454544], [4.0, 298.25], [5.0, 310.0], [7.0, 487.0], [8.0, 356.0], [9.0, 343.5], [10.0, 422.3333333333333], [12.0, 502.0], [13.0, 436.3333333333333], [14.0, 453.5], [17.0, 573.6666666666666], [18.0, 460.0], [19.0, 407.5], [20.0, 393.0], [22.0, 539.0], [23.0, 593.0], [24.0, 498.3333333333333], [25.0, 490.0], [27.0, 578.3333333333334], [28.0, 535.0], [29.0, 528.6666666666666], [31.0, 606.5], [33.0, 631.6666666666666], [34.0, 498.0], [35.0, 522.0], [36.0, 494.0], [38.0, 733.0], [39.0, 705.0], [41.0, 650.6666666666666], [40.0, 675.0], [42.0, 543.0], [45.0, 660.6666666666666], [46.0, 604.0], [47.0, 586.0], [48.0, 524.0], [49.0, 652.5], [51.0, 714.0], [52.0, 666.0], [54.0, 682.0], [55.0, 748.0], [56.0, 694.0], [58.0, 847.0], [60.0, 1077.0], [61.0, 1001.0], [63.0, 937.5], [65.0, 1011.0], [66.0, 902.5], [67.0, 988.0], [68.0, 821.0], [69.0, 885.5], [71.0, 868.5], [72.0, 905.0], [74.0, 1017.5], [76.0, 970.0], [78.0, 1061.0], [79.0, 964.5], [82.0, 1262.0], [84.0, 1225.0], [85.0, 1258.0], [86.0, 1151.3333333333333], [90.0, 1304.0], [91.0, 1200.0], [89.0, 12521.75], [92.0, 6641.0], [94.0, 5051.666666666666], [95.0, 12439.0], [96.0, 9971.0], [97.0, 6862.5], [99.0, 11551.0], [98.0, 11888.0], [100.0, 6334.5], [102.0, 10705.5], [104.0, 6366.5], [107.0, 9717.0], [106.0, 10232.0], [110.0, 9497.5], [115.0, 7964.0], [113.0, 8691.333333333334], [118.0, 7194.0], [116.0, 7615.0], [120.0, 5889.8], [122.0, 6688.0], [121.0, 6455.0], [125.0, 5369.5], [1.0, 239.04000000000002]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[48.98604651162793, 2571.1860465116283]], "isOverall": false, "label": "/api/statistics/neighbourhoods-Aggregated", "isController": false}, {"data": [[2.0, 1880.0000000000002], [3.0, 504.9166666666667], [4.0, 8995.2], [5.0, 5925.5], [6.0, 21805.0], [7.0, 7946.333333333333], [8.0, 11571.0], [9.0, 11801.5], [10.0, 11992.5], [11.0, 11947.5], [12.0, 8559.333333333332], [13.0, 11891.5], [14.0, 12156.0], [15.0, 22353.0], [16.0, 22438.0], [17.0, 12413.0], [18.0, 12544.0], [19.0, 12623.5], [20.0, 22724.0], [21.0, 22502.0], [22.0, 22519.0], [23.0, 12846.5], [24.0, 12980.5], [25.0, 22563.0], [26.0, 22651.0], [27.0, 13176.0], [28.0, 13269.0], [29.0, 13359.5], [30.0, 14260.0], [33.0, 13682.5], [32.0, 22580.0], [35.0, 22495.0], [34.0, 22416.0], [36.0, 13705.0], [37.0, 22448.0], [39.0, 15006.5], [38.0, 22930.0], [41.0, 14416.0], [40.0, 21735.0], [43.0, 23314.0], [42.0, 22686.0], [45.0, 14333.0], [44.0, 22728.0], [47.0, 23557.5], [49.0, 14592.0], [48.0, 22444.0], [51.0, 23463.0], [50.0, 23331.0], [52.0, 14695.0], [53.0, 22259.0], [55.0, 14145.0], [54.0, 23915.0], [57.0, 24341.0], [56.0, 23553.0], [59.0, 12230.0], [58.0, 23085.0], [61.0, 22874.0], [60.0, 23684.0], [63.0, 15017.0], [62.0, 23252.0], [67.0, 22780.0], [66.0, 22090.0], [65.0, 22723.0], [64.0, 23362.0], [71.0, 15472.5], [70.0, 15598.5], [69.0, 23188.0], [68.0, 22077.0], [75.0, 23438.0], [74.0, 22377.0], [73.0, 22604.0], [72.0, 22717.0], [77.0, 15762.5], [79.0, 22807.0], [78.0, 23153.0], [76.0, 22951.0], [83.0, 22239.0], [82.0, 22034.0], [81.0, 22327.0], [80.0, 23375.0], [87.0, 21620.0], [86.0, 22030.0], [85.0, 22234.0], [84.0, 21725.0], [91.0, 15244.0], [90.0, 20604.0], [89.0, 22452.0], [88.0, 22036.0], [95.0, 19222.0], [94.0, 20068.0], [93.0, 21848.0], [92.0, 21105.0], [99.0, 20005.0], [98.0, 19747.0], [97.0, 20488.0], [96.0, 20686.0], [101.0, 15386.5], [103.0, 19144.0], [102.0, 19458.0], [100.0, 19982.0], [104.0, 14627.5], [105.0, 15262.0], [107.0, 18934.0], [106.0, 18882.0], [111.0, 17141.0], [110.0, 18393.0], [109.0, 18169.0], [108.0, 18398.0], [114.0, 13762.666666666666], [115.0, 17603.0], [113.0, 18424.0], [112.0, 18329.0], [119.0, 16219.0], [118.0, 16298.0], [117.0, 16282.0], [116.0, 16590.0], [121.0, 13262.25], [122.0, 15066.0], [120.0, 15947.0], [125.0, 14125.0], [124.0, 15284.0], [1.0, 1575.1176470588234]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}, {"data": [[46.720930232558125, 13658.883720930233]], "isOverall": false, "label": "/api/listings?geojson=true-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 125.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 96.0, "minX": 1.6546078815E12, "maxY": 1.1672509333333334E7, "series": [{"data": [[1.654607895E12, 2504916.0], [1.654607937E12, 416875.3333333333], [1.654607898E12, 2088498.6666666667], [1.6546079175E12, 1671623.3333333333], [1.654607901E12, 1254748.0], [1.6546079205E12, 1252458.0], [1.6546078815E12, 835124.6666666666], [1.654607904E12, 1255664.0], [1.6546079235E12, 2086208.6666666667], [1.6546078845E12, 1252000.0], [1.6546079265E12, 2922707.3333333335], [1.6546079295E12, 2918127.3333333335], [1.6546078875E12, 1669333.3333333333], [1.654607907E12, 1672081.3333333333], [1.6546079325E12, 7086880.666666667], [1.6546078905E12, 2087124.6666666667], [1.65460791E12, 421913.3333333333], [1.6546079355E12, 1.1672509333333334E7], [1.654607913E12, 1667959.3333333333], [1.6546078935E12, 3338666.6666666665], [1.654607916E12, 417791.3333333333], [1.654607919E12, 1668875.3333333333], [1.6546078965E12, 2504916.0], [1.654607922E12, 2503542.0], [1.6546078995E12, 1672539.3333333333], [1.654607925E12, 2503542.0], [1.6546079025E12, 2090330.6666666667], [1.6546079055E12, 1256580.0], [1.654607928E12, 2503084.0], [1.654607883E12, 834666.6666666666], [1.6546079085E12, 1257496.0], [1.654607886E12, 1668875.3333333333], [1.6546079115E12, 420997.3333333333], [1.654607931E12, 4168753.3333333335], [1.654607889E12, 2086666.6666666667], [1.6546079145E12, 1251084.0], [1.654607934E12, 8337506.666666667], [1.654607892E12, 2504000.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.654607895E12, 1365.3333333333333], [1.654607937E12, 96.0], [1.654607898E12, 1368.0], [1.6546079175E12, 1272.0], [1.654607901E12, 1176.0], [1.6546079205E12, 682.6666666666666], [1.6546078815E12, 488.0], [1.654607904E12, 1373.3333333333333], [1.6546079235E12, 874.6666666666666], [1.6546078845E12, 584.0], [1.6546079265E12, 1658.6666666666667], [1.6546079295E12, 672.0], [1.6546078875E12, 778.6666666666666], [1.654607907E12, 1370.6666666666667], [1.6546079325E12, 1632.0], [1.6546078905E12, 1072.0], [1.65460791E12, 1181.3333333333333], [1.6546079355E12, 2688.0], [1.654607913E12, 482.6666666666667], [1.6546078935E12, 1557.3333333333333], [1.654607916E12, 293.3333333333333], [1.654607919E12, 680.0], [1.6546078965E12, 1365.3333333333333], [1.654607922E12, 1069.3333333333333], [1.6546078995E12, 1469.3333333333333], [1.654607925E12, 1069.3333333333333], [1.6546079025E12, 1762.6666666666667], [1.6546079055E12, 1570.6666666666667], [1.654607928E12, 970.6666666666666], [1.654607883E12, 389.3333333333333], [1.6546079085E12, 1768.0], [1.654607886E12, 680.0], [1.6546079115E12, 984.0], [1.654607931E12, 960.0], [1.654607889E12, 973.3333333333334], [1.6546079145E12, 386.6666666666667], [1.654607934E12, 1920.0], [1.654607892E12, 1168.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654607937E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 195.0, "minX": 1.6546078815E12, "maxY": 23032.882352941175, "series": [{"data": [[1.654607895E12, 303.625], [1.654607898E12, 424.0], [1.6546079175E12, 6500.111111111112], [1.654607901E12, 480.55555555555554], [1.6546079205E12, 8509.5], [1.6546078815E12, 464.0], [1.654607904E12, 622.8181818181818], [1.6546079235E12, 10510.0], [1.6546078845E12, 200.0], [1.6546079265E12, 12286.699999999999], [1.6546078875E12, 195.0], [1.654607907E12, 859.7000000000002], [1.6546078905E12, 244.5], [1.65460791E12, 1136.7272727272725], [1.654607913E12, 2336.0], [1.6546078935E12, 294.125], [1.654607916E12, 5369.5], [1.654607919E12, 7334.333333333333], [1.6546078965E12, 378.875], [1.654607922E12, 9629.2], [1.6546078995E12, 483.3636363636363], [1.654607925E12, 11739.4], [1.6546079025E12, 574.0], [1.6546079055E12, 651.1538461538462], [1.654607928E12, 12786.25], [1.654607883E12, 209.0], [1.6546079085E12, 934.3333333333333], [1.654607886E12, 200.33333333333334], [1.6546079115E12, 1297.5555555555557], [1.654607889E12, 217.8], [1.6546079145E12, 3456.0], [1.654607892E12, 274.5]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.654607895E12, 577.1666666666666], [1.654607937E12, 21246.0], [1.654607898E12, 1665.4], [1.6546079175E12, 15196.75], [1.654607901E12, 3140.6666666666665], [1.6546079205E12, 16954.333333333332], [1.6546078815E12, 1144.5], [1.654607904E12, 5057.666666666667], [1.6546079235E12, 18784.4], [1.6546078845E12, 305.6666666666667], [1.6546079265E12, 20605.85714285714], [1.6546079295E12, 22679.714285714286], [1.6546078875E12, 361.25], [1.654607907E12, 7143.5], [1.6546079325E12, 23032.882352941175], [1.6546078905E12, 394.2], [1.65460791E12, 9780.0], [1.6546079355E12, 22233.71428571429], [1.654607913E12, 11858.75], [1.6546078935E12, 502.375], [1.654607916E12, 14125.0], [1.654607919E12, 16186.5], [1.6546078965E12, 929.0], [1.654607922E12, 18142.333333333336], [1.6546078995E12, 2266.75], [1.654607925E12, 19949.5], [1.6546079025E12, 3970.0], [1.6546079055E12, 5997.666666666667], [1.654607928E12, 22016.166666666668], [1.654607883E12, 407.0], [1.6546079085E12, 8295.333333333334], [1.654607886E12, 307.5], [1.6546079115E12, 10756.0], [1.654607931E12, 22809.000000000004], [1.654607889E12, 335.4], [1.6546079145E12, 12632.0], [1.654607934E12, 23003.2], [1.654607892E12, 418.1666666666667]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654607937E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 195.0, "minX": 1.6546078815E12, "maxY": 23030.529411764706, "series": [{"data": [[1.654607895E12, 303.625], [1.654607898E12, 424.0], [1.6546079175E12, 6500.111111111112], [1.654607901E12, 480.55555555555554], [1.6546079205E12, 8509.5], [1.6546078815E12, 463.0], [1.654607904E12, 622.8181818181818], [1.6546079235E12, 10510.0], [1.6546078845E12, 200.0], [1.6546079265E12, 12286.699999999999], [1.6546078875E12, 195.0], [1.654607907E12, 859.7000000000002], [1.6546078905E12, 244.5], [1.65460791E12, 1136.7272727272725], [1.654607913E12, 2336.0], [1.6546078935E12, 294.0], [1.654607916E12, 5369.5], [1.654607919E12, 7334.0], [1.6546078965E12, 378.875], [1.654607922E12, 9629.2], [1.6546078995E12, 483.2727272727273], [1.654607925E12, 11739.4], [1.6546079025E12, 574.0], [1.6546079055E12, 651.0769230769231], [1.654607928E12, 12786.25], [1.654607883E12, 209.0], [1.6546079085E12, 934.2666666666667], [1.654607886E12, 200.33333333333334], [1.6546079115E12, 1297.5555555555557], [1.654607889E12, 217.8], [1.6546079145E12, 3456.0], [1.654607892E12, 274.5]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.654607895E12, 575.6666666666666], [1.654607937E12, 21245.0], [1.654607898E12, 1664.0], [1.6546079175E12, 15193.75], [1.654607901E12, 3139.0], [1.6546079205E12, 16947.0], [1.6546078815E12, 1141.5], [1.654607904E12, 5056.0], [1.6546079235E12, 18782.6], [1.6546078845E12, 304.6666666666667], [1.6546079265E12, 20604.142857142855], [1.6546079295E12, 22678.285714285714], [1.6546078875E12, 359.75], [1.654607907E12, 7142.0], [1.6546079325E12, 23030.529411764706], [1.6546078905E12, 392.6], [1.65460791E12, 9779.0], [1.6546079355E12, 22232.285714285714], [1.654607913E12, 11852.25], [1.6546078935E12, 500.62499999999994], [1.654607916E12, 14101.0], [1.654607919E12, 16185.25], [1.6546078965E12, 927.1666666666666], [1.654607922E12, 18140.833333333332], [1.6546078995E12, 2265.0], [1.654607925E12, 19948.0], [1.6546079025E12, 3968.4], [1.6546079055E12, 5995.666666666667], [1.654607928E12, 22014.833333333332], [1.654607883E12, 405.5], [1.6546079085E12, 8293.666666666666], [1.654607886E12, 306.5], [1.6546079115E12, 10754.0], [1.654607931E12, 22807.399999999998], [1.654607889E12, 334.2], [1.6546079145E12, 12529.0], [1.654607934E12, 22998.349999999995], [1.654607892E12, 417.1666666666667]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654607937E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 5.666666666666667, "minX": 1.6546078815E12, "maxY": 1060.5, "series": [{"data": [[1.654607895E12, 16.25], [1.654607898E12, 17.11111111111111], [1.6546079175E12, 15.0], [1.654607901E12, 10.222222222222221], [1.6546079205E12, 37.25], [1.6546078815E12, 14.333333333333332], [1.654607904E12, 21.363636363636363], [1.6546079235E12, 58.25000000000001], [1.6546078845E12, 5.666666666666667], [1.6546079265E12, 607.6999999999999], [1.6546078875E12, 6.5], [1.654607907E12, 29.2], [1.6546078905E12, 8.666666666666666], [1.65460791E12, 12.454545454545453], [1.654607913E12, 10.0], [1.6546078935E12, 8.875], [1.654607916E12, 10.0], [1.654607919E12, 10.0], [1.6546078965E12, 34.25], [1.654607922E12, 19.0], [1.6546078995E12, 16.545454545454543], [1.654607925E12, 173.0], [1.6546079025E12, 14.615384615384615], [1.6546079055E12, 11.153846153846153], [1.654607928E12, 1060.5], [1.654607883E12, 6.0], [1.6546079085E12, 10.86666666666667], [1.654607886E12, 6.0], [1.6546079115E12, 43.0], [1.654607889E12, 22.2], [1.6546079145E12, 11.0], [1.654607892E12, 24.5]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.654607895E12, 18.833333333333332], [1.654607937E12, 853.0], [1.654607898E12, 49.4], [1.6546079175E12, 8.75], [1.654607901E12, 9.333333333333334], [1.6546079205E12, 12.333333333333334], [1.6546078815E12, 19.0], [1.654607904E12, 9.0], [1.6546079235E12, 9.4], [1.6546078845E12, 6.0], [1.6546079265E12, 9.714285714285715], [1.6546079295E12, 35.99999999999999], [1.6546078875E12, 6.25], [1.654607907E12, 28.25], [1.6546079325E12, 27.235294117647058], [1.6546078905E12, 9.6], [1.65460791E12, 9.0], [1.6546079355E12, 381.14285714285717], [1.654607913E12, 11.25], [1.6546078935E12, 11.625], [1.654607916E12, 72.0], [1.654607919E12, 10.75], [1.6546078965E12, 9.166666666666666], [1.654607922E12, 29.666666666666664], [1.6546078995E12, 14.0], [1.654607925E12, 17.333333333333332], [1.6546079025E12, 19.8], [1.6546079055E12, 9.333333333333334], [1.654607928E12, 10.0], [1.654607883E12, 6.0], [1.6546079085E12, 10.0], [1.654607886E12, 5.75], [1.6546079115E12, 11.0], [1.654607931E12, 13.2], [1.654607889E12, 22.2], [1.6546079145E12, 9.666666666666666], [1.654607934E12, 16.8], [1.654607892E12, 21.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654607937E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 181.0, "minX": 1.6546078815E12, "maxY": 24905.0, "series": [{"data": [[1.654607895E12, 647.0], [1.654607937E12, 21246.0], [1.654607898E12, 1881.0], [1.6546079175E12, 15409.0], [1.654607901E12, 3416.0], [1.6546079205E12, 17603.0], [1.6546078815E12, 1558.0], [1.654607904E12, 5322.0], [1.6546079235E12, 19144.0], [1.6546078845E12, 308.0], [1.6546079265E12, 21848.0], [1.6546079295E12, 23375.0], [1.6546078875E12, 529.0], [1.654607907E12, 7467.0], [1.6546079325E12, 24341.0], [1.6546078905E12, 468.0], [1.65460791E12, 9780.0], [1.6546079355E12, 22825.0], [1.654607913E12, 12557.0], [1.6546078935E12, 555.0], [1.654607916E12, 14125.0], [1.654607919E12, 16298.0], [1.6546078965E12, 1270.0], [1.654607922E12, 18424.0], [1.6546078995E12, 2633.0], [1.654607925E12, 20488.0], [1.6546079025E12, 4424.0], [1.6546079055E12, 6203.0], [1.654607928E12, 22452.0], [1.654607883E12, 509.0], [1.6546079085E12, 8702.0], [1.654607886E12, 313.0], [1.6546079115E12, 10756.0], [1.654607931E12, 23438.0], [1.654607889E12, 436.0], [1.6546079145E12, 12839.0], [1.654607934E12, 24905.0], [1.654607892E12, 475.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.654607895E12, 640.0], [1.654607937E12, 21246.0], [1.654607898E12, 1845.0], [1.6546079175E12, 15309.0], [1.654607901E12, 3358.1000000000004], [1.6546079205E12, 17603.0], [1.6546078815E12, 1558.0], [1.654607904E12, 5215.0], [1.6546079235E12, 19144.0], [1.6546078845E12, 308.0], [1.6546079265E12, 21253.6], [1.6546079295E12, 23375.0], [1.6546078875E12, 529.0], [1.654607907E12, 7418.5], [1.6546079325E12, 24000.2], [1.6546078905E12, 458.8], [1.65460791E12, 7253.700000000009], [1.6546079355E12, 22726.6], [1.654607913E12, 12557.0], [1.6546078935E12, 543.8], [1.654607916E12, 14125.0], [1.654607919E12, 16298.0], [1.6546078965E12, 1183.0], [1.654607922E12, 18418.8], [1.6546078995E12, 2520.2000000000003], [1.654607925E12, 20393.8], [1.6546079025E12, 4051.4000000000005], [1.6546079055E12, 6160.3], [1.654607928E12, 22430.2], [1.654607883E12, 509.0], [1.6546079085E12, 8216.900000000001], [1.654607886E12, 313.0], [1.6546079115E12, 9857.700000000004], [1.654607931E12, 23413.0], [1.654607889E12, 424.90000000000003], [1.6546079145E12, 12839.0], [1.654607934E12, 24429.300000000003], [1.654607892E12, 473.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.654607895E12, 647.0], [1.654607937E12, 21246.0], [1.654607898E12, 1881.0], [1.6546079175E12, 15409.0], [1.654607901E12, 3416.0], [1.6546079205E12, 17603.0], [1.6546078815E12, 1558.0], [1.654607904E12, 5322.0], [1.6546079235E12, 19144.0], [1.6546078845E12, 308.0], [1.6546079265E12, 21848.0], [1.6546079295E12, 23375.0], [1.6546078875E12, 529.0], [1.654607907E12, 7467.0], [1.6546079325E12, 24341.0], [1.6546078905E12, 468.0], [1.65460791E12, 9780.0], [1.6546079355E12, 22825.0], [1.654607913E12, 12557.0], [1.6546078935E12, 555.0], [1.654607916E12, 14125.0], [1.654607919E12, 16298.0], [1.6546078965E12, 1270.0], [1.654607922E12, 18424.0], [1.6546078995E12, 2633.0], [1.654607925E12, 20488.0], [1.6546079025E12, 4424.0], [1.6546079055E12, 6203.0], [1.654607928E12, 22452.0], [1.654607883E12, 509.0], [1.6546079085E12, 8702.0], [1.654607886E12, 313.0], [1.6546079115E12, 10756.0], [1.654607931E12, 23438.0], [1.654607889E12, 436.0], [1.6546079145E12, 12839.0], [1.654607934E12, 24905.0], [1.654607892E12, 475.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.654607895E12, 647.0], [1.654607937E12, 21246.0], [1.654607898E12, 1881.0], [1.6546079175E12, 15409.0], [1.654607901E12, 3416.0], [1.6546079205E12, 17603.0], [1.6546078815E12, 1558.0], [1.654607904E12, 5322.0], [1.6546079235E12, 19144.0], [1.6546078845E12, 308.0], [1.6546079265E12, 21848.0], [1.6546079295E12, 23375.0], [1.6546078875E12, 529.0], [1.654607907E12, 7467.0], [1.6546079325E12, 24341.0], [1.6546078905E12, 468.0], [1.65460791E12, 9780.0], [1.6546079355E12, 22791.25], [1.654607913E12, 12557.0], [1.6546078935E12, 555.0], [1.654607916E12, 14125.0], [1.654607919E12, 16298.0], [1.6546078965E12, 1270.0], [1.654607922E12, 18424.0], [1.6546078995E12, 2633.0], [1.654607925E12, 20488.0], [1.6546079025E12, 4424.0], [1.6546079055E12, 6203.0], [1.654607928E12, 22452.0], [1.654607883E12, 509.0], [1.6546079085E12, 8702.0], [1.654607886E12, 313.0], [1.6546079115E12, 10756.0], [1.654607931E12, 23438.0], [1.654607889E12, 436.0], [1.6546079145E12, 12839.0], [1.654607934E12, 24885.25], [1.654607892E12, 475.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.654607895E12, 269.0], [1.654607937E12, 21246.0], [1.654607898E12, 333.0], [1.6546079175E12, 6309.0], [1.654607901E12, 393.0], [1.6546079205E12, 7964.0], [1.6546078815E12, 184.0], [1.654607904E12, 445.0], [1.6546079235E12, 10232.0], [1.6546078845E12, 198.0], [1.6546079265E12, 12046.0], [1.6546079295E12, 22034.0], [1.6546078875E12, 188.0], [1.654607907E12, 640.0], [1.6546079325E12, 21679.0], [1.6546078905E12, 213.0], [1.65460791E12, 854.0], [1.6546079355E12, 21349.0], [1.654607913E12, 2336.0], [1.6546078935E12, 275.0], [1.654607916E12, 5316.0], [1.654607919E12, 7132.0], [1.6546078965E12, 293.0], [1.654607922E12, 9473.0], [1.6546078995E12, 388.0], [1.654607925E12, 11255.0], [1.6546079025E12, 427.0], [1.6546079055E12, 524.0], [1.654607928E12, 12622.0], [1.654607883E12, 203.0], [1.6546079085E12, 812.0], [1.654607886E12, 194.0], [1.6546079115E12, 850.0], [1.654607931E12, 22077.0], [1.654607889E12, 181.0], [1.6546079145E12, 3456.0], [1.654607934E12, 21735.0], [1.654607892E12, 223.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.654607895E12, 358.0], [1.654607937E12, 21246.0], [1.654607898E12, 512.0], [1.6546079175E12, 6682.0], [1.654607901E12, 514.5], [1.6546079205E12, 8760.0], [1.6546078815E12, 731.0], [1.654607904E12, 690.0], [1.6546079235E12, 18213.0], [1.6546078845E12, 253.0], [1.6546079265E12, 12439.0], [1.6546079295E12, 22807.0], [1.6546078875E12, 254.5], [1.654607907E12, 974.0], [1.6546079325E12, 23187.0], [1.6546078905E12, 322.0], [1.65460791E12, 1179.5], [1.6546079355E12, 22406.5], [1.654607913E12, 11775.0], [1.6546078935E12, 400.5], [1.654607916E12, 5423.0], [1.654607919E12, 15947.0], [1.6546078965E12, 541.5], [1.654607922E12, 17141.0], [1.6546078995E12, 518.0], [1.654607925E12, 19458.0], [1.6546079025E12, 639.5], [1.6546079055E12, 680.5], [1.654607928E12, 21672.5], [1.654607883E12, 260.0], [1.6546079085E12, 930.5], [1.654607886E12, 304.0], [1.6546079115E12, 1387.5], [1.654607931E12, 22852.0], [1.654607889E12, 299.0], [1.6546079145E12, 12528.5], [1.654607934E12, 22908.0], [1.654607892E12, 344.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654607937E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 339.0, "minX": 1.0, "maxY": 22233.0, "series": [{"data": [[2.0, 356.0], [8.0, 682.5], [9.0, 575.0], [10.0, 2081.0], [11.0, 11225.0], [12.0, 1053.5], [3.0, 11918.0], [13.0, 6682.0], [1.0, 11105.5], [4.0, 522.0], [5.0, 10801.0], [23.0, 22233.0], [6.0, 10743.5], [7.0, 339.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 23.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 339.0, "minX": 1.0, "maxY": 22232.0, "series": [{"data": [[2.0, 355.5], [8.0, 682.5], [9.0, 574.0], [10.0, 2080.5], [11.0, 11223.0], [12.0, 1053.5], [3.0, 11909.5], [13.0, 6682.0], [1.0, 11104.0], [4.0, 521.0], [5.0, 10801.0], [23.0, 22232.0], [6.0, 10743.5], [7.0, 339.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 23.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.65460788E12, "maxY": 20.0, "series": [{"data": [[1.654607895E12, 10.666666666666666], [1.6546078935E12, 9.333333333333334], [1.654607898E12, 13.333333333333334], [1.6546078965E12, 12.0], [1.65460788E12, 1.3333333333333333], [1.654607901E12, 14.666666666666666], [1.6546078995E12, 14.666666666666666], [1.6546078815E12, 2.6666666666666665], [1.654607904E12, 16.0], [1.6546079025E12, 16.0], [1.6546078845E12, 4.0], [1.6546079055E12, 18.666666666666668], [1.654607883E12, 2.6666666666666665], [1.6546079085E12, 20.0], [1.6546078875E12, 5.333333333333333], [1.654607886E12, 5.333333333333333], [1.654607907E12, 18.666666666666668], [1.6546078905E12, 8.0], [1.6546079115E12, 20.0], [1.65460791E12, 20.0], [1.654607889E12, 6.666666666666667], [1.6546079145E12, 17.333333333333332], [1.654607892E12, 9.333333333333334], [1.654607913E12, 20.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6546079145E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.6546078815E12, "maxY": 18.666666666666668, "series": [{"data": [[1.654607895E12, 9.333333333333334], [1.654607937E12, 0.6666666666666666], [1.654607898E12, 9.333333333333334], [1.6546079175E12, 8.666666666666666], [1.654607901E12, 8.0], [1.6546079205E12, 4.666666666666667], [1.6546078815E12, 3.3333333333333335], [1.654607904E12, 9.333333333333334], [1.6546079235E12, 6.0], [1.6546078845E12, 4.0], [1.6546079265E12, 11.333333333333334], [1.6546079295E12, 4.666666666666667], [1.6546078875E12, 5.333333333333333], [1.654607907E12, 9.333333333333334], [1.6546079325E12, 11.333333333333334], [1.6546078905E12, 7.333333333333333], [1.65460791E12, 8.0], [1.6546079355E12, 18.666666666666668], [1.654607913E12, 3.3333333333333335], [1.6546078935E12, 10.666666666666666], [1.654607916E12, 2.0], [1.654607919E12, 4.666666666666667], [1.6546078965E12, 9.333333333333334], [1.654607922E12, 7.333333333333333], [1.6546078995E12, 10.0], [1.654607925E12, 7.333333333333333], [1.6546079025E12, 12.0], [1.6546079055E12, 10.666666666666666], [1.654607928E12, 6.666666666666667], [1.654607883E12, 2.6666666666666665], [1.6546079085E12, 12.0], [1.654607886E12, 4.666666666666667], [1.6546079115E12, 6.666666666666667], [1.654607931E12, 6.666666666666667], [1.654607889E12, 6.666666666666667], [1.6546079145E12, 2.6666666666666665], [1.654607934E12, 13.333333333333334], [1.654607892E12, 8.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654607937E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.6546078815E12, "maxY": 18.666666666666668, "series": [{"data": [[1.654607895E12, 5.333333333333333], [1.654607898E12, 6.0], [1.6546079175E12, 6.0], [1.654607901E12, 6.0], [1.6546079205E12, 2.6666666666666665], [1.6546078815E12, 2.0], [1.654607904E12, 7.333333333333333], [1.6546079235E12, 2.6666666666666665], [1.6546078845E12, 2.0], [1.6546079265E12, 6.666666666666667], [1.6546078875E12, 2.6666666666666665], [1.654607907E12, 6.666666666666667], [1.6546078905E12, 4.0], [1.65460791E12, 7.333333333333333], [1.654607913E12, 0.6666666666666666], [1.6546078935E12, 5.333333333333333], [1.654607916E12, 1.3333333333333333], [1.654607919E12, 2.0], [1.6546078965E12, 5.333333333333333], [1.654607922E12, 3.3333333333333335], [1.6546078995E12, 7.333333333333333], [1.654607925E12, 3.3333333333333335], [1.6546079025E12, 8.666666666666666], [1.6546079055E12, 8.666666666666666], [1.654607928E12, 2.6666666666666665], [1.654607883E12, 1.3333333333333333], [1.6546079085E12, 10.0], [1.654607886E12, 2.0], [1.6546079115E12, 6.0], [1.654607889E12, 3.3333333333333335], [1.6546079145E12, 0.6666666666666666], [1.654607892E12, 4.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods-success", "isController": false}, {"data": [[1.654607895E12, 4.0], [1.654607937E12, 0.6666666666666666], [1.654607898E12, 3.3333333333333335], [1.6546079175E12, 2.6666666666666665], [1.654607901E12, 2.0], [1.6546079205E12, 2.0], [1.6546078815E12, 1.3333333333333333], [1.654607904E12, 2.0], [1.6546079235E12, 3.3333333333333335], [1.6546078845E12, 2.0], [1.6546079265E12, 4.666666666666667], [1.6546079295E12, 4.666666666666667], [1.6546078875E12, 2.6666666666666665], [1.654607907E12, 2.6666666666666665], [1.6546079325E12, 11.333333333333334], [1.6546078905E12, 3.3333333333333335], [1.65460791E12, 0.6666666666666666], [1.6546079355E12, 18.666666666666668], [1.654607913E12, 2.6666666666666665], [1.6546078935E12, 5.333333333333333], [1.654607916E12, 0.6666666666666666], [1.654607919E12, 2.6666666666666665], [1.6546078965E12, 4.0], [1.654607922E12, 4.0], [1.6546078995E12, 2.6666666666666665], [1.654607925E12, 4.0], [1.6546079025E12, 3.3333333333333335], [1.6546079055E12, 2.0], [1.654607928E12, 4.0], [1.654607883E12, 1.3333333333333333], [1.6546079085E12, 2.0], [1.654607886E12, 2.6666666666666665], [1.6546079115E12, 0.6666666666666666], [1.654607931E12, 6.666666666666667], [1.654607889E12, 3.3333333333333335], [1.6546079145E12, 2.0], [1.654607934E12, 13.333333333333334], [1.654607892E12, 4.0]], "isOverall": false, "label": "/api/listings?geojson=true-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654607937E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.6546078815E12, "maxY": 18.666666666666668, "series": [{"data": [[1.654607895E12, 9.333333333333334], [1.654607937E12, 0.6666666666666666], [1.654607898E12, 9.333333333333334], [1.6546079175E12, 8.666666666666666], [1.654607901E12, 8.0], [1.6546079205E12, 4.666666666666667], [1.6546078815E12, 3.3333333333333335], [1.654607904E12, 9.333333333333334], [1.6546079235E12, 6.0], [1.6546078845E12, 4.0], [1.6546079265E12, 11.333333333333334], [1.6546079295E12, 4.666666666666667], [1.6546078875E12, 5.333333333333333], [1.654607907E12, 9.333333333333334], [1.6546079325E12, 11.333333333333334], [1.6546078905E12, 7.333333333333333], [1.65460791E12, 8.0], [1.6546079355E12, 18.666666666666668], [1.654607913E12, 3.3333333333333335], [1.6546078935E12, 10.666666666666666], [1.654607916E12, 2.0], [1.654607919E12, 4.666666666666667], [1.6546078965E12, 9.333333333333334], [1.654607922E12, 7.333333333333333], [1.6546078995E12, 10.0], [1.654607925E12, 7.333333333333333], [1.6546079025E12, 12.0], [1.6546079055E12, 10.666666666666666], [1.654607928E12, 6.666666666666667], [1.654607883E12, 2.6666666666666665], [1.6546079085E12, 12.0], [1.654607886E12, 4.666666666666667], [1.6546079115E12, 6.666666666666667], [1.654607931E12, 6.666666666666667], [1.654607889E12, 6.666666666666667], [1.6546079145E12, 2.6666666666666665], [1.654607934E12, 13.333333333333334], [1.654607892E12, 8.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.654607937E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

