/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 95.0, "minX": 0.0, "maxY": 25298.0, "series": [{"data": [[0.0, 95.0], [0.1, 95.0], [0.2, 95.0], [0.3, 106.0], [0.4, 106.0], [0.5, 107.0], [0.6, 107.0], [0.7, 107.0], [0.8, 107.0], [0.9, 107.0], [1.0, 107.0], [1.1, 107.0], [1.2, 107.0], [1.3, 107.0], [1.4, 108.0], [1.5, 108.0], [1.6, 108.0], [1.7, 108.0], [1.8, 108.0], [1.9, 108.0], [2.0, 108.0], [2.1, 108.0], [2.2, 108.0], [2.3, 108.0], [2.4, 109.0], [2.5, 109.0], [2.6, 109.0], [2.7, 109.0], [2.8, 109.0], [2.9, 109.0], [3.0, 109.0], [3.1, 109.0], [3.2, 109.0], [3.3, 109.0], [3.4, 109.0], [3.5, 109.0], [3.6, 109.0], [3.7, 109.0], [3.8, 109.0], [3.9, 109.0], [4.0, 109.0], [4.1, 109.0], [4.2, 110.0], [4.3, 110.0], [4.4, 110.0], [4.5, 110.0], [4.6, 110.0], [4.7, 110.0], [4.8, 110.0], [4.9, 110.0], [5.0, 110.0], [5.1, 110.0], [5.2, 110.0], [5.3, 110.0], [5.4, 110.0], [5.5, 110.0], [5.6, 110.0], [5.7, 110.0], [5.8, 110.0], [5.9, 110.0], [6.0, 110.0], [6.1, 111.0], [6.2, 111.0], [6.3, 111.0], [6.4, 111.0], [6.5, 111.0], [6.6, 111.0], [6.7, 111.0], [6.8, 111.0], [6.9, 111.0], [7.0, 111.0], [7.1, 111.0], [7.2, 111.0], [7.3, 111.0], [7.4, 111.0], [7.5, 112.0], [7.6, 112.0], [7.7, 112.0], [7.8, 112.0], [7.9, 112.0], [8.0, 112.0], [8.1, 112.0], [8.2, 112.0], [8.3, 112.0], [8.4, 112.0], [8.5, 112.0], [8.6, 112.0], [8.7, 112.0], [8.8, 112.0], [8.9, 112.0], [9.0, 112.0], [9.1, 112.0], [9.2, 112.0], [9.3, 112.0], [9.4, 112.0], [9.5, 112.0], [9.6, 112.0], [9.7, 112.0], [9.8, 112.0], [9.9, 112.0], [10.0, 113.0], [10.1, 113.0], [10.2, 113.0], [10.3, 113.0], [10.4, 113.0], [10.5, 113.0], [10.6, 113.0], [10.7, 113.0], [10.8, 113.0], [10.9, 113.0], [11.0, 113.0], [11.1, 113.0], [11.2, 113.0], [11.3, 113.0], [11.4, 114.0], [11.5, 114.0], [11.6, 114.0], [11.7, 114.0], [11.8, 114.0], [11.9, 114.0], [12.0, 114.0], [12.1, 115.0], [12.2, 115.0], [12.3, 115.0], [12.4, 115.0], [12.5, 115.0], [12.6, 115.0], [12.7, 115.0], [12.8, 116.0], [12.9, 116.0], [13.0, 116.0], [13.1, 117.0], [13.2, 117.0], [13.3, 118.0], [13.4, 118.0], [13.5, 122.0], [13.6, 122.0], [13.7, 122.0], [13.8, 199.0], [13.9, 199.0], [14.0, 202.0], [14.1, 202.0], [14.2, 205.0], [14.3, 205.0], [14.4, 205.0], [14.5, 207.0], [14.6, 207.0], [14.7, 207.0], [14.8, 207.0], [14.9, 209.0], [15.0, 209.0], [15.1, 209.0], [15.2, 210.0], [15.3, 210.0], [15.4, 212.0], [15.5, 212.0], [15.6, 291.0], [15.7, 291.0], [15.8, 291.0], [15.9, 295.0], [16.0, 295.0], [16.1, 300.0], [16.2, 300.0], [16.3, 300.0], [16.4, 300.0], [16.5, 300.0], [16.6, 301.0], [16.7, 301.0], [16.8, 304.0], [16.9, 304.0], [17.0, 304.0], [17.1, 304.0], [17.2, 304.0], [17.3, 306.0], [17.4, 306.0], [17.5, 307.0], [17.6, 307.0], [17.7, 308.0], [17.8, 308.0], [17.9, 308.0], [18.0, 344.0], [18.1, 344.0], [18.2, 394.0], [18.3, 394.0], [18.4, 394.0], [18.5, 394.0], [18.6, 394.0], [18.7, 395.0], [18.8, 395.0], [18.9, 398.0], [19.0, 398.0], [19.1, 407.0], [19.2, 407.0], [19.3, 407.0], [19.4, 492.0], [19.5, 492.0], [19.6, 494.0], [19.7, 494.0], [19.8, 853.0], [19.9, 853.0], [20.0, 853.0], [20.1, 1357.0], [20.2, 1357.0], [20.3, 5010.0], [20.4, 5010.0], [20.5, 5031.0], [20.6, 5031.0], [20.7, 5032.0], [20.8, 5032.0], [20.9, 5032.0], [21.0, 5034.0], [21.1, 5034.0], [21.2, 5035.0], [21.3, 5035.0], [21.4, 5050.0], [21.5, 5050.0], [21.6, 5050.0], [21.7, 5052.0], [21.8, 5052.0], [21.9, 5081.0], [22.0, 5081.0], [22.1, 5082.0], [22.2, 5082.0], [22.3, 5082.0], [22.4, 5101.0], [22.5, 5101.0], [22.6, 5103.0], [22.7, 5103.0], [22.8, 5127.0], [22.9, 5127.0], [23.0, 5127.0], [23.1, 5130.0], [23.2, 5130.0], [23.3, 5139.0], [23.4, 5139.0], [23.5, 5147.0], [23.6, 5147.0], [23.7, 5147.0], [23.8, 5148.0], [23.9, 5148.0], [24.0, 5163.0], [24.1, 5163.0], [24.2, 5188.0], [24.3, 5188.0], [24.4, 5188.0], [24.5, 5195.0], [24.6, 5195.0], [24.7, 5198.0], [24.8, 5198.0], [24.9, 5204.0], [25.0, 5204.0], [25.1, 5204.0], [25.2, 5205.0], [25.3, 5205.0], [25.4, 5208.0], [25.5, 5208.0], [25.6, 5208.0], [25.7, 5208.0], [25.8, 5208.0], [25.9, 5230.0], [26.0, 5230.0], [26.1, 5248.0], [26.2, 5248.0], [26.3, 5255.0], [26.4, 5255.0], [26.5, 5255.0], [26.6, 5263.0], [26.7, 5263.0], [26.8, 5275.0], [26.9, 5275.0], [27.0, 5287.0], [27.1, 5287.0], [27.2, 5287.0], [27.3, 5294.0], [27.4, 5294.0], [27.5, 5307.0], [27.6, 5307.0], [27.7, 5315.0], [27.8, 5315.0], [27.9, 5315.0], [28.0, 5326.0], [28.1, 5326.0], [28.2, 5332.0], [28.3, 5332.0], [28.4, 5336.0], [28.5, 5336.0], [28.6, 5336.0], [28.7, 5349.0], [28.8, 5349.0], [28.9, 5352.0], [29.0, 5352.0], [29.1, 5361.0], [29.2, 5361.0], [29.3, 5361.0], [29.4, 5362.0], [29.5, 5362.0], [29.6, 5368.0], [29.7, 5368.0], [29.8, 5393.0], [29.9, 5393.0], [30.0, 5393.0], [30.1, 5395.0], [30.2, 5395.0], [30.3, 5403.0], [30.4, 5403.0], [30.5, 5405.0], [30.6, 5405.0], [30.7, 5409.0], [30.8, 5409.0], [30.9, 5409.0], [31.0, 5422.0], [31.1, 5422.0], [31.2, 5439.0], [31.3, 5439.0], [31.4, 5445.0], [31.5, 5445.0], [31.6, 5445.0], [31.7, 5450.0], [31.8, 5450.0], [31.9, 5450.0], [32.0, 5450.0], [32.1, 5455.0], [32.2, 5455.0], [32.3, 5455.0], [32.4, 5469.0], [32.5, 5469.0], [32.6, 5475.0], [32.7, 5475.0], [32.8, 5476.0], [32.9, 5476.0], [33.0, 5476.0], [33.1, 5487.0], [33.2, 5487.0], [33.3, 5492.0], [33.4, 5492.0], [33.5, 5498.0], [33.6, 5498.0], [33.7, 5498.0], [33.8, 5515.0], [33.9, 5515.0], [34.0, 5521.0], [34.1, 5521.0], [34.2, 5537.0], [34.3, 5537.0], [34.4, 5537.0], [34.5, 5537.0], [34.6, 5537.0], [34.7, 5544.0], [34.8, 5544.0], [34.9, 5558.0], [35.0, 5558.0], [35.1, 5558.0], [35.2, 5565.0], [35.3, 5565.0], [35.4, 5578.0], [35.5, 5578.0], [35.6, 5586.0], [35.7, 5586.0], [35.8, 5586.0], [35.9, 5589.0], [36.0, 5589.0], [36.1, 5600.0], [36.2, 5600.0], [36.3, 5625.0], [36.4, 5625.0], [36.5, 5625.0], [36.6, 5633.0], [36.7, 5633.0], [36.8, 5633.0], [36.9, 5633.0], [37.0, 5637.0], [37.1, 5637.0], [37.2, 5637.0], [37.3, 5645.0], [37.4, 5645.0], [37.5, 5672.0], [37.6, 5672.0], [37.7, 5672.0], [37.8, 5672.0], [37.9, 5672.0], [38.0, 5677.0], [38.1, 5677.0], [38.2, 5681.0], [38.3, 5681.0], [38.4, 5689.0], [38.5, 5689.0], [38.6, 5689.0], [38.7, 5711.0], [38.8, 5711.0], [38.9, 5718.0], [39.0, 5718.0], [39.1, 5719.0], [39.2, 5719.0], [39.3, 5719.0], [39.4, 5722.0], [39.5, 5722.0], [39.6, 5736.0], [39.7, 5736.0], [39.8, 5764.0], [39.9, 5764.0], [40.0, 5765.0], [40.1, 5765.0], [40.2, 5765.0], [40.3, 5766.0], [40.4, 5766.0], [40.5, 5770.0], [40.6, 5770.0], [40.7, 5804.0], [40.8, 5804.0], [40.9, 5804.0], [41.0, 5809.0], [41.1, 5809.0], [41.2, 5811.0], [41.3, 5811.0], [41.4, 5818.0], [41.5, 5818.0], [41.6, 5818.0], [41.7, 5818.0], [41.8, 5818.0], [41.9, 5840.0], [42.0, 5840.0], [42.1, 5855.0], [42.2, 5855.0], [42.3, 5855.0], [42.4, 5858.0], [42.5, 5858.0], [42.6, 5866.0], [42.7, 5866.0], [42.8, 5871.0], [42.9, 5871.0], [43.0, 5871.0], [43.1, 5876.0], [43.2, 5876.0], [43.3, 5907.0], [43.4, 5907.0], [43.5, 5910.0], [43.6, 5910.0], [43.7, 5910.0], [43.8, 5914.0], [43.9, 5914.0], [44.0, 5915.0], [44.1, 5915.0], [44.2, 5928.0], [44.3, 5928.0], [44.4, 5928.0], [44.5, 5950.0], [44.6, 5950.0], [44.7, 5960.0], [44.8, 5960.0], [44.9, 5971.0], [45.0, 5971.0], [45.1, 5971.0], [45.2, 5972.0], [45.3, 5972.0], [45.4, 8554.0], [45.5, 8554.0], [45.6, 8617.0], [45.7, 8617.0], [45.8, 8617.0], [45.9, 8666.0], [46.0, 8666.0], [46.1, 8705.0], [46.2, 8705.0], [46.3, 8764.0], [46.4, 8764.0], [46.5, 8764.0], [46.6, 8813.0], [46.7, 8813.0], [46.8, 8937.0], [46.9, 8937.0], [47.0, 8955.0], [47.1, 8955.0], [47.2, 8955.0], [47.3, 9002.0], [47.4, 9002.0], [47.5, 9050.0], [47.6, 9050.0], [47.7, 9091.0], [47.8, 9091.0], [47.9, 9091.0], [48.0, 9137.0], [48.1, 9137.0], [48.2, 9194.0], [48.3, 9194.0], [48.4, 9232.0], [48.5, 9232.0], [48.6, 9232.0], [48.7, 9276.0], [48.8, 9276.0], [48.9, 9320.0], [49.0, 9320.0], [49.1, 9322.0], [49.2, 9322.0], [49.3, 9322.0], [49.4, 9375.0], [49.5, 9375.0], [49.6, 9380.0], [49.7, 9380.0], [49.8, 9431.0], [49.9, 9431.0], [50.0, 9450.0], [50.1, 9450.0], [50.2, 9450.0], [50.3, 9465.0], [50.4, 9465.0], [50.5, 9517.0], [50.6, 9517.0], [50.7, 9545.0], [50.8, 9545.0], [50.9, 9545.0], [51.0, 9561.0], [51.1, 9561.0], [51.2, 9605.0], [51.3, 9605.0], [51.4, 9658.0], [51.5, 9658.0], [51.6, 9658.0], [51.7, 9690.0], [51.8, 9690.0], [51.9, 9752.0], [52.0, 9752.0], [52.1, 9755.0], [52.2, 9755.0], [52.3, 9755.0], [52.4, 9791.0], [52.5, 9791.0], [52.6, 9807.0], [52.7, 9807.0], [52.8, 9832.0], [52.9, 9832.0], [53.0, 9832.0], [53.1, 9864.0], [53.2, 9864.0], [53.3, 9908.0], [53.4, 9908.0], [53.5, 9954.0], [53.6, 9954.0], [53.7, 9954.0], [53.8, 9974.0], [53.9, 9974.0], [54.0, 10031.0], [54.1, 10031.0], [54.2, 10085.0], [54.3, 10085.0], [54.4, 10085.0], [54.5, 10113.0], [54.6, 10113.0], [54.7, 10122.0], [54.8, 10122.0], [54.9, 10154.0], [55.0, 10154.0], [55.1, 10154.0], [55.2, 10208.0], [55.3, 10208.0], [55.4, 10242.0], [55.5, 10242.0], [55.6, 10243.0], [55.7, 10243.0], [55.8, 10243.0], [55.9, 10314.0], [56.0, 10314.0], [56.1, 10359.0], [56.2, 10359.0], [56.3, 10394.0], [56.4, 10394.0], [56.5, 10394.0], [56.6, 10441.0], [56.7, 10441.0], [56.8, 10478.0], [56.9, 10478.0], [57.0, 10513.0], [57.1, 10513.0], [57.2, 10513.0], [57.3, 10566.0], [57.4, 10566.0], [57.5, 10570.0], [57.6, 10570.0], [57.7, 10613.0], [57.8, 10613.0], [57.9, 10613.0], [58.0, 10657.0], [58.1, 10657.0], [58.2, 10661.0], [58.3, 10661.0], [58.4, 10681.0], [58.5, 10681.0], [58.6, 10681.0], [58.7, 10740.0], [58.8, 10740.0], [58.9, 10783.0], [59.0, 10783.0], [59.1, 10791.0], [59.2, 10791.0], [59.3, 10791.0], [59.4, 10826.0], [59.5, 10826.0], [59.6, 10838.0], [59.7, 10838.0], [59.8, 10871.0], [59.9, 10871.0], [60.0, 10881.0], [60.1, 10881.0], [60.2, 10881.0], [60.3, 10915.0], [60.4, 10915.0], [60.5, 10956.0], [60.6, 10956.0], [60.7, 10957.0], [60.8, 10957.0], [60.9, 10957.0], [61.0, 11403.0], [61.1, 11403.0], [61.2, 11463.0], [61.3, 11463.0], [61.4, 11509.0], [61.5, 11509.0], [61.6, 11509.0], [61.7, 11536.0], [61.8, 11536.0], [61.9, 11545.0], [62.0, 11545.0], [62.1, 11596.0], [62.2, 11596.0], [62.3, 11596.0], [62.4, 11610.0], [62.5, 11610.0], [62.6, 11650.0], [62.7, 11650.0], [62.8, 12014.0], [62.9, 12014.0], [63.0, 12014.0], [63.1, 12060.0], [63.2, 12060.0], [63.3, 12093.0], [63.4, 12093.0], [63.5, 12142.0], [63.6, 12142.0], [63.7, 12142.0], [63.8, 12179.0], [63.9, 12179.0], [64.0, 12249.0], [64.1, 12249.0], [64.2, 12280.0], [64.3, 12280.0], [64.4, 12280.0], [64.5, 12286.0], [64.6, 12286.0], [64.7, 12340.0], [64.8, 12340.0], [64.9, 12342.0], [65.0, 12342.0], [65.1, 12342.0], [65.2, 12403.0], [65.3, 12403.0], [65.4, 12646.0], [65.5, 12646.0], [65.6, 12671.0], [65.7, 12671.0], [65.8, 12671.0], [65.9, 12725.0], [66.0, 12725.0], [66.1, 12774.0], [66.2, 12774.0], [66.3, 12842.0], [66.4, 12842.0], [66.5, 12842.0], [66.6, 12874.0], [66.7, 12874.0], [66.8, 12997.0], [66.9, 12997.0], [67.0, 13032.0], [67.1, 13032.0], [67.2, 13032.0], [67.3, 13086.0], [67.4, 13086.0], [67.5, 13138.0], [67.6, 13138.0], [67.7, 13183.0], [67.8, 13183.0], [67.9, 13183.0], [68.0, 13250.0], [68.1, 13250.0], [68.2, 13297.0], [68.3, 13297.0], [68.4, 13344.0], [68.5, 13344.0], [68.6, 13344.0], [68.7, 13394.0], [68.8, 13394.0], [68.9, 13417.0], [69.0, 13417.0], [69.1, 13438.0], [69.2, 13438.0], [69.3, 13438.0], [69.4, 13483.0], [69.5, 13483.0], [69.6, 13531.0], [69.7, 13531.0], [69.8, 13751.0], [69.9, 13751.0], [70.0, 13800.0], [70.1, 13800.0], [70.2, 13800.0], [70.3, 13849.0], [70.4, 13849.0], [70.5, 13902.0], [70.6, 13902.0], [70.7, 13903.0], [70.8, 13903.0], [70.9, 13903.0], [71.0, 13943.0], [71.1, 13943.0], [71.2, 14004.0], [71.3, 14004.0], [71.4, 14037.0], [71.5, 14037.0], [71.6, 14037.0], [71.7, 14099.0], [71.8, 14099.0], [71.9, 14180.0], [72.0, 14180.0], [72.1, 14215.0], [72.2, 14215.0], [72.3, 14215.0], [72.4, 14265.0], [72.5, 14265.0], [72.6, 14280.0], [72.7, 14280.0], [72.8, 14419.0], [72.9, 14419.0], [73.0, 14419.0], [73.1, 14435.0], [73.2, 14435.0], [73.3, 14465.0], [73.4, 14465.0], [73.5, 14483.0], [73.6, 14483.0], [73.7, 14483.0], [73.8, 14542.0], [73.9, 14542.0], [74.0, 14581.0], [74.1, 14581.0], [74.2, 14638.0], [74.3, 14638.0], [74.4, 14638.0], [74.5, 14855.0], [74.6, 14855.0], [74.7, 15052.0], [74.8, 15052.0], [74.9, 15065.0], [75.0, 15065.0], [75.1, 15065.0], [75.2, 15102.0], [75.3, 15102.0], [75.4, 15122.0], [75.5, 15122.0], [75.6, 15184.0], [75.7, 15184.0], [75.8, 15184.0], [75.9, 15233.0], [76.0, 15233.0], [76.1, 15282.0], [76.2, 15282.0], [76.3, 15331.0], [76.4, 15331.0], [76.5, 15331.0], [76.6, 15420.0], [76.7, 15420.0], [76.8, 15484.0], [76.9, 15484.0], [77.0, 15743.0], [77.1, 15743.0], [77.2, 15743.0], [77.3, 15782.0], [77.4, 15782.0], [77.5, 15783.0], [77.6, 15783.0], [77.7, 15834.0], [77.8, 15834.0], [77.9, 15834.0], [78.0, 15882.0], [78.1, 15882.0], [78.2, 15925.0], [78.3, 15925.0], [78.4, 15933.0], [78.5, 15933.0], [78.6, 15933.0], [78.7, 15977.0], [78.8, 15977.0], [78.9, 16000.0], [79.0, 16000.0], [79.1, 16016.0], [79.2, 16016.0], [79.3, 16016.0], [79.4, 16036.0], [79.5, 16036.0], [79.6, 16309.0], [79.7, 16309.0], [79.8, 16359.0], [79.9, 16359.0], [80.0, 16650.0], [80.1, 16650.0], [80.2, 16650.0], [80.3, 16678.0], [80.4, 16678.0], [80.5, 16700.0], [80.6, 16700.0], [80.7, 16709.0], [80.8, 16709.0], [80.9, 16709.0], [81.0, 16806.0], [81.1, 16806.0], [81.2, 16819.0], [81.3, 16819.0], [81.4, 16864.0], [81.5, 16864.0], [81.6, 16864.0], [81.7, 16879.0], [81.8, 16879.0], [81.9, 17251.0], [82.0, 17251.0], [82.1, 17289.0], [82.2, 17289.0], [82.3, 17289.0], [82.4, 17491.0], [82.5, 17491.0], [82.6, 17492.0], [82.7, 17492.0], [82.8, 17553.0], [82.9, 17553.0], [83.0, 17553.0], [83.1, 17607.0], [83.2, 17607.0], [83.3, 17622.0], [83.4, 17622.0], [83.5, 17657.0], [83.6, 17657.0], [83.7, 17657.0], [83.8, 17680.0], [83.9, 17680.0], [84.0, 17695.0], [84.1, 17695.0], [84.2, 17757.0], [84.3, 17757.0], [84.4, 17757.0], [84.5, 17935.0], [84.6, 17935.0], [84.7, 18135.0], [84.8, 18135.0], [84.9, 18175.0], [85.0, 18175.0], [85.1, 18175.0], [85.2, 18183.0], [85.3, 18183.0], [85.4, 18187.0], [85.5, 18187.0], [85.6, 18237.0], [85.7, 18237.0], [85.8, 18237.0], [85.9, 18255.0], [86.0, 18255.0], [86.1, 18377.0], [86.2, 18377.0], [86.3, 18413.0], [86.4, 18413.0], [86.5, 18413.0], [86.6, 18440.0], [86.7, 18440.0], [86.8, 18500.0], [86.9, 18500.0], [87.0, 18533.0], [87.1, 18533.0], [87.2, 18533.0], [87.3, 18633.0], [87.4, 18633.0], [87.5, 18656.0], [87.6, 18656.0], [87.7, 18711.0], [87.8, 18711.0], [87.9, 18711.0], [88.0, 18828.0], [88.1, 18828.0], [88.2, 18888.0], [88.3, 18888.0], [88.4, 18915.0], [88.5, 18915.0], [88.6, 18915.0], [88.7, 19067.0], [88.8, 19067.0], [88.9, 19111.0], [89.0, 19111.0], [89.1, 19172.0], [89.2, 19172.0], [89.3, 19172.0], [89.4, 19310.0], [89.5, 19310.0], [89.6, 19324.0], [89.7, 19324.0], [89.8, 19326.0], [89.9, 19326.0], [90.0, 19326.0], [90.1, 19404.0], [90.2, 19404.0], [90.3, 19485.0], [90.4, 19485.0], [90.5, 19585.0], [90.6, 19585.0], [90.7, 19596.0], [90.8, 19596.0], [90.9, 19596.0], [91.0, 19827.0], [91.1, 19827.0], [91.2, 19909.0], [91.3, 19909.0], [91.4, 19945.0], [91.5, 19945.0], [91.6, 19945.0], [91.7, 20023.0], [91.8, 20023.0], [91.9, 20081.0], [92.0, 20081.0], [92.1, 20125.0], [92.2, 20125.0], [92.3, 20125.0], [92.4, 20675.0], [92.5, 20675.0], [92.6, 21013.0], [92.7, 21013.0], [92.8, 21094.0], [92.9, 21094.0], [93.0, 21094.0], [93.1, 21096.0], [93.2, 21096.0], [93.3, 21369.0], [93.4, 21369.0], [93.5, 21459.0], [93.6, 21459.0], [93.7, 21459.0], [93.8, 21724.0], [93.9, 21724.0], [94.0, 22012.0], [94.1, 22012.0], [94.2, 22496.0], [94.3, 22496.0], [94.4, 22496.0], [94.5, 22738.0], [94.6, 22738.0], [94.7, 22987.0], [94.8, 22987.0], [94.9, 23228.0], [95.0, 23228.0], [95.1, 23228.0], [95.2, 23313.0], [95.3, 23313.0], [95.4, 23469.0], [95.5, 23469.0], [95.6, 23569.0], [95.7, 23569.0], [95.8, 23569.0], [95.9, 23712.0], [96.0, 23712.0], [96.1, 23808.0], [96.2, 23808.0], [96.3, 23978.0], [96.4, 23978.0], [96.5, 23978.0], [96.6, 24155.0], [96.7, 24155.0], [96.8, 24223.0], [96.9, 24223.0], [97.0, 24329.0], [97.1, 24329.0], [97.2, 24329.0], [97.3, 24399.0], [97.4, 24399.0], [97.5, 24469.0], [97.6, 24469.0], [97.7, 24559.0], [97.8, 24559.0], [97.9, 24559.0], [98.0, 24634.0], [98.1, 24634.0], [98.2, 24735.0], [98.3, 24735.0], [98.4, 24832.0], [98.5, 24832.0], [98.6, 24832.0], [98.7, 24893.0], [98.8, 24893.0], [98.9, 24991.0], [99.0, 24991.0], [99.1, 25051.0], [99.2, 25051.0], [99.3, 25051.0], [99.4, 25142.0], [99.5, 25142.0], [99.6, 25236.0], [99.7, 25236.0], [99.8, 25298.0], [99.9, 25298.0], [100.0, 25298.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[0.0, 138.0], [0.1, 138.0], [0.2, 138.0], [0.3, 141.0], [0.4, 141.0], [0.5, 142.0], [0.6, 142.0], [0.7, 142.0], [0.8, 142.0], [0.9, 142.0], [1.0, 143.0], [1.1, 143.0], [1.2, 143.0], [1.3, 143.0], [1.4, 143.0], [1.5, 143.0], [1.6, 143.0], [1.7, 143.0], [1.8, 143.0], [1.9, 143.0], [2.0, 143.0], [2.1, 143.0], [2.2, 143.0], [2.3, 143.0], [2.4, 144.0], [2.5, 144.0], [2.6, 144.0], [2.7, 144.0], [2.8, 144.0], [2.9, 144.0], [3.0, 144.0], [3.1, 144.0], [3.2, 144.0], [3.3, 144.0], [3.4, 144.0], [3.5, 145.0], [3.6, 145.0], [3.7, 145.0], [3.8, 145.0], [3.9, 145.0], [4.0, 145.0], [4.1, 145.0], [4.2, 145.0], [4.3, 145.0], [4.4, 145.0], [4.5, 146.0], [4.6, 146.0], [4.7, 146.0], [4.8, 146.0], [4.9, 146.0], [5.0, 146.0], [5.1, 146.0], [5.2, 146.0], [5.3, 146.0], [5.4, 146.0], [5.5, 146.0], [5.6, 146.0], [5.7, 146.0], [5.8, 146.0], [5.9, 146.0], [6.0, 146.0], [6.1, 147.0], [6.2, 147.0], [6.3, 147.0], [6.4, 147.0], [6.5, 147.0], [6.6, 147.0], [6.7, 147.0], [6.8, 147.0], [6.9, 147.0], [7.0, 147.0], [7.1, 147.0], [7.2, 147.0], [7.3, 147.0], [7.4, 147.0], [7.5, 147.0], [7.6, 147.0], [7.7, 148.0], [7.8, 148.0], [7.9, 148.0], [8.0, 148.0], [8.1, 148.0], [8.2, 148.0], [8.3, 148.0], [8.4, 148.0], [8.5, 148.0], [8.6, 148.0], [8.7, 148.0], [8.8, 148.0], [8.9, 148.0], [9.0, 148.0], [9.1, 148.0], [9.2, 148.0], [9.3, 148.0], [9.4, 148.0], [9.5, 148.0], [9.6, 148.0], [9.7, 148.0], [9.8, 148.0], [9.9, 148.0], [10.0, 148.0], [10.1, 148.0], [10.2, 148.0], [10.3, 149.0], [10.4, 149.0], [10.5, 150.0], [10.6, 150.0], [10.7, 150.0], [10.8, 150.0], [10.9, 150.0], [11.0, 150.0], [11.1, 150.0], [11.2, 151.0], [11.3, 151.0], [11.4, 151.0], [11.5, 151.0], [11.6, 151.0], [11.7, 151.0], [11.8, 151.0], [11.9, 152.0], [12.0, 152.0], [12.1, 152.0], [12.2, 152.0], [12.3, 152.0], [12.4, 152.0], [12.5, 152.0], [12.6, 152.0], [12.7, 152.0], [12.8, 153.0], [12.9, 153.0], [13.0, 153.0], [13.1, 153.0], [13.2, 153.0], [13.3, 155.0], [13.4, 155.0], [13.5, 155.0], [13.6, 155.0], [13.7, 155.0], [13.8, 156.0], [13.9, 156.0], [14.0, 156.0], [14.1, 156.0], [14.2, 156.0], [14.3, 156.0], [14.4, 156.0], [14.5, 157.0], [14.6, 157.0], [14.7, 158.0], [14.8, 158.0], [14.9, 158.0], [15.0, 158.0], [15.1, 158.0], [15.2, 159.0], [15.3, 159.0], [15.4, 161.0], [15.5, 161.0], [15.6, 162.0], [15.7, 162.0], [15.8, 162.0], [15.9, 162.0], [16.0, 162.0], [16.1, 163.0], [16.2, 163.0], [16.3, 165.0], [16.4, 165.0], [16.5, 165.0], [16.6, 167.0], [16.7, 167.0], [16.8, 170.0], [16.9, 170.0], [17.0, 171.0], [17.1, 171.0], [17.2, 171.0], [17.3, 179.0], [17.4, 179.0], [17.5, 180.0], [17.6, 180.0], [17.7, 185.0], [17.8, 185.0], [17.9, 185.0], [18.0, 185.0], [18.1, 185.0], [18.2, 189.0], [18.3, 189.0], [18.4, 246.0], [18.5, 246.0], [18.6, 246.0], [18.7, 246.0], [18.8, 246.0], [18.9, 253.0], [19.0, 253.0], [19.1, 254.0], [19.2, 254.0], [19.3, 254.0], [19.4, 256.0], [19.5, 256.0], [19.6, 260.0], [19.7, 260.0], [19.8, 261.0], [19.9, 261.0], [20.0, 261.0], [20.1, 278.0], [20.2, 278.0], [20.3, 279.0], [20.4, 279.0], [20.5, 299.0], [20.6, 299.0], [20.7, 314.0], [20.8, 314.0], [20.9, 314.0], [21.0, 326.0], [21.1, 326.0], [21.2, 330.0], [21.3, 330.0], [21.4, 433.0], [21.5, 433.0], [21.6, 433.0], [21.7, 451.0], [21.8, 451.0], [21.9, 457.0], [22.0, 457.0], [22.1, 465.0], [22.2, 465.0], [22.3, 465.0], [22.4, 467.0], [22.5, 467.0], [22.6, 476.0], [22.7, 476.0], [22.8, 480.0], [22.9, 480.0], [23.0, 480.0], [23.1, 490.0], [23.2, 490.0], [23.3, 493.0], [23.4, 493.0], [23.5, 572.0], [23.6, 572.0], [23.7, 572.0], [23.8, 575.0], [23.9, 575.0], [24.0, 581.0], [24.1, 581.0], [24.2, 581.0], [24.3, 581.0], [24.4, 581.0], [24.5, 583.0], [24.6, 583.0], [24.7, 584.0], [24.8, 584.0], [24.9, 584.0], [25.0, 584.0], [25.1, 584.0], [25.2, 585.0], [25.3, 585.0], [25.4, 585.0], [25.5, 585.0], [25.6, 586.0], [25.7, 586.0], [25.8, 586.0], [25.9, 589.0], [26.0, 589.0], [26.1, 590.0], [26.2, 590.0], [26.3, 590.0], [26.4, 590.0], [26.5, 590.0], [26.6, 592.0], [26.7, 592.0], [26.8, 592.0], [26.9, 592.0], [27.0, 592.0], [27.1, 592.0], [27.2, 592.0], [27.3, 595.0], [27.4, 595.0], [27.5, 596.0], [27.6, 596.0], [27.7, 597.0], [27.8, 597.0], [27.9, 597.0], [28.0, 597.0], [28.1, 597.0], [28.2, 598.0], [28.3, 598.0], [28.4, 598.0], [28.5, 598.0], [28.6, 598.0], [28.7, 598.0], [28.8, 598.0], [28.9, 604.0], [29.0, 604.0], [29.1, 640.0], [29.2, 640.0], [29.3, 640.0], [29.4, 684.0], [29.5, 684.0], [29.6, 708.0], [29.7, 708.0], [29.8, 714.0], [29.9, 714.0], [30.0, 714.0], [30.1, 715.0], [30.2, 715.0], [30.3, 748.0], [30.4, 748.0], [30.5, 748.0], [30.6, 748.0], [30.7, 854.0], [30.8, 854.0], [30.9, 854.0], [31.0, 860.0], [31.1, 860.0], [31.2, 879.0], [31.3, 879.0], [31.4, 889.0], [31.5, 889.0], [31.6, 889.0], [31.7, 894.0], [31.8, 894.0], [31.9, 926.0], [32.0, 926.0], [32.1, 1005.0], [32.2, 1005.0], [32.3, 1005.0], [32.4, 1031.0], [32.5, 1031.0], [32.6, 1038.0], [32.7, 1038.0], [32.8, 1059.0], [32.9, 1059.0], [33.0, 1059.0], [33.1, 1064.0], [33.2, 1064.0], [33.3, 1152.0], [33.4, 1152.0], [33.5, 1166.0], [33.6, 1166.0], [33.7, 1166.0], [33.8, 1170.0], [33.9, 1170.0], [34.0, 1200.0], [34.1, 1200.0], [34.2, 1209.0], [34.3, 1209.0], [34.4, 1209.0], [34.5, 1231.0], [34.6, 1231.0], [34.7, 1317.0], [34.8, 1317.0], [34.9, 1338.0], [35.0, 1338.0], [35.1, 1338.0], [35.2, 1342.0], [35.3, 1342.0], [35.4, 1374.0], [35.5, 1374.0], [35.6, 1385.0], [35.7, 1385.0], [35.8, 1385.0], [35.9, 1394.0], [36.0, 1394.0], [36.1, 1494.0], [36.2, 1494.0], [36.3, 1502.0], [36.4, 1502.0], [36.5, 1502.0], [36.6, 1520.0], [36.7, 1520.0], [36.8, 1551.0], [36.9, 1551.0], [37.0, 1570.0], [37.1, 1570.0], [37.2, 1570.0], [37.3, 1644.0], [37.4, 1644.0], [37.5, 1647.0], [37.6, 1647.0], [37.7, 1754.0], [37.8, 1754.0], [37.9, 1754.0], [38.0, 1768.0], [38.1, 1768.0], [38.2, 1789.0], [38.3, 1789.0], [38.4, 1880.0], [38.5, 1880.0], [38.6, 1880.0], [38.7, 1892.0], [38.8, 1892.0], [38.9, 1993.0], [39.0, 1993.0], [39.1, 2004.0], [39.2, 2004.0], [39.3, 2004.0], [39.4, 2019.0], [39.5, 2019.0], [39.6, 2129.0], [39.7, 2129.0], [39.8, 2154.0], [39.9, 2154.0], [40.0, 2181.0], [40.1, 2181.0], [40.2, 2181.0], [40.3, 2282.0], [40.4, 2282.0], [40.5, 2303.0], [40.6, 2303.0], [40.7, 2328.0], [40.8, 2328.0], [40.9, 2328.0], [41.0, 2430.0], [41.1, 2430.0], [41.2, 2491.0], [41.3, 2491.0], [41.4, 2524.0], [41.5, 2524.0], [41.6, 2524.0], [41.7, 2629.0], [41.8, 2629.0], [41.9, 2649.0], [42.0, 2649.0], [42.1, 2670.0], [42.2, 2670.0], [42.3, 2670.0], [42.4, 2775.0], [42.5, 2775.0], [42.6, 2796.0], [42.7, 2796.0], [42.8, 2905.0], [42.9, 2905.0], [43.0, 2905.0], [43.1, 2924.0], [43.2, 2924.0], [43.3, 2932.0], [43.4, 2932.0], [43.5, 3055.0], [43.6, 3055.0], [43.7, 3055.0], [43.8, 3072.0], [43.9, 3072.0], [44.0, 3169.0], [44.1, 3169.0], [44.2, 3205.0], [44.3, 3205.0], [44.4, 3205.0], [44.5, 3231.0], [44.6, 3231.0], [44.7, 3336.0], [44.8, 3336.0], [44.9, 3353.0], [45.0, 3353.0], [45.1, 3353.0], [45.2, 3504.0], [45.3, 3504.0], [45.4, 3512.0], [45.5, 3512.0], [45.6, 3616.0], [45.7, 3616.0], [45.8, 3616.0], [45.9, 3638.0], [46.0, 3638.0], [46.1, 3742.0], [46.2, 3742.0], [46.3, 3844.0], [46.4, 3844.0], [46.5, 3844.0], [46.6, 3853.0], [46.7, 3853.0], [46.8, 3971.0], [46.9, 3971.0], [47.0, 4049.0], [47.1, 4049.0], [47.2, 4049.0], [47.3, 4104.0], [47.4, 4104.0], [47.5, 4137.0], [47.6, 4137.0], [47.7, 4152.0], [47.8, 4152.0], [47.9, 4152.0], [48.0, 4261.0], [48.1, 4261.0], [48.2, 4371.0], [48.3, 4371.0], [48.4, 4389.0], [48.5, 4389.0], [48.6, 4389.0], [48.7, 4497.0], [48.8, 4497.0], [48.9, 4537.0], [49.0, 4537.0], [49.1, 4639.0], [49.2, 4639.0], [49.3, 4639.0], [49.4, 4661.0], [49.5, 4661.0], [49.6, 4766.0], [49.7, 4766.0], [49.8, 4868.0], [49.9, 4868.0], [50.0, 4903.0], [50.1, 4903.0], [50.2, 4903.0], [50.3, 5005.0], [50.4, 5005.0], [50.5, 5016.0], [50.6, 5016.0], [50.7, 5017.0], [50.8, 5017.0], [50.9, 5017.0], [51.0, 5019.0], [51.1, 5019.0], [51.2, 5033.0], [51.3, 5033.0], [51.4, 5037.0], [51.5, 5037.0], [51.6, 5037.0], [51.7, 5042.0], [51.8, 5042.0], [51.9, 5044.0], [52.0, 5044.0], [52.1, 5081.0], [52.2, 5081.0], [52.3, 5081.0], [52.4, 5084.0], [52.5, 5084.0], [52.6, 5092.0], [52.7, 5092.0], [52.8, 5096.0], [52.9, 5096.0], [53.0, 5096.0], [53.1, 5127.0], [53.2, 5127.0], [53.3, 5130.0], [53.4, 5130.0], [53.5, 5135.0], [53.6, 5135.0], [53.7, 5135.0], [53.8, 5140.0], [53.9, 5140.0], [54.0, 5148.0], [54.1, 5148.0], [54.2, 5154.0], [54.3, 5154.0], [54.4, 5154.0], [54.5, 5165.0], [54.6, 5165.0], [54.7, 5174.0], [54.8, 5174.0], [54.9, 5188.0], [55.0, 5188.0], [55.1, 5188.0], [55.2, 5194.0], [55.3, 5194.0], [55.4, 5195.0], [55.5, 5195.0], [55.6, 5203.0], [55.7, 5203.0], [55.8, 5203.0], [55.9, 5209.0], [56.0, 5209.0], [56.1, 5209.0], [56.2, 5209.0], [56.3, 5230.0], [56.4, 5230.0], [56.5, 5230.0], [56.6, 5242.0], [56.7, 5242.0], [56.8, 5249.0], [56.9, 5249.0], [57.0, 5255.0], [57.1, 5255.0], [57.2, 5255.0], [57.3, 5263.0], [57.4, 5263.0], [57.5, 5275.0], [57.6, 5275.0], [57.7, 5284.0], [57.8, 5284.0], [57.9, 5284.0], [58.0, 5295.0], [58.1, 5295.0], [58.2, 5302.0], [58.3, 5302.0], [58.4, 5302.0], [58.5, 5302.0], [58.6, 5302.0], [58.7, 5308.0], [58.8, 5308.0], [58.9, 5326.0], [59.0, 5326.0], [59.1, 5332.0], [59.2, 5332.0], [59.3, 5332.0], [59.4, 5336.0], [59.5, 5336.0], [59.6, 5348.0], [59.7, 5348.0], [59.8, 5352.0], [59.9, 5352.0], [60.0, 5359.0], [60.1, 5359.0], [60.2, 5359.0], [60.3, 5361.0], [60.4, 5361.0], [60.5, 5369.0], [60.6, 5369.0], [60.7, 5393.0], [60.8, 5393.0], [60.9, 5393.0], [61.0, 5395.0], [61.1, 5395.0], [61.2, 5403.0], [61.3, 5403.0], [61.4, 5406.0], [61.5, 5406.0], [61.6, 5406.0], [61.7, 5409.0], [61.8, 5409.0], [61.9, 5415.0], [62.0, 5415.0], [62.1, 5420.0], [62.2, 5420.0], [62.3, 5420.0], [62.4, 5438.0], [62.5, 5438.0], [62.6, 5440.0], [62.7, 5440.0], [62.8, 5449.0], [62.9, 5449.0], [63.0, 5449.0], [63.1, 5451.0], [63.2, 5451.0], [63.3, 5455.0], [63.4, 5455.0], [63.5, 5466.0], [63.6, 5466.0], [63.7, 5466.0], [63.8, 5469.0], [63.9, 5469.0], [64.0, 5476.0], [64.1, 5476.0], [64.2, 5476.0], [64.3, 5476.0], [64.4, 5476.0], [64.5, 5485.0], [64.6, 5485.0], [64.7, 5486.0], [64.8, 5486.0], [64.9, 5497.0], [65.0, 5497.0], [65.1, 5497.0], [65.2, 5515.0], [65.3, 5515.0], [65.4, 5521.0], [65.5, 5521.0], [65.6, 5538.0], [65.7, 5538.0], [65.8, 5538.0], [65.9, 5538.0], [66.0, 5538.0], [66.1, 5544.0], [66.2, 5544.0], [66.3, 5558.0], [66.4, 5558.0], [66.5, 5558.0], [66.6, 5558.0], [66.7, 5558.0], [66.8, 5565.0], [66.9, 5565.0], [67.0, 5578.0], [67.1, 5578.0], [67.2, 5578.0], [67.3, 5586.0], [67.4, 5586.0], [67.5, 5588.0], [67.6, 5588.0], [67.7, 5591.0], [67.8, 5591.0], [67.9, 5591.0], [68.0, 5601.0], [68.1, 5601.0], [68.2, 5616.0], [68.3, 5616.0], [68.4, 5633.0], [68.5, 5633.0], [68.6, 5633.0], [68.7, 5634.0], [68.8, 5634.0], [68.9, 5637.0], [69.0, 5637.0], [69.1, 5640.0], [69.2, 5640.0], [69.3, 5640.0], [69.4, 5645.0], [69.5, 5645.0], [69.6, 5654.0], [69.7, 5654.0], [69.8, 5665.0], [69.9, 5665.0], [70.0, 5673.0], [70.1, 5673.0], [70.2, 5673.0], [70.3, 5673.0], [70.4, 5673.0], [70.5, 5674.0], [70.6, 5674.0], [70.7, 5677.0], [70.8, 5677.0], [70.9, 5677.0], [71.0, 5711.0], [71.1, 5711.0], [71.2, 5719.0], [71.3, 5719.0], [71.4, 5721.0], [71.5, 5721.0], [71.6, 5721.0], [71.7, 5724.0], [71.8, 5724.0], [71.9, 5736.0], [72.0, 5736.0], [72.1, 5764.0], [72.2, 5764.0], [72.3, 5764.0], [72.4, 5765.0], [72.5, 5765.0], [72.6, 5768.0], [72.7, 5768.0], [72.8, 5772.0], [72.9, 5772.0], [73.0, 5772.0], [73.1, 5773.0], [73.2, 5773.0], [73.3, 5796.0], [73.4, 5796.0], [73.5, 5809.0], [73.6, 5809.0], [73.7, 5809.0], [73.8, 5814.0], [73.9, 5814.0], [74.0, 5817.0], [74.1, 5817.0], [74.2, 5819.0], [74.3, 5819.0], [74.4, 5819.0], [74.5, 5839.0], [74.6, 5839.0], [74.7, 5858.0], [74.8, 5858.0], [74.9, 5861.0], [75.0, 5861.0], [75.1, 5861.0], [75.2, 5868.0], [75.3, 5868.0], [75.4, 5869.0], [75.5, 5869.0], [75.6, 5874.0], [75.7, 5874.0], [75.8, 5874.0], [75.9, 5892.0], [76.0, 5892.0], [76.1, 5910.0], [76.2, 5910.0], [76.3, 5912.0], [76.4, 5912.0], [76.5, 5912.0], [76.6, 5916.0], [76.7, 5916.0], [76.8, 5916.0], [76.9, 5916.0], [77.0, 5927.0], [77.1, 5927.0], [77.2, 5927.0], [77.3, 5935.0], [77.4, 5935.0], [77.5, 5949.0], [77.6, 5949.0], [77.7, 5961.0], [77.8, 5961.0], [77.9, 5961.0], [78.0, 5961.0], [78.1, 5961.0], [78.2, 5967.0], [78.3, 5967.0], [78.4, 5973.0], [78.5, 5973.0], [78.6, 5973.0], [78.7, 6040.0], [78.8, 6040.0], [78.9, 6080.0], [79.0, 6080.0], [79.1, 6185.0], [79.2, 6185.0], [79.3, 6185.0], [79.4, 6289.0], [79.5, 6289.0], [79.6, 6435.0], [79.7, 6435.0], [79.8, 6517.0], [79.9, 6517.0], [80.0, 6568.0], [80.1, 6568.0], [80.2, 6568.0], [80.3, 6672.0], [80.4, 6672.0], [80.5, 6713.0], [80.6, 6713.0], [80.7, 6817.0], [80.8, 6817.0], [80.9, 6817.0], [81.0, 6943.0], [81.1, 6943.0], [81.2, 7043.0], [81.3, 7043.0], [81.4, 7073.0], [81.5, 7073.0], [81.6, 7073.0], [81.7, 7194.0], [81.8, 7194.0], [81.9, 7295.0], [82.0, 7295.0], [82.1, 7335.0], [82.2, 7335.0], [82.3, 7335.0], [82.4, 7445.0], [82.5, 7445.0], [82.6, 7582.0], [82.7, 7582.0], [82.8, 7602.0], [82.9, 7602.0], [83.0, 7602.0], [83.1, 7720.0], [83.2, 7720.0], [83.3, 7851.0], [83.4, 7851.0], [83.5, 7975.0], [83.6, 7975.0], [83.7, 7975.0], [83.8, 8016.0], [83.9, 8016.0], [84.0, 8130.0], [84.1, 8130.0], [84.2, 8174.0], [84.3, 8174.0], [84.4, 8174.0], [84.5, 8238.0], [84.6, 8238.0], [84.7, 8391.0], [84.8, 8391.0], [84.9, 8496.0], [85.0, 8496.0], [85.1, 8496.0], [85.2, 8557.0], [85.3, 8557.0], [85.4, 8623.0], [85.5, 8623.0], [85.6, 8637.0], [85.7, 8637.0], [85.8, 8637.0], [85.9, 8679.0], [86.0, 8679.0], [86.1, 8708.0], [86.2, 8708.0], [86.3, 8743.0], [86.4, 8743.0], [86.5, 8743.0], [86.6, 8769.0], [86.7, 8769.0], [86.8, 8773.0], [86.9, 8773.0], [87.0, 8814.0], [87.1, 8814.0], [87.2, 8814.0], [87.3, 8982.0], [87.4, 8982.0], [87.5, 8991.0], [87.6, 8991.0], [87.7, 9073.0], [87.8, 9073.0], [87.9, 9073.0], [88.0, 9115.0], [88.1, 9115.0], [88.2, 9135.0], [88.3, 9135.0], [88.4, 9195.0], [88.5, 9195.0], [88.6, 9195.0], [88.7, 9236.0], [88.8, 9236.0], [88.9, 9280.0], [89.0, 9280.0], [89.1, 9325.0], [89.2, 9325.0], [89.3, 9325.0], [89.4, 9357.0], [89.5, 9357.0], [89.6, 9381.0], [89.7, 9381.0], [89.8, 9423.0], [89.9, 9423.0], [90.0, 9429.0], [90.1, 9429.0], [90.2, 9429.0], [90.3, 9464.0], [90.4, 9464.0], [90.5, 9476.0], [90.6, 9476.0], [90.7, 9515.0], [90.8, 9515.0], [90.9, 9515.0], [91.0, 9561.0], [91.1, 9561.0], [91.2, 9608.0], [91.3, 9608.0], [91.4, 9658.0], [91.5, 9658.0], [91.6, 9658.0], [91.7, 9690.0], [91.8, 9690.0], [91.9, 9749.0], [92.0, 9749.0], [92.1, 9794.0], [92.2, 9794.0], [92.3, 9794.0], [92.4, 9810.0], [92.5, 9810.0], [92.6, 9822.0], [92.7, 9822.0], [92.8, 9854.0], [92.9, 9854.0], [93.0, 9854.0], [93.1, 9880.0], [93.2, 9880.0], [93.3, 9910.0], [93.4, 9910.0], [93.5, 9953.0], [93.6, 9953.0], [93.7, 9953.0], [93.8, 9981.0], [93.9, 9981.0], [94.0, 10030.0], [94.1, 10030.0], [94.2, 10061.0], [94.3, 10061.0], [94.4, 10061.0], [94.5, 10116.0], [94.6, 10116.0], [94.7, 10159.0], [94.8, 10159.0], [94.9, 10189.0], [95.0, 10189.0], [95.1, 10189.0], [95.2, 10215.0], [95.3, 10215.0], [95.4, 10252.0], [95.5, 10252.0], [95.6, 10260.0], [95.7, 10260.0], [95.8, 10260.0], [95.9, 10308.0], [96.0, 10308.0], [96.1, 10349.0], [96.2, 10349.0], [96.3, 10389.0], [96.4, 10389.0], [96.5, 10389.0], [96.6, 10442.0], [96.7, 10442.0], [96.8, 10477.0], [96.9, 10477.0], [97.0, 10517.0], [97.1, 10517.0], [97.2, 10517.0], [97.3, 10576.0], [97.4, 10576.0], [97.5, 10617.0], [97.6, 10617.0], [97.7, 10647.0], [97.8, 10647.0], [97.9, 10647.0], [98.0, 10661.0], [98.1, 10661.0], [98.2, 10681.0], [98.3, 10681.0], [98.4, 10705.0], [98.5, 10705.0], [98.6, 10705.0], [98.7, 10742.0], [98.8, 10742.0], [98.9, 10788.0], [99.0, 10788.0], [99.1, 10828.0], [99.2, 10828.0], [99.3, 10828.0], [99.4, 10874.0], [99.5, 10874.0], [99.6, 10918.0], [99.7, 10918.0], [99.8, 10961.0], [99.9, 10961.0], [100.0, 10961.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 79.0, "series": [{"data": [[0.0, 1.0], [100.0, 59.0], [200.0, 9.0], [300.0, 13.0], [400.0, 3.0], [800.0, 1.0], [1300.0, 1.0], [5000.0, 9.0], [5100.0, 11.0], [5300.0, 12.0], [5200.0, 11.0], [5500.0, 10.0], [5400.0, 15.0], [5600.0, 11.0], [5800.0, 11.0], [5700.0, 9.0], [5900.0, 9.0], [8700.0, 2.0], [8600.0, 2.0], [8500.0, 1.0], [8800.0, 1.0], [9200.0, 2.0], [9100.0, 2.0], [9000.0, 3.0], [8900.0, 2.0], [9400.0, 3.0], [9500.0, 3.0], [9300.0, 4.0], [9700.0, 3.0], [9600.0, 3.0], [10100.0, 3.0], [9800.0, 3.0], [10000.0, 2.0], [9900.0, 3.0], [10200.0, 3.0], [10700.0, 3.0], [10600.0, 4.0], [10500.0, 3.0], [10400.0, 2.0], [10300.0, 3.0], [10800.0, 4.0], [10900.0, 3.0], [11500.0, 4.0], [11600.0, 2.0], [11400.0, 2.0], [12200.0, 3.0], [12100.0, 2.0], [12000.0, 3.0], [12400.0, 1.0], [12300.0, 2.0], [12700.0, 2.0], [12600.0, 2.0], [13100.0, 2.0], [13000.0, 2.0], [12900.0, 1.0], [12800.0, 2.0], [13300.0, 2.0], [13200.0, 2.0], [13400.0, 3.0], [13800.0, 2.0], [13700.0, 1.0], [13500.0, 1.0], [14200.0, 3.0], [14100.0, 1.0], [13900.0, 3.0], [14000.0, 3.0], [14800.0, 1.0], [14600.0, 1.0], [14500.0, 2.0], [14400.0, 4.0], [15000.0, 2.0], [15100.0, 3.0], [15300.0, 1.0], [15200.0, 2.0], [15400.0, 2.0], [15700.0, 3.0], [15800.0, 2.0], [15900.0, 3.0], [16300.0, 2.0], [16000.0, 3.0], [17200.0, 2.0], [16800.0, 4.0], [16600.0, 2.0], [17400.0, 2.0], [16700.0, 2.0], [17900.0, 1.0], [18200.0, 2.0], [18100.0, 4.0], [18400.0, 2.0], [17600.0, 5.0], [17500.0, 1.0], [17700.0, 1.0], [18300.0, 1.0], [18600.0, 2.0], [19400.0, 2.0], [18900.0, 1.0], [19100.0, 2.0], [19300.0, 3.0], [18800.0, 2.0], [18700.0, 1.0], [19000.0, 1.0], [18500.0, 2.0], [19900.0, 2.0], [19800.0, 1.0], [20000.0, 2.0], [19500.0, 2.0], [20100.0, 1.0], [21000.0, 3.0], [20600.0, 1.0], [21300.0, 1.0], [21400.0, 1.0], [21700.0, 1.0], [22000.0, 1.0], [22400.0, 1.0], [23200.0, 1.0], [23400.0, 1.0], [23300.0, 1.0], [23500.0, 1.0], [22900.0, 1.0], [22700.0, 1.0], [23700.0, 1.0], [23800.0, 1.0], [24500.0, 1.0], [24400.0, 1.0], [24200.0, 1.0], [24300.0, 2.0], [23900.0, 1.0], [24100.0, 1.0], [24600.0, 1.0], [25200.0, 2.0], [25100.0, 1.0], [25000.0, 1.0], [24800.0, 2.0], [24700.0, 1.0], [24900.0, 1.0]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[100.0, 79.0], [200.0, 10.0], [300.0, 3.0], [400.0, 9.0], [500.0, 23.0], [600.0, 3.0], [700.0, 5.0], [800.0, 5.0], [900.0, 1.0], [1000.0, 5.0], [1100.0, 3.0], [1200.0, 3.0], [1300.0, 6.0], [1400.0, 1.0], [1500.0, 4.0], [1600.0, 2.0], [1700.0, 3.0], [1800.0, 2.0], [1900.0, 1.0], [2000.0, 2.0], [2100.0, 3.0], [2200.0, 1.0], [2300.0, 2.0], [2400.0, 2.0], [2500.0, 1.0], [2600.0, 3.0], [2700.0, 2.0], [2900.0, 3.0], [3000.0, 2.0], [3100.0, 1.0], [3200.0, 2.0], [3300.0, 2.0], [3500.0, 2.0], [3600.0, 2.0], [3700.0, 1.0], [3800.0, 2.0], [3900.0, 1.0], [4000.0, 1.0], [4100.0, 3.0], [4200.0, 1.0], [4300.0, 2.0], [4400.0, 1.0], [4500.0, 1.0], [4600.0, 2.0], [4700.0, 1.0], [4800.0, 1.0], [4900.0, 1.0], [5000.0, 12.0], [5100.0, 11.0], [5300.0, 13.0], [5200.0, 11.0], [5400.0, 17.0], [5500.0, 12.0], [5600.0, 13.0], [5700.0, 11.0], [5800.0, 11.0], [5900.0, 11.0], [6000.0, 2.0], [6100.0, 1.0], [6200.0, 1.0], [6400.0, 1.0], [6500.0, 2.0], [6600.0, 1.0], [6700.0, 1.0], [6800.0, 1.0], [6900.0, 1.0], [7000.0, 2.0], [7100.0, 1.0], [7200.0, 1.0], [7300.0, 1.0], [7400.0, 1.0], [7500.0, 1.0], [7600.0, 1.0], [7700.0, 1.0], [7800.0, 1.0], [7900.0, 1.0], [8000.0, 1.0], [8100.0, 2.0], [8200.0, 1.0], [8300.0, 1.0], [8400.0, 1.0], [8600.0, 3.0], [8700.0, 4.0], [8500.0, 1.0], [8800.0, 1.0], [9200.0, 2.0], [9100.0, 3.0], [8900.0, 2.0], [9000.0, 1.0], [9400.0, 4.0], [9300.0, 3.0], [9700.0, 2.0], [9600.0, 3.0], [9500.0, 2.0], [9800.0, 4.0], [10200.0, 3.0], [10100.0, 3.0], [10000.0, 2.0], [9900.0, 3.0], [10700.0, 3.0], [10600.0, 4.0], [10500.0, 2.0], [10400.0, 2.0], [10300.0, 3.0], [10900.0, 2.0], [10800.0, 2.0]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 25200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 57.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 510.0, "series": [{"data": [[0.0, 186.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 57.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 107.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 510.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.654609452E12, "maxY": 2.0, "series": [{"data": [[1.654609473E12, 2.0], [1.654609476E12, 2.0], [1.6546094535E12, 1.5], [1.6546094565E12, 1.5], [1.654609479E12, 2.0], [1.6546094595E12, 1.5238095238095237], [1.654609482E12, 2.0], [1.6546094625E12, 1.5454545454545454], [1.654609485E12, 1.7368421052631575], [1.654609488E12, 1.358695652173913], [1.6546094655E12, 1.6315789473684208], [1.6546094685E12, 2.0], [1.654609491E12, 1.244444444444444], [1.6546094715E12, 2.0], [1.654609452E12, 1.5], [1.6546094745E12, 1.875], [1.654609455E12, 1.5], [1.6546094775E12, 2.0], [1.654609458E12, 1.5], [1.6546094805E12, 2.0], [1.654609461E12, 1.4782608695652173], [1.6546094835E12, 2.0], [1.654609464E12, 1.5], [1.6546094865E12, 1.436619718309859], [1.654609467E12, 2.0], [1.6546094895E12, 1.3647058823529414], [1.65460947E12, 1.9411764705882353], [1.6546094925E12, 1.0]], "isOverall": false, "label": "parallel bzm - Parallel", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6546094925E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 147.6969696969697, "minX": 1.0, "maxY": 25298.0, "series": [{"data": [[2.0, 3745.5], [3.0, 2035.3333333333335], [4.0, 1692.6923076923076], [5.0, 450.5], [6.0, 9228.5], [7.0, 10956.0], [8.0, 22496.0], [10.0, 24911.5], [11.0, 21459.0], [12.0, 19310.0], [13.0, 15977.0], [14.0, 24735.0], [15.0, 10661.0], [16.0, 24329.0], [17.0, 21096.0], [18.0, 24155.0], [19.0, 22738.0], [20.0, 20023.0], [21.0, 17492.0], [22.0, 22987.0], [23.0, 18500.0], [25.0, 24607.0], [26.0, 21369.0], [27.0, 22012.0], [28.0, 24399.0], [29.0, 23569.0], [30.0, 23313.0], [31.0, 24223.0], [33.0, 14436.0], [34.0, 24893.0], [37.0, 19945.0], [36.0, 14339.0], [39.0, 21724.0], [38.0, 25051.0], [41.0, 21013.0], [40.0, 24469.0], [42.0, 25142.0], [45.0, 25298.0], [44.0, 20287.5], [47.0, 23712.0], [46.0, 23808.0], [49.0, 13903.0], [48.0, 24634.0], [50.0, 10681.0], [52.0, 8033.0], [55.0, 12363.0], [54.0, 14004.0], [56.0, 18533.0], [59.0, 10826.0], [58.0, 5476.0], [61.0, 5565.0], [60.0, 5521.0], [63.0, 8421.0], [64.0, 5031.0], [66.0, 10915.0], [65.0, 5648.5], [71.0, 9932.5], [69.0, 12301.5], [75.0, 5915.0], [74.0, 5809.0], [73.0, 5871.0], [72.0, 10903.666666666666], [79.0, 5132.0], [76.0, 10208.0], [83.0, 5208.0], [82.0, 11804.5], [80.0, 10314.0], [86.0, 19596.0], [85.0, 18440.0], [84.0, 18377.0], [91.0, 5352.0], [90.0, 5294.0], [89.0, 5248.0], [88.0, 14349.666666666666], [94.0, 10394.0], [93.0, 5492.0], [92.0, 5445.0], [98.0, 10726.0], [96.0, 10441.0], [102.0, 10478.0], [101.0, 13183.0], [100.0, 10313.0], [107.0, 10457.5], [106.0, 16650.0], [105.0, 5586.0], [104.0, 13394.0], [111.0, 13438.0], [109.0, 19067.0], [108.0, 16709.0], [115.0, 5672.0], [112.0, 11737.5], [119.0, 14132.5], [118.0, 5765.0], [117.0, 10513.0], [116.0, 5719.0], [121.0, 12699.333333333334], [127.0, 13531.0], [125.0, 5913.0], [134.0, 8118.666666666667], [135.0, 9931.0], [132.0, 9864.0], [131.0, 5315.0], [130.0, 12646.0], [129.0, 8283.5], [128.0, 12048.0], [143.0, 5255.0], [142.0, 7507.5], [141.0, 5147.0], [139.0, 7601.0], [138.0, 5103.0], [137.0, 9920.0], [151.0, 11542.0], [150.0, 14542.0], [148.0, 5637.0], [146.0, 14483.0], [145.0, 15783.0], [144.0, 12671.0], [159.0, 13611.333333333334], [157.0, 9155.5], [155.0, 5475.0], [154.0, 7558.5], [152.0, 5681.0], [167.0, 5578.0], [166.0, 10031.0], [165.0, 16819.0], [164.0, 17491.0], [163.0, 19485.0], [162.0, 15834.0], [161.0, 18711.0], [160.0, 18633.0], [175.0, 14581.0], [174.0, 10850.0], [172.0, 10605.333333333334], [170.0, 5711.0], [182.0, 11154.0], [179.0, 5882.5], [178.0, 13516.5], [177.0, 17553.0], [191.0, 12060.0], [188.0, 5230.0], [187.0, 9431.0], [186.0, 5148.0], [185.0, 5195.0], [184.0, 12014.0], [199.0, 19596.0], [196.0, 21094.0], [195.0, 20675.0], [194.0, 19585.0], [193.0, 5336.0], [192.0, 11765.0], [207.0, 18888.0], [206.0, 19827.0], [205.0, 13824.0], [204.0, 18828.0], [202.0, 9586.5], [200.0, 13026.5], [215.0, 15065.0], [214.0, 9658.0], [213.0, 9517.0], [212.0, 7344.0], [211.0, 12093.0], [210.0, 17251.0], [209.0, 16000.0], [208.0, 19326.0], [223.0, 5600.0], [222.0, 12249.0], [221.0, 7581.5], [220.0, 12142.0], [219.0, 5498.0], [217.0, 9605.333333333334], [230.0, 8934.0], [228.0, 9690.0], [227.0, 5348.5], [225.0, 9755.0], [224.0, 5804.0], [239.0, 10703.333333333334], [235.0, 7833.5], [234.0, 5840.0], [232.0, 9792.5], [247.0, 19172.0], [246.0, 5139.0], [244.0, 5188.0], [243.0, 9384.5], [242.0, 5972.0], [241.0, 12340.0], [240.0, 15102.0], [254.0, 17680.0], [251.0, 7132.5], [249.0, 15936.0], [269.0, 15052.0], [260.0, 17329.0], [262.0, 19404.0], [261.0, 19909.0], [270.0, 5204.0], [268.0, 13805.5], [257.0, 12433.75], [267.0, 18237.0], [266.0, 16806.0], [265.0, 14180.0], [264.0, 18175.0], [263.0, 18413.0], [275.0, 7319.5], [285.0, 16359.0], [287.0, 15160.5], [284.0, 13428.666666666666], [281.0, 10610.5], [279.0, 9137.0], [278.0, 7243.0], [277.0, 5050.0], [276.0, 5349.0], [274.0, 8503.5], [272.0, 10298.5], [291.0, 5633.0], [303.0, 8151.25], [300.0, 9322.0], [299.0, 13138.0], [298.0, 7499.0], [297.0, 11545.0], [295.0, 9978.5], [293.0, 10421.0], [289.0, 13086.0], [288.0, 11509.0], [305.0, 5884.5], [333.0, 7642.5], [326.0, 5104.0], [324.0, 5035.0], [323.0, 11084.666666666666], [334.0, 8788.5], [331.0, 10068.2], [330.0, 9854.800000000001], [328.0, 5205.0], [329.0, 8742.0], [1.0, 357.55172413793105]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[137.2767441860465, 9657.920930232567]], "isOverall": false, "label": "/api/statistics/neighbourhoods-Aggregated", "isController": false}, {"data": [[2.0, 154.7058823529412], [3.0, 275.0625], [4.0, 215.33333333333334], [5.0, 256.0], [7.0, 278.0], [8.0, 299.0], [9.0, 330.0], [10.0, 326.0], [13.0, 433.0], [14.0, 451.0], [15.0, 467.0], [16.0, 457.0], [17.0, 465.0], [18.0, 493.0], [19.0, 476.0], [20.0, 480.0], [22.0, 536.5], [25.0, 582.5], [26.0, 575.0], [28.0, 585.0], [29.0, 597.0], [30.0, 585.0], [31.0, 10647.0], [32.0, 592.0], [33.0, 2987.5], [34.0, 585.0], [35.0, 584.0], [36.0, 590.0], [37.0, 5449.0], [38.0, 597.0], [39.0, 596.0], [40.0, 595.0], [41.0, 586.0], [42.0, 592.0], [43.0, 598.0], [44.0, 592.0], [45.0, 598.0], [47.0, 604.0], [48.0, 598.0], [50.0, 5682.5], [51.0, 5725.0], [52.0, 3020.0], [53.0, 10788.0], [54.0, 715.0], [55.0, 748.0], [56.0, 748.0], [57.0, 10828.0], [58.0, 3165.0], [59.0, 10874.0], [60.0, 3190.5], [61.0, 3222.0], [62.0, 5903.5], [63.0, 910.0], [66.0, 3363.0], [67.0, 5996.0], [64.0, 5673.0], [68.0, 1038.0], [69.0, 1064.0], [72.0, 3458.0], [73.0, 1166.0], [74.0, 4282.666666666667], [75.0, 4673.25], [77.0, 5730.5], [78.0, 3198.0], [80.0, 1317.0], [81.0, 1338.0], [82.0, 1342.0], [83.0, 5209.0], [84.0, 1374.0], [85.0, 1385.0], [87.0, 1394.0], [89.0, 3371.5], [91.0, 3427.0], [90.0, 6912.0], [88.0, 10308.0], [92.0, 1520.0], [94.0, 1570.0], [95.0, 5996.5], [98.0, 5916.5], [99.0, 1647.0], [96.0, 5538.0], [101.0, 4225.666666666667], [103.0, 1768.0], [102.0, 10477.0], [100.0, 7891.0], [104.0, 3687.5], [107.0, 1880.0], [106.0, 5633.0], [109.0, 1892.0], [111.0, 3906.0], [113.0, 6260.5], [114.0, 2019.0], [115.0, 5346.0], [117.0, 6352.5], [118.0, 3959.5], [119.0, 2181.0], [116.0, 5719.0], [122.0, 6449.5], [123.0, 5868.0], [124.0, 6482.0], [125.0, 4144.5], [128.0, 6567.5], [130.0, 2491.0], [131.0, 2524.0], [134.0, 3546.3333333333335], [135.0, 6311.5], [133.0, 9910.0], [129.0, 5912.0], [138.0, 2775.0], [140.0, 6303.0], [143.0, 4639.5], [142.0, 7531.5], [141.0, 5148.0], [139.0, 5451.0], [136.0, 5406.0], [144.0, 2924.0], [146.0, 2932.0], [149.0, 3055.0], [150.0, 3072.0], [148.0, 5637.0], [147.0, 9981.0], [153.0, 3169.0], [155.0, 4340.5], [157.0, 3231.0], [156.0, 5538.0], [160.0, 3336.0], [161.0, 3353.0], [165.0, 3504.0], [166.0, 6771.0], [167.0, 6885.333333333333], [169.0, 4694.0], [171.0, 6898.5], [174.0, 3742.0], [175.0, 5817.0], [170.0, 5711.0], [168.0, 10116.0], [177.0, 4877.0], [178.0, 3853.0], [181.0, 3971.0], [183.0, 8104.5], [179.0, 7243.333333333333], [185.0, 4449.0], [188.0, 4683.5], [190.0, 4713.5], [189.0, 9476.0], [187.0, 5135.0], [193.0, 4261.0], [197.0, 4371.0], [198.0, 4389.0], [199.0, 9423.0], [195.0, 5336.0], [202.0, 4497.0], [204.0, 7049.0], [207.0, 4639.0], [209.0, 4661.0], [212.0, 5183.333333333333], [215.0, 4868.0], [214.0, 9658.0], [217.0, 7209.0], [221.0, 5281.5], [222.0, 5044.0], [223.0, 5601.0], [220.0, 5497.0], [218.0, 9482.5], [216.0, 5455.0], [226.0, 5399.5], [228.0, 7439.0], [231.0, 5302.0], [229.0, 5674.0], [234.0, 5433.666666666667], [237.0, 5466.0], [239.0, 5900.5], [236.0, 9822.0], [233.0, 9794.0], [232.0, 7093.666666666667], [240.0, 5591.0], [242.0, 5806.5], [244.0, 5665.0], [247.0, 5473.5], [246.0, 5140.0], [245.0, 8982.0], [243.0, 9880.0], [251.0, 5892.0], [253.0, 5935.0], [254.0, 5308.0], [252.0, 9073.0], [250.0, 5263.0], [256.0, 6040.0], [258.0, 7597.5], [261.0, 6185.0], [264.0, 6289.0], [268.0, 6435.0], [271.0, 7856.0], [270.0, 5203.0], [269.0, 8991.0], [273.0, 6568.0], [276.0, 6672.0], [278.0, 6054.0], [281.0, 6128.5], [285.0, 6943.0], [284.0, 5486.0], [279.0, 9135.0], [277.0, 5348.0], [275.0, 5588.0], [274.0, 5544.0], [302.0, 7445.0], [288.0, 7043.0], [290.0, 8154.5], [291.0, 5333.5], [293.0, 7194.0], [292.0, 9280.0], [295.0, 5677.0], [296.0, 6509.5], [298.0, 8330.0], [303.0, 9381.0], [301.0, 7621.5], [300.0, 5768.0], [305.0, 7654.0], [307.0, 7602.0], [310.0, 7720.0], [314.0, 7851.0], [318.0, 7975.0], [304.0, 5912.5], [333.0, 6749.8], [320.0, 8127.0], [323.0, 8130.0], [326.0, 6759.0], [325.0, 5081.0], [324.0, 6605.5], [329.0, 8496.0], [334.0, 7972.0], [328.0, 8623.0], [331.0, 6377.666666666667], [330.0, 6062.875], [1.0, 147.6969696969697]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}, {"data": [[132.25813953488384, 4065.009302325581]], "isOverall": false, "label": "/api/listings?geojson=true-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 334.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 690.6666666666666, "minX": 1.654609452E12, "maxY": 7093012.0, "series": [{"data": [[1.654609473E12, 5424068.0], [1.654609476E12, 5006832.0], [1.6546094535E12, 1672218.6666666667], [1.6546094565E12, 2926382.6666666665], [1.654609479E12, 4589596.0], [1.6546094595E12, 4181365.3333333335], [1.654609482E12, 4589596.0], [1.6546094625E12, 5015018.666666667], [1.654609485E12, 3766182.0], [1.654609488E12, 102429.33333333333], [1.6546094655E12, 5845397.333333333], [1.6546094685E12, 7093012.0], [1.654609491E12, 130830.0], [1.6546094715E12, 5841304.0], [1.654609452E12, 2090273.3333333333], [1.6546094745E12, 5842941.333333333], [1.654609455E12, 2508328.0], [1.6546094775E12, 4589596.0], [1.654609458E12, 3762492.0], [1.6546094805E12, 4589596.0], [1.654609461E12, 5015837.333333333], [1.6546094835E12, 4172360.0], [1.654609464E12, 6274094.666666667], [1.6546094865E12, 577850.0], [1.654609467E12, 6675776.0], [1.6546094895E12, 177550.0], [1.65460947E12, 6676594.666666667], [1.6546094925E12, 14524.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.654609473E12, 1248.0], [1.654609476E12, 1152.0], [1.6546094535E12, 778.6666666666666], [1.6546094565E12, 1362.6666666666667], [1.654609479E12, 1056.0], [1.6546094595E12, 2045.3333333333333], [1.654609482E12, 1056.0], [1.6546094625E12, 2138.6666666666665], [1.654609485E12, 1840.0], [1.654609488E12, 8992.0], [1.6546094655E12, 1837.3333333333333], [1.6546094685E12, 1632.0], [1.654609491E12, 8821.333333333334], [1.6546094715E12, 1344.0], [1.654609452E12, 973.3333333333334], [1.6546094745E12, 1541.3333333333333], [1.654609455E12, 1168.0], [1.6546094775E12, 1056.0], [1.654609458E12, 1752.0], [1.6546094805E12, 1056.0], [1.654609461E12, 2237.3333333333335], [1.6546094835E12, 960.0], [1.654609464E12, 3314.6666666666665], [1.6546094865E12, 13877.333333333334], [1.654609467E12, 1536.0], [1.6546094895E12, 16605.333333333332], [1.65460947E12, 1634.6666666666667], [1.6546094925E12, 690.6666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6546094925E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 107.71428571428571, "minX": 1.654609452E12, "maxY": 16776.808823529416, "series": [{"data": [[1.654609452E12, 556.4], [1.6546094745E12, 9497.5], [1.6546094535E12, 112.5], [1.654609455E12, 110.33333333333334], [1.6546094565E12, 107.71428571428571], [1.654609458E12, 109.33333333333333], [1.6546094595E12, 109.72727272727273], [1.654609461E12, 112.54545454545455], [1.6546094625E12, 150.4], [1.654609464E12, 313.05263157894734], [1.654609485E12, 8082.833333333333], [1.6546094865E12, 10733.60869565217], [1.654609488E12, 11203.916666666668], [1.6546094655E12, 243.0], [1.6546094895E12, 10737.5046728972], [1.65460947E12, 5031.0], [1.654609491E12, 16776.808823529416], [1.6546094925E12, 16310.857142857143]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.654609473E12, 1771.6153846153848], [1.654609476E12, 3183.166666666667], [1.6546094535E12, 147.75], [1.6546094565E12, 146.14285714285714], [1.654609479E12, 4698.181818181819], [1.6546094595E12, 144.39999999999998], [1.654609482E12, 6478.090909090909], [1.6546094625E12, 151.91666666666666], [1.654609485E12, 7601.384615384615], [1.654609488E12, 7065.75], [1.6546094655E12, 232.0], [1.6546094685E12, 591.6470588235294], [1.654609491E12, 7523.090909090911], [1.6546094715E12, 1305.2857142857142], [1.654609452E12, 476.2], [1.6546094745E12, 2452.9285714285716], [1.654609455E12, 147.0], [1.6546094775E12, 3942.454545454545], [1.654609458E12, 144.33333333333334], [1.6546094805E12, 5547.818181818182], [1.654609461E12, 149.33333333333331], [1.6546094835E12, 7414.0], [1.654609464E12, 188.86666666666667], [1.6546094865E12, 6732.580000000001], [1.654609467E12, 518.625], [1.6546094895E12, 7240.476190476191], [1.65460947E12, 859.8125]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6546094925E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 107.71428571428571, "minX": 1.654609452E12, "maxY": 16776.808823529416, "series": [{"data": [[1.654609452E12, 556.4], [1.6546094745E12, 9497.5], [1.6546094535E12, 112.5], [1.654609455E12, 110.33333333333334], [1.6546094565E12, 107.71428571428571], [1.654609458E12, 109.33333333333333], [1.6546094595E12, 109.72727272727273], [1.654609461E12, 112.54545454545455], [1.6546094625E12, 150.29999999999998], [1.654609464E12, 313.0], [1.654609485E12, 8082.833333333333], [1.6546094865E12, 10733.597826086954], [1.654609488E12, 11203.883333333333], [1.6546094655E12, 243.0], [1.6546094895E12, 10737.48598130841], [1.65460947E12, 5031.0], [1.654609491E12, 16776.808823529416], [1.6546094925E12, 16310.857142857143]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.654609473E12, 1770.5384615384617], [1.654609476E12, 3182.0833333333335], [1.6546094535E12, 146.0], [1.6546094565E12, 144.85714285714286], [1.654609479E12, 4696.909090909091], [1.6546094595E12, 143.39999999999998], [1.654609482E12, 6476.909090909091], [1.6546094625E12, 150.83333333333334], [1.654609485E12, 7600.692307692308], [1.654609488E12, 7065.75], [1.6546094655E12, 230.85714285714286], [1.6546094685E12, 590.4705882352941], [1.654609491E12, 7523.090909090911], [1.6546094715E12, 1304.142857142857], [1.654609452E12, 474.2], [1.6546094745E12, 2451.785714285714], [1.654609455E12, 146.0], [1.6546094775E12, 3941.3636363636365], [1.654609458E12, 143.0], [1.6546094805E12, 5544.000000000001], [1.654609461E12, 148.0], [1.6546094835E12, 7412.7], [1.654609464E12, 187.79999999999998], [1.6546094865E12, 6732.540000000002], [1.654609467E12, 517.5625000000001], [1.6546094895E12, 7240.476190476191], [1.65460947E12, 858.75]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6546094925E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 5.5, "minX": 1.654609452E12, "maxY": 10.4, "series": [{"data": [[1.654609452E12, 10.4], [1.6546094745E12, 7.0], [1.6546094535E12, 5.75], [1.654609455E12, 5.5], [1.6546094565E12, 5.7142857142857135], [1.654609458E12, 5.888888888888889], [1.6546094595E12, 5.636363636363636], [1.654609461E12, 5.909090909090909], [1.6546094625E12, 6.1], [1.654609464E12, 7.105263157894736], [1.654609485E12, 6.666666666666666], [1.6546094865E12, 6.999999999999999], [1.654609488E12, 6.983333333333333], [1.6546094655E12, 6.6], [1.6546094895E12, 7.373831775700936], [1.65460947E12, 7.0], [1.654609491E12, 7.117647058823529], [1.6546094925E12, 6.571428571428571]], "isOverall": false, "label": "/api/statistics/neighbourhoods", "isController": false}, {"data": [[1.654609473E12, 6.615384615384616], [1.654609476E12, 6.75], [1.6546094535E12, 5.75], [1.6546094565E12, 5.7142857142857135], [1.654609479E12, 8.818181818181818], [1.6546094595E12, 5.7], [1.654609482E12, 6.909090909090908], [1.6546094625E12, 6.166666666666667], [1.654609485E12, 8.769230769230768], [1.654609488E12, 6.9375], [1.6546094655E12, 7.071428571428572], [1.6546094685E12, 7.117647058823529], [1.654609491E12, 7.181818181818182], [1.6546094715E12, 6.928571428571427], [1.654609452E12, 10.4], [1.6546094745E12, 6.642857142857143], [1.654609455E12, 5.5], [1.6546094775E12, 6.636363636363637], [1.654609458E12, 5.777777777777778], [1.6546094805E12, 7.181818181818182], [1.654609461E12, 5.666666666666667], [1.6546094835E12, 6.5], [1.654609464E12, 7.199999999999999], [1.6546094865E12, 7.08], [1.654609467E12, 7.312499999999999], [1.6546094895E12, 7.222222222222223], [1.65460947E12, 6.875]], "isOverall": false, "label": "/api/listings?geojson=true", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6546094925E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 95.0, "minX": 1.654609452E12, "maxY": 9545.0, "series": [{"data": [[1.654609452E12, 1357.0], [1.654609473E12, 2019.0], [1.6546094745E12, 9545.0], [1.654609476E12, 3512.0], [1.6546094535E12, 151.0], [1.654609455E12, 148.0], [1.6546094565E12, 150.0], [1.6546094775E12, 4261.0], [1.654609458E12, 148.0], [1.654609479E12, 5044.0], [1.6546094595E12, 152.0], [1.6546094805E12, 5935.0], [1.654609461E12, 159.0], [1.654609482E12, 6943.0], [1.6546094625E12, 291.0], [1.6546094835E12, 7851.0], [1.654609464E12, 494.0], [1.654609485E12, 8773.0], [1.6546094865E12, 9464.0], [1.6546094655E12, 395.0], [1.654609467E12, 597.0], [1.6546094685E12, 604.0], [1.65460947E12, 5031.0], [1.6546094715E12, 1502.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.654609452E12, 1327.2], [1.654609473E12, 2013.0], [1.6546094745E12, 9478.5], [1.654609476E12, 3509.6], [1.6546094535E12, 151.0], [1.654609455E12, 148.0], [1.6546094565E12, 149.0], [1.6546094775E12, 4239.2], [1.654609458E12, 147.1], [1.654609479E12, 5036.2], [1.6546094595E12, 149.0], [1.6546094805E12, 5926.4], [1.654609461E12, 152.6], [1.654609482E12, 6917.8], [1.6546094625E12, 209.1], [1.6546094835E12, 7837.9], [1.654609464E12, 402.5], [1.654609485E12, 8773.0], [1.6546094865E12, 9464.0], [1.6546094655E12, 330.0], [1.654609467E12, 588.6], [1.6546094685E12, 599.2], [1.65460947E12, 1857.3999999999971], [1.6546094715E12, 1498.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.654609452E12, 1357.0], [1.654609473E12, 2019.0], [1.6546094745E12, 9545.0], [1.654609476E12, 3512.0], [1.6546094535E12, 151.0], [1.654609455E12, 148.0], [1.6546094565E12, 150.0], [1.6546094775E12, 4261.0], [1.654609458E12, 148.0], [1.654609479E12, 5044.0], [1.6546094595E12, 152.0], [1.6546094805E12, 5935.0], [1.654609461E12, 159.0], [1.654609482E12, 6943.0], [1.6546094625E12, 291.0], [1.6546094835E12, 7851.0], [1.654609464E12, 494.0], [1.654609485E12, 8773.0], [1.6546094865E12, 9464.0], [1.6546094655E12, 395.0], [1.654609467E12, 597.0], [1.6546094685E12, 604.0], [1.65460947E12, 5031.0], [1.6546094715E12, 1502.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.654609452E12, 1357.0], [1.654609473E12, 2019.0], [1.6546094745E12, 9545.0], [1.654609476E12, 3512.0], [1.6546094535E12, 151.0], [1.654609455E12, 148.0], [1.6546094565E12, 150.0], [1.6546094775E12, 4261.0], [1.654609458E12, 148.0], [1.654609479E12, 5044.0], [1.6546094595E12, 151.8], [1.6546094805E12, 5935.0], [1.654609461E12, 157.79999999999998], [1.654609482E12, 6943.0], [1.6546094625E12, 278.8499999999998], [1.6546094835E12, 7851.0], [1.654609464E12, 492.5], [1.654609485E12, 8773.0], [1.6546094865E12, 9464.0], [1.6546094655E12, 395.0], [1.654609467E12, 597.0], [1.6546094685E12, 604.0], [1.65460947E12, 5031.0], [1.6546094715E12, 1502.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.654609452E12, 110.0], [1.654609473E12, 1520.0], [1.6546094745E12, 2129.0], [1.654609476E12, 2905.0], [1.6546094535E12, 110.0], [1.654609455E12, 109.0], [1.6546094565E12, 95.0], [1.6546094775E12, 3616.0], [1.654609458E12, 106.0], [1.654609479E12, 4371.0], [1.6546094595E12, 107.0], [1.6546094805E12, 5154.0], [1.654609461E12, 108.0], [1.654609482E12, 6040.0], [1.6546094625E12, 107.0], [1.6546094835E12, 7043.0], [1.654609464E12, 114.0], [1.654609485E12, 7975.0], [1.6546094865E12, 9464.0], [1.6546094655E12, 116.0], [1.654609467E12, 433.0], [1.6546094685E12, 572.0], [1.65460947E12, 684.0], [1.6546094715E12, 1152.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.654609452E12, 329.0], [1.654609473E12, 1768.0], [1.6546094745E12, 2507.5], [1.654609476E12, 3187.0], [1.6546094535E12, 129.5], [1.654609455E12, 129.0], [1.6546094565E12, 128.0], [1.6546094775E12, 3971.0], [1.654609458E12, 127.0], [1.654609479E12, 4661.0], [1.6546094595E12, 113.0], [1.6546094805E12, 5591.0], [1.654609461E12, 144.0], [1.654609482E12, 6517.0], [1.6546094625E12, 148.0], [1.6546094835E12, 7390.0], [1.654609464E12, 254.5], [1.654609485E12, 8391.0], [1.6546094865E12, 9464.0], [1.6546094655E12, 246.0], [1.654609467E12, 491.5], [1.6546094685E12, 592.0], [1.65460947E12, 879.0], [1.6546094715E12, 1327.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6546094865E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 122.0, "minX": 4.0, "maxY": 16700.0, "series": [{"data": [[8.0, 492.0], [9.0, 1647.0], [10.0, 471.5], [11.0, 1466.0], [12.0, 360.0], [50.0, 8743.0], [13.0, 152.0], [15.0, 129.0], [4.0, 130.0], [16.0, 8184.0], [17.0, 122.0], [22.0, 226.5], [23.0, 253.0], [95.0, 9464.0], [6.0, 129.5], [7.0, 5987.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 5127.0], [85.0, 9886.0], [90.0, 12432.0], [95.0, 9103.0], [92.0, 9470.5], [50.0, 8554.0], [7.0, 16700.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 95.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 122.0, "minX": 4.0, "maxY": 16700.0, "series": [{"data": [[8.0, 491.5], [9.0, 1646.0], [10.0, 470.5], [11.0, 1465.0], [12.0, 359.0], [50.0, 8742.0], [13.0, 151.0], [15.0, 128.5], [4.0, 129.0], [16.0, 8183.0], [17.0, 122.0], [22.0, 226.0], [23.0, 252.0], [95.0, 9463.0], [6.0, 129.0], [7.0, 5986.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 5127.0], [85.0, 9886.0], [90.0, 12432.0], [95.0, 9103.0], [92.0, 9470.5], [50.0, 8554.0], [7.0, 16700.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 95.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.6666666666666665, "minX": 1.6546094505E12, "maxY": 40.0, "series": [{"data": [[1.654609452E12, 4.0], [1.654609473E12, 32.0], [1.6546094745E12, 34.666666666666664], [1.654609476E12, 34.666666666666664], [1.6546094535E12, 5.333333333333333], [1.654609455E12, 8.0], [1.6546094565E12, 10.666666666666666], [1.6546094775E12, 38.666666666666664], [1.654609458E12, 12.0], [1.654609479E12, 40.0], [1.6546094595E12, 13.333333333333334], [1.6546094805E12, 40.0], [1.654609461E12, 16.0], [1.654609482E12, 40.0], [1.6546094625E12, 18.666666666666668], [1.6546094835E12, 40.0], [1.654609464E12, 20.0], [1.654609485E12, 33.333333333333336], [1.6546094655E12, 21.333333333333332], [1.654609467E12, 24.0], [1.6546094685E12, 26.666666666666668], [1.65460947E12, 28.0], [1.6546094505E12, 2.6666666666666665], [1.6546094715E12, 29.333333333333332]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.654609485E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.654609452E12, "maxY": 83.33333333333333, "series": [{"data": [[1.654609452E12, 6.666666666666667], [1.654609473E12, 8.666666666666666], [1.6546094745E12, 10.666666666666666], [1.654609476E12, 8.0], [1.6546094535E12, 5.333333333333333], [1.654609455E12, 8.0], [1.6546094565E12, 9.333333333333334], [1.6546094775E12, 7.333333333333333], [1.654609458E12, 12.0], [1.654609479E12, 7.333333333333333], [1.6546094595E12, 14.0], [1.6546094805E12, 7.333333333333333], [1.654609461E12, 15.333333333333334], [1.654609482E12, 7.333333333333333], [1.6546094625E12, 14.666666666666666], [1.6546094835E12, 6.666666666666667], [1.654609464E12, 22.666666666666668], [1.654609485E12, 6.0], [1.6546094865E12, 0.6666666666666666], [1.6546094655E12, 12.666666666666666], [1.654609467E12, 10.666666666666666], [1.6546094685E12, 11.333333333333334], [1.65460947E12, 11.333333333333334], [1.6546094715E12, 9.333333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.654609485E12, 2.0], [1.6546094865E12, 30.0], [1.654609488E12, 18.666666666666668], [1.6546094895E12, 30.0], [1.654609491E12, 30.0], [1.6546094925E12, 4.0]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.654609485E12, 4.666666666666667], [1.6546094865E12, 64.0], [1.654609488E12, 42.666666666666664], [1.6546094895E12, 83.33333333333333], [1.654609491E12, 30.0], [1.6546094925E12, 0.6666666666666666]], "isOverall": false, "label": "404", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6546094925E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.654609452E12, "maxY": 71.33333333333333, "series": [{"data": [[1.654609452E12, 3.3333333333333335], [1.654609473E12, 8.666666666666666], [1.6546094745E12, 9.333333333333334], [1.654609476E12, 8.0], [1.6546094535E12, 2.6666666666666665], [1.654609455E12, 4.0], [1.6546094565E12, 4.666666666666667], [1.6546094775E12, 7.333333333333333], [1.654609458E12, 6.0], [1.654609479E12, 7.333333333333333], [1.6546094595E12, 6.666666666666667], [1.6546094805E12, 7.333333333333333], [1.654609461E12, 8.0], [1.654609482E12, 7.333333333333333], [1.6546094625E12, 8.0], [1.6546094835E12, 6.666666666666667], [1.654609464E12, 10.0], [1.654609485E12, 6.0], [1.6546094865E12, 0.6666666666666666], [1.6546094655E12, 9.333333333333334], [1.654609467E12, 10.666666666666666], [1.6546094685E12, 11.333333333333334], [1.65460947E12, 10.666666666666666], [1.6546094715E12, 9.333333333333334]], "isOverall": false, "label": "/api/listings?geojson=true-success", "isController": false}, {"data": [[1.654609452E12, 3.3333333333333335], [1.6546094625E12, 6.666666666666667], [1.654609464E12, 12.666666666666666], [1.6546094745E12, 1.3333333333333333], [1.6546094535E12, 2.6666666666666665], [1.654609455E12, 4.0], [1.6546094655E12, 3.3333333333333335], [1.6546094565E12, 4.666666666666667], [1.654609458E12, 6.0], [1.6546094595E12, 7.333333333333333], [1.65460947E12, 0.6666666666666666], [1.654609461E12, 7.333333333333333]], "isOverall": false, "label": "/api/statistics/neighbourhoods-success", "isController": false}, {"data": [[1.654609485E12, 2.6666666666666665], [1.6546094865E12, 32.666666666666664], [1.654609488E12, 21.333333333333332], [1.6546094895E12, 42.0], [1.654609491E12, 14.666666666666666]], "isOverall": false, "label": "/api/listings?geojson=true-failure", "isController": false}, {"data": [[1.654609485E12, 4.0], [1.6546094865E12, 61.333333333333336], [1.654609488E12, 40.0], [1.6546094895E12, 71.33333333333333], [1.654609491E12, 45.333333333333336], [1.6546094925E12, 4.666666666666667]], "isOverall": false, "label": "/api/statistics/neighbourhoods-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6546094925E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.654609452E12, "maxY": 113.33333333333333, "series": [{"data": [[1.654609452E12, 6.666666666666667], [1.654609473E12, 8.666666666666666], [1.6546094745E12, 10.666666666666666], [1.654609476E12, 8.0], [1.6546094535E12, 5.333333333333333], [1.654609455E12, 8.0], [1.6546094565E12, 9.333333333333334], [1.6546094775E12, 7.333333333333333], [1.654609458E12, 12.0], [1.654609479E12, 7.333333333333333], [1.6546094595E12, 14.0], [1.6546094805E12, 7.333333333333333], [1.654609461E12, 15.333333333333334], [1.654609482E12, 7.333333333333333], [1.6546094625E12, 14.666666666666666], [1.6546094835E12, 6.666666666666667], [1.654609464E12, 22.666666666666668], [1.654609485E12, 6.0], [1.6546094865E12, 0.6666666666666666], [1.6546094655E12, 12.666666666666666], [1.654609467E12, 10.666666666666666], [1.6546094685E12, 11.333333333333334], [1.65460947E12, 11.333333333333334], [1.6546094715E12, 9.333333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.654609485E12, 6.666666666666667], [1.6546094865E12, 94.0], [1.654609488E12, 61.333333333333336], [1.6546094895E12, 113.33333333333333], [1.654609491E12, 60.0], [1.6546094925E12, 4.666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6546094925E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

